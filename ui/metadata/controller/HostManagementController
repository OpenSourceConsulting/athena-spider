{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "HostManagementController"
    },
    "designerId": "0eb4e7ed-8602-4b32-8083-58bafa7d6c08",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#hostMgmtBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "hostManagementClick",
                "implHandler": [
                    "/**",
                    " * Host Management 버튼 클릭 시 수행되는 function",
                    " */",
                    "var hostMgmtBtn = this.getHostMgmtBtn(),",
                    "    networkBtn = this.getNetworkBtn(),",
                    "    managementPanel = this.getManagementPanel();",
                    "",
                    "// 현재 선택된 메뉴가 Host Management일 경우 무시한다.",
                    "if (managementPanel.layout.getActiveItem().itemId === \"hostMgmtPanel\") {",
                    "    hostMgmtBtn.toggle(true);",
                    "    return;",
                    "}",
                    "",
                    "hostMgmtBtn.toggle(true);",
                    "networkBtn.toggle(false);",
                    "",
                    "managementPanel.layout.setActiveItem(0);",
                    "",
                    "if (Ext.getCmp('hostGridPanel').selModel.selected.length === 0) {",
                    "    Ext.getCmp('hostGridPanel').selModel.select(0);",
                    "    Ext.getCmp('utilizationBtn').fireEvent('click');",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "7223c677-59d7-4359-96a6-f88ee886e94e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#networkBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "networkInstanceClick",
                "implHandler": [
                    "/**",
                    " * Network Instances 버튼 클릭 시 수행되는 function",
                    " */",
                    "var hostMgmtBtn = this.getHostMgmtBtn(),",
                    "    networkBtn = this.getNetworkBtn(),",
                    "    managementPanel = this.getManagementPanel();",
                    "",
                    "// 현재 선택된 메뉴가 Network Instances일 경우 무시한다.",
                    "if (managementPanel.layout.getActiveItem().itemId === \"networkInstancePanel\") {",
                    "    networkBtn.toggle(true);",
                    "    return;",
                    "}",
                    "",
                    "networkBtn.toggle(true);",
                    "hostMgmtBtn.toggle(false);",
                    "",
                    "managementPanel.layout.setActiveItem(1);",
                    "",
                    "if (Ext.getCmp('hostCombo').getValue() === null) {",
                    "    Ext.getCmp('hostCombo').setValue(Ext.getStore('HostListStore').proxy.data[0].name);",
                    "    Ext.getCmp('hostCombo').fireEvent('select');",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "c500e063-3c7d-4aea-a166-dddb78562d5d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "hostMgmtBtn",
                "selector": "#hostMgmtBtn"
            },
            "designerId": "49c6a498-13f6-4a44-8bbb-16e42c132fe6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "networkBtn",
                "selector": "#networkBtn"
            },
            "designerId": "95c2d8a7-e75c-42ee-98da-367c6a919995"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "utilizationBtn",
                "selector": "#utilizationBtn"
            },
            "designerId": "d5c14c5b-3ed0-4aa4-a283-a49552191253"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "instanceListBtn",
                "selector": "#instanceListBtn"
            },
            "designerId": "bb05e637-7e50-468d-8a46-684385db5e26"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "hostDetailPanel",
                "selector": "#hostDetailPanel"
            },
            "designerId": "7139fb42-9fe3-4818-b4e9-01bae37feede"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#utilizationBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "utilizationBtnClick",
                "implHandler": [
                    "/**",
                    " * Utilization 버튼 클릭 시 수행되는 function",
                    " */",
                    "var utilizationBtn = this.getUtilizationBtn(),",
                    "    instanceListBtn = this.getInstanceListBtn(),",
                    "    hostDetailPanel = this.getHostDetailPanel(),",
                    "    hostMgmtSouthPanel = this.getHostMgmtSouthPanel();",
                    "",
                    "// 현재 선택된 메뉴가 Utilization일 경우 무시한다.",
                    "if (hostDetailPanel.layout.getActiveItem().itemId === \"utilizationPanel\") {",
                    "    utilizationBtn.toggle(true);",
                    "    return;",
                    "}",
                    "",
                    "utilizationBtn.toggle(true);",
                    "instanceListBtn.toggle(false);",
                    "",
                    "hostDetailPanel.layout.setActiveItem(0);",
                    "hostMgmtSouthPanel.setTitle(\"Average Utilization\");"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "21269b2b-29f9-4af1-872f-c8358cdd8c8c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#instanceListBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "instanceListBtnClick",
                "implHandler": [
                    "/**",
                    " * InstanceList 버튼 클릭 시 수행되는 function",
                    " */",
                    "var utilizationBtn = this.getUtilizationBtn(),",
                    "    instanceListBtn = this.getInstanceListBtn(),",
                    "    hostDetailPanel = this.getHostDetailPanel(),",
                    "    hostMgmtSouthPanel = this.getHostMgmtSouthPanel();",
                    "",
                    "// 현재 선택된 메뉴가 InstanceList일 경우 무시한다.",
                    "if (hostDetailPanel.layout.getActiveItem().itemId === \"InstanceListPanel\") {",
                    "    instanceListBtn.toggle(true);",
                    "    return;",
                    "}",
                    "",
                    "instanceListBtn.toggle(true);",
                    "utilizationBtn.toggle(false);",
                    "",
                    "hostDetailPanel.layout.setActiveItem(1);",
                    "hostMgmtSouthPanel.setTitle(\"Instance List\");"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "9ff925e9-8cb3-495e-b392-c7c55a653cbe"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "hostMgmtSouthPanel",
                "selector": "#hostMgmtSouthPanel"
            },
            "designerId": "c6bcf304-e5c1-4e9b-bce9-304114e4e5a5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "managementPanel",
                "selector": "#managementPanel"
            },
            "designerId": "ebf6a03c-e9ce-48b6-afa3-df9d9240ea68"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#hostGridPanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "hostSelect",
                "implHandler": [
                    "this.getUtilization(index);",
                    "this.getInstanceList(index);"
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "da5a7150-8471-4ad3-973f-40cecea46ece"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "index"
                ],
                "fn": "getUtilization",
                "implHandler": [
                    "/*",
                    "// Case 1",
                    "if (index < 0) {",
                    "   index = 0;",
                    "}",
                    "",
                    "//var store = Ext.getStore('ChartDataStore');",
                    "var store = Ext.data.StoreManager.lookup('ChartDataStore');",
                    "store.loadData(Ext.data.StoreManager.lookup('HostListStore').proxy.data[index].utilization);",
                    "*/",
                    "",
                    "/*",
                    "// Case 2",
                    "var store = Ext.getStore('ChartDataStore');",
                    "",
                    "var currentDate = new Date();",
                    "",
                    "// milli second 값을 지운다.",
                    "currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());",
                    "",
                    "// chart에 표시될 x축 개수",
                    "var length = 5;",
                    "",
                    "// x축의 시간 차(초)",
                    "// length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.",
                    "// length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.",
                    "var step = 1;",
                    "",
                    "// CPU, Memory, Network Chart를 위한 변수 설정",
                    "var cpuChart = Ext.getCmp('cpuChart'),",
                    "    memoryChart = Ext.getCmp('memoryChart'),",
                    "    networkChart = Ext.getCmp('networkChart');",
                    "var chartData = [];",
                    "var cpuAxis, memoryAxis, networkAxis;",
                    "",
                    "",
                    "cpuChart.bindStore(store, null);",
                    "memoryChart.bindStore(store, null);",
                    "networkChart.bindStore(store, null);",
                    "",
                    "cpuAxis = cpuChart.axes.get(1);",
                    "memoryAxis = memoryChart.axes.get(1);",
                    "networkAxis = networkChart.axes.get(1);",
                    "",
                    "cpuAxis.step = [\"s\", step];",
                    "memoryAxis.step = [\"s\", step];",
                    "networkAxis.step = [\"s\", step];",
                    "",
                    "cpuAxis.fromDate = currentDate;",
                    "memoryAxis.fromDate = currentDate;",
                    "networkAxis.fromDate = currentDate;",
                    "",
                    "cpuAxis.toDate = Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step));",
                    "memoryAxis.toDate = Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step));",
                    "networkAxis.toDate = Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step));",
                    "",
                    "clearInterval(GlobalData.intervalId1);",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "GlobalData.intervalId1 = setInterval(function() {",
                    "    loadStat();",
                    "}, step * 1000);",
                    "",
                    "// 상태 정보를 조회하기 위한 function",
                    "loadStat = function() {",
                    "    var last = false, date = new Date();",
                    "    chartData = chartData.slice();",
                    "",
                    "    last = chartData[chartData.length -1];",
                    "",
                    "    chartData.push({",
                    "        date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "        cpu: Math.min(100, Math.max(last? last.cpu + (Math.random() - 0.5) * 20 : Math.random() * 100, 0)),",
                    "        memory: Math.min(100, Math.max(last? last.memory + (Math.random() - 0.5) * 20 : Math.random() * 100, 0)),",
                    "        network: Math.min(100, Math.max(last? last.network + (Math.random() - 0.5) * 20 : Math.random() * 100, 0))",
                    "    });",
                    "",
                    "    if (chartData.length > length + 1) {",
                    "        chartData.splice(0, 1);",
                    "    }",
                    "",
                    "    cpuAxis = cpuChart.axes.get(1);",
                    "    memoryAxis = memoryChart.axes.get(1);",
                    "    networkAxis = networkChart.axes.get(1);",
                    "",
                    "    var toDate = cpuAxis.toDate,",
                    "        lastDate = chartData[chartData.length - 1].date;",
                    "",
                    "    if (+toDate < +lastDate) {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = chartData[chartData.length -1].date;",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = chartData[chartData.length -1].date;",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = chartData[chartData.length -1].date;",
                    "",
                    "        cpuChart.markerIndex = 1;",
                    "        networkChart.markerIndex = 1;",
                    "        memoryChart.markerIndex = 1;",
                    "    } else {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "    }",
                    "",
                    "    store.loadData(chartData);",
                    "};",
                    "*/",
                    "",
                    "// Case 3",
                    "var currentDate = new Date();",
                    "",
                    "// milli second 값을 지운다.",
                    "currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());",
                    "",
                    "// chart에 표시될 x축 개수",
                    "var length = 10;",
                    "",
                    "// x축의 시간 차(초)",
                    "// length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.",
                    "// length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.",
                    "var step = 1;",
                    "",
                    "// CPU, Memory, Network Chart를 위한 변수 설정",
                    "var cpuChart, memoryChart, networkChart;",
                    "var chartData = [];",
                    "",
                    "//var store = Ext.getStore('ChartDataStore');",
                    "var store = Ext.create('Ext.data.Store', {",
                    "    fields: ['date', 'cpu', 'memory', 'network']",
                    "});",
                    "",
                    "Ext.ComponentManager.unregister(Ext.getCmp('cpuChart'));",
                    "Ext.ComponentManager.unregister(Ext.getCmp('memoryChart'));",
                    "Ext.ComponentManager.unregister(Ext.getCmp('networkChart'));",
                    "",
                    "// CPU Chart 생성 후 cpuPanel에 draw 한다.",
                    "var cpuChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 400,",
                    "    style: 'background:#fff',",
                    "    id: 'cpuChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG CPU Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'cpu',",
                    "        title: 'AVG CPU Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'cpu',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "// Memory Chart 생성 후 memoryPanel에 draw 한다.",
                    "var memoryChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 400,",
                    "    style: 'background:#fff',",
                    "    id: 'memoryChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG Memory Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'memory',",
                    "        title: 'AVG Memory Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'memory',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "// Network Chart 생성 후 networkPanel에 draw 한다.",
                    "var networkChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 400,",
                    "    style: 'background:#fff',",
                    "    id: 'networkChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG Network Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'network',",
                    "        title: 'AVG Network Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'network',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "Ext.getCmp('cpuChartPanel').removeAll();",
                    "Ext.getCmp('memoryChartPanel').removeAll();",
                    "Ext.getCmp('networkChartPanel').removeAll();",
                    "",
                    "Ext.getCmp('cpuChartPanel').add(cpuChartItem);",
                    "Ext.getCmp('memoryChartPanel').add(memoryChartItem);",
                    "Ext.getCmp('networkChartPanel').add(networkChartItem);",
                    "",
                    "cpuChart = Ext.getCmp('cpuChart');",
                    "memoryChart = Ext.getCmp('memoryChart');",
                    "networkChart = Ext.getCmp('networkChart');",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "clearInterval(GlobalData.intervalId1);",
                    "GlobalData.intervalId1 = setInterval(function() {",
                    "    loadStat();",
                    "}, step * 1000);",
                    "",
                    "// Utilization 상태 정보를 조회하기 위한 function",
                    "loadStat = function() {",
                    "    var last = false, date = new Date();",
                    "    chartData = chartData.slice();",
                    "",
                    "    last = chartData[chartData.length -1];",
                    "",
                    "    chartData.push({",
                    "        date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "        cpu: Math.min(100, Math.max(last? last.cpu + (Math.random() - 0.5) * 10 : 5, 5)),",
                    "        memory: Math.min(100, Math.max(last? last.memory + (Math.random() - 0.5) * 25 : 40, 40)),",
                    "        network: Math.min(100, Math.max(last? last.network + (Math.random() - 0.5) * 15 : 20, 20))",
                    "    });",
                    "",
                    "    if (chartData.length > length + 1) {",
                    "        chartData.splice(0, 1);",
                    "    }",
                    "",
                    "    cpuAxis = cpuChart.axes.get(1);",
                    "    memoryAxis = memoryChart.axes.get(1);",
                    "    networkAxis = networkChart.axes.get(1);",
                    "",
                    "    var toDate = cpuAxis.toDate,",
                    "        lastDate = chartData[chartData.length - 1].date;",
                    "",
                    "    if (+toDate < +lastDate) {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = chartData[chartData.length -1].date;",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = chartData[chartData.length -1].date;",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = chartData[chartData.length -1].date;",
                    "",
                    "        cpuChart.markerIndex = 1;",
                    "        networkChart.markerIndex = 1;",
                    "        memoryChart.markerIndex = 1;",
                    "    } else {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "    }",
                    "",
                    "    store.loadData(chartData);",
                    "};"
                ]
            },
            "designerId": "e46dddad-95c2-493e-90ed-f2d61c23f8ed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "index"
                ],
                "fn": "getInstanceList",
                "implHandler": [
                    "if (index < 0) {",
                    "    index = 0;",
                    "}",
                    "",
                    "var data = Ext.getStore('HostListStore').proxy.data[index].instances;",
                    "",
                    "var store = Ext.create('Ext.data.Store', {",
                    "    fields: ['no', 'name', 'ip', 'status', 'memory', 'cpu', 'date'],",
                    "    data: data",
                    "});",
                    "",
                    "var gridPanel = Ext.create('Ext.grid.Panel', {",
                    "    bodyBorder: true,",
                    "    collapsed: false,",
                    "    collapsible: false,",
                    "    columnLines: true,",
                    "    emptyText: 'No Data',",
                    "    forceFit: true,",
                    "    store: store,",
                    "    viewConfig: {",
                    "        markDirty:false",
                    "    },",
                    "    plugins: [",
                    "        Ext.create('Ext.grid.plugin.RowEditing', {",
                    "            clicksToMoveEditor: 1,",
                    "            autoCancel: false,",
                    "            listeners: {",
                    "                edit: function(editor, context, eOpts) {",
                    "                    if (context.field === \"status\") {",
                    "                        if (context.value === context.record.data.status) {",
                    "                            return;",
                    "                        }",
                    "",
                    "                        Ext.Msg.confirm('Confirm', 'Are you sure you want to change status?', function(btn) {",
                    "                            if (btn == 'yes') {",
                    "                                data[context.rowIdx].status = context.record.data.status;",
                    "                                store.sync();",
                    "                                //context.record.commit();",
                    "                            } else {",
                    "                                store.loadData(data);",
                    "                            }",
                    "                        });",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "        })",
                    "    ],",
                    "    columns: [",
                    "        {",
                    "            xtype: 'numbercolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'no',",
                    "            text: 'No',",
                    "            flex: 1,",
                    "            format: '0,000'",
                    "        },",
                    "        {",
                    "            xtype: 'gridcolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'name',",
                    "            text: 'Instance Name',",
                    "            flex: 3",
                    "        },",
                    "        {",
                    "            xtype: 'gridcolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'ip',",
                    "            text: 'IP Address',",
                    "            flex: 3",
                    "        },",
                    "        {",
                    "            xtype: 'gridcolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'status',",
                    "            text: 'Status',",
                    "            flex: 2,",
                    "            editor: new Ext.form.field.ComboBox({",
                    "                typeAhead: true,",
                    "                triggerAction: 'all',",
                    "                name: 'status',",
                    "                store: [",
                    "                    ['Running','Running'],",
                    "                    ['Stopped','Stopped']",
                    "                ]",
                    "            })",
                    "        },",
                    "        {",
                    "            xtype: 'gridcolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'memory',",
                    "            text: 'Memory',",
                    "            flex: 2",
                    "        },",
                    "        {",
                    "            xtype: 'gridcolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'cpu',",
                    "            text: 'CPU',",
                    "            flex: 2",
                    "        },",
                    "        {",
                    "            xtype: 'datecolumn',",
                    "            align: 'center',",
                    "            dataIndex: 'date',",
                    "            text: 'Registration Date',",
                    "            flex: 3,",
                    "            format: 'Y-m-d h:i:s'",
                    "        }",
                    "    ]",
                    "});",
                    "",
                    "Ext.getCmp('instanceListPanel').removeAll();",
                    "Ext.getCmp('instanceListPanel').add(gridPanel);"
                ]
            },
            "designerId": "cbaeae04-e3d0-4589-873b-82caa11ea8dd"
        }
    ]
}