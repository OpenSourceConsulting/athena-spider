{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "GlobalController"
    },
    "designerId": "df715fd1-d322-4ab9-ac90-81ef58b29e21",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "var global = this;",
                    "",
                    "var intervalId1, intervalId2, intervalId3, intervalId4;",
                    "var chartDataStore = Ext.getStore('chartDataStore');",
                    "var cpuChart = Ext.getCmp('cpuChart');",
                    "var memoryChart = Ext.getCmp('memoryChart');",
                    "var networkChart = Ext.getCmp('networkChart');",
                    "",
                    "//CROS 설정",
                    "Ext.data.Connection.prototype.useDefaultXhrHeader = false;",
                    "",
                    "//Form Required 설정",
                    "Ext.define('spider.form.field.Base', {",
                    "",
                    "    override : 'Ext.form.field.Base',",
                    "",
                    "    msgTarget: 'side',",
                    "    afterLabelTextTpl: [",
                    "        '<tpl if=\"allowBlank===false\"><span style=\"color:red;font-weight:bold\" data-qtip=\"Required\">*</span></tpl>'",
                    "    ]",
                    "",
                    "});",
                    "",
                    "//Ajax Waiting Message 처리",
                    "",
                    "Ext.Ajax.on('beforerequest', function (conn, opts) {",
                    "    if(opts.waitMsg) {",
                    "        if(opts.waitMsgTarget) {",
                    "            opts.waitMsgTarget.mask(opts.waitMsg, 'loading');",
                    "        } else {",
                    "            Ext.getBody().mask(opts.waitMsg, 'loading');",
                    "        }",
                    "",
                    "    }",
                    "}, Ext.getBody());",
                    "",
                    "Ext.Ajax.on('requestcomplete', Ext.getBody().unmask, Ext.getBody());",
                    "Ext.Ajax.on('requestexception', Ext.getBody().unmask, Ext.getBody());",
                    "",
                    "",
                    "// Global variables를 정의하는 구문으로 GlobalData.urlPrefix, GlobalData.serverSize 등으로 어디에서든 접근이 가능하다.",
                    "Ext.define('GLOBAL', {",
                    "    singleton: true,",
                    "    me: global,",
                    "",
                    "    apiUrlPrefix : \"http://192.168.0.130:5001/\",",
                    "    graphiteUrlPrefix : \"\"",
                    "",
                    "",
                    "});",
                    "",
                    "/*",
                    " * Global Validation(VTypes) Config",
                    " */",
                    "Ext.apply(Ext.form.field.VTypes, {",
                    "    daterange: function(val, field) {",
                    "        var date = field.parseDate(val);",
                    "",
                    "        if (!date) {",
                    "            return false;",
                    "        }",
                    "        if (field.startDateField && (!this.dateRangeMax || (date.getTime() != this.dateRangeMax.getTime()))) {",
                    "            var start = field.up('form').down('#' + field.startDateField);",
                    "            start.setMaxValue(date);",
                    "            start.validate();",
                    "            this.dateRangeMax = date;",
                    "        }",
                    "        else if (field.endDateField && (!this.dateRangeMin || (date.getTime() != this.dateRangeMin.getTime()))) {",
                    "            var end = field.up('form').down('#' + field.endDateField);",
                    "            end.setMinValue(date);",
                    "            end.validate();",
                    "            this.dateRangeMin = date;",
                    "        }",
                    "        /*",
                    "         * Always return true since we're only using this vtype to set the",
                    "         * min/max allowed values (these are tested for after the vtype test)",
                    "         */",
                    "        return true;",
                    "    },",
                    "",
                    "    daterangeText: 'Start date must be less than end date',",
                    "",
                    "    password: function(val, field) {",
                    "        //var pwd = field.up('form').down('#passwd');",
                    "        pwd = field.previousNode('textfield');",
                    "        return (val == pwd.getValue());",
                    "    },",
                    "",
                    "    passwordText: 'Passwords do not match',",
                    "",
                    "    numeric: function(val, field) {",
                    "        var numericRe = /(^-?\\d\\d*\\.\\d*$)|(^-?\\d\\d*$)|(^-?\\.\\d\\d*$)/;",
                    "        return numericRe.test(val);",
                    "    },",
                    "    numericText : 'Not a valid numeric number. Must be numbers',",
                    "    numericMask : /[.0-9]/",
                    "",
                    "});",
                    "",
                    "Ext.define('GlobalData', {",
                    "    singleton: true,",
                    "",
                    "    intervalId1: intervalId1,",
                    "    intervalId2: intervalId2,",
                    "    intervalId3: intervalId3,",
                    "    intervalId4: intervalId4,",
                    "    chartDataStore: chartDataStore,",
                    "    cpuChart: cpuChart,",
                    "    memoryChart: memoryChart,",
                    "    networkChart: networkChart",
                    "});"
                ]
            },
            "designerId": "b2561776-47a6-4a27-a6a2-e0418d1f0581"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "msg"
                ],
                "fn": "closeWindow",
                "implHandler": [
                    "var closeMsg = \"작업을 취소하시겠습니까?\";",
                    "if(msg) {",
                    "    closeMsg = msg;",
                    "}",
                    "",
                    "Ext.MessageBox.confirm('Confirm', closeMsg, function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "        button.up(\"window\").close();",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "9eddd5f3-e107-4a09-84f2-13ca26b01f88"
        }
    ]
}