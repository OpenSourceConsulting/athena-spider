{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "VmManagementController"
    },
    "designerId": "402db966-e25d-4c82-a994-7e075a6bfb20",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record",
                    "tabIndex"
                ],
                "fn": "initVmManagement",
                "implHandler": [
                    "var vmDetailTab = Ext.getCmp(\"networkInstanceTabPanel\");",
                    "",
                    "if(record == null) {",
                    "",
                    "    Ext.getCmp(\"mgmtVmHostName\").setValue(\"\");",
                    "    Ext.getCmp(\"mgmtVmName\").setValue(\"\");",
                    "",
                    "    Ext.getCmp(\"networkInstanceTabPanel\").setActiveTab(0);",
                    "",
                    "    return;",
                    "}",
                    "",
                    "if(record.get(\"id\") !== vmConstants.selectVmId) {",
                    "",
                    "    vmConstants.vmNicRecords = null;",
                    "    vmConstants.vmNatRecords = null;",
                    "    vmConstants.vmIfAllRecords = null;",
                    "    vmConstants.vmFirewallRecords = null;",
                    "",
                    "    vmConstants.selectRecord = record;",
                    "    vmConstants.selectVmId = record.get(\"id\");",
                    "",
                    "    Ext.getCmp(\"mgmtVmHostName\").setValue(record.get(\"vmhostName\"));",
                    "    Ext.getCmp(\"mgmtVmName\").setValue(record.get(\"text\"));",
                    "    Ext.getCmp(\"mgmtVmState\").setValue(\"\");",
                    "",
                    "    vmConstants.me.setVmStatus();",
                    "    ",
                    "    vmConstants.statusInterval = setInterval(function() {",
                    "",
                    "        vmConstants.me.setVmStatus();",
                    "        ",
                    "    }, 10000);",
                    "",
                    "    vmDetailTab.setActiveTab(11); //blank tab",
                    "}",
                    "",
                    "if(tabIndex) {",
                    "",
                    "    vmDetailTab.setActiveTab(tabIndex);",
                    "",
                    "} else {",
                    "",
                    "    if(vmDetailTab.getActiveTab() === vmDetailTab.items.getAt(0)) {",
                    "",
                    "        this.setInstanceDashboard();",
                    "",
                    "    } else {",
                    "",
                    "        vmDetailTab.setActiveTab(0);",
                    "",
                    "    }",
                    "",
                    "}"
                ]
            },
            "designerId": "d896c668-1bab-45ea-b033-e33d3668bee0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setVmStatus",
                "implHandler": [
                    "",
                    "var centerContainer = this.getCenterContainer();",
                    "if (centerContainer.layout.getActiveItem().itemId !== \"VmManagementPanel\") {",
                    "    clearInterval(vmConstants.statusInterval);",
                    "    return;",
                    "}",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'mon/vm/' + vmConstants.selectRecord.get(\"vmhost\") + \"/\" + vmConstants.selectRecord.get(\"text\") + \"/status\",",
                    "    method : 'GET',",
                    "    disableCaching : true,",
                    "    success: function(response){",
                    "",
                    "        var data = Ext.JSON.decode(response.responseText);",
                    "",
                    "        if(data.length > 0) {",
                    "",
                    "            vmHostConstants.vmStatus = data[0].clone_state;",
                    "",
                    "            Ext.getCmp(\"mgmtVmState\").setValue(data[0].state.toLowerCase());",
                    "",
                    "            if(data[0].state.toLowerCase() == 'running') {",
                    "                Ext.getCmp('startVmBtn').setDisabled(true);",
                    "                Ext.getCmp('stopVmBtn').setDisabled(false);",
                    "            } else {",
                    "                Ext.getCmp('startVmBtn').setDisabled(false);",
                    "                Ext.getCmp('stopVmBtn').setDisabled(true);",
                    "            }",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "a831ee46-556c-42c9-92a8-0f20bc487912"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "refreshInstanceDashboard",
                "implHandler": [
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'vm/refresh/' + vmConstants.selectRecord.get(\"id\"),",
                    "    method : 'GET',",
                    "    disableCaching : true,",
                    "    success: function (response) {",
                    "",
                    "        if(response.status == 200) {",
                    "            ",
                    "            Ext.Msg.alert('Success', 'Repository 정보 갱신 요청이 완료되었습니다.', function (){",
                    "                ",
                    "                vmConstants.me.setInstanceDashboard();",
                    "                ",
                    "            });",
                    "            ",
                    "        }",
                    "    },",
                    "    failure: function (response) {",
                    "        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "c550a321-6eea-4dd6-8b30-fab06da1d948"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "var vmMgmt = this;",
                    "",
                    "//VM Menu Constants",
                    "Ext.define('vmConstants', {",
                    "    singleton: true,",
                    "    me : vmMgmt,",
                    "",
                    "    selectVmId : null,",
                    "    selectRecord : null,",
                    "",
                    "    vmCombo : null,",
                    "    ",
                    "    statusInterval : null,",
                    "    chartInterval : null,",
                    "",
                    "    initComboNic : false,",
                    "    initComboBonding : false,",
                    "    vmNicRecords : null,",
                    "    vmNatRecords : null,",
                    "    vmIfAllRecords : null,",
                    "    vmFirewallRecords : null,",
                    "    vmRoutingRecord : null",
                    "",
                    "});"
                ]
            },
            "designerId": "6a820b2e-8506-479f-856d-0b0d212aa840"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#vmListCycleBtn menuitem",
                "designer|targetType": "Ext.menu.CheckItem",
                "fn": "onVmListCycleBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"vmListCycleBtn\").setText(item.text);",
                    "",
                    "this.getInstanceDashboard(item.code);"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "30b05e8f-1d1c-4f2f-b5d5-cfc75ae0f710"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#networkInstanceTabPanel",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onNetworkInstanceTabPanelTabChange",
                "implHandler": [
                    "//if(newCard.title)",
                    "if(newCard.title === \"Instance Dashboard\") {",
                    "",
                    "    Ext.getCmp(\"vmDashboardReloadBtn\").show();",
                    "    this.setInstanceDashboard();",
                    "",
                    "} else if(newCard.title === \"NIC\") {",
                    "",
                    "    this.setNic();",
                    "",
                    "} else if(newCard.title === \"Bonding\") {",
                    "",
                    "    this.setBonding();",
                    "",
                    "} else if(newCard.title === \"Routing\") {",
                    "",
                    "    this.setRouting();",
                    "",
                    "} else if(newCard.title === \"NAT\") {",
                    "",
                    "    this.setNat();",
                    "",
                    "} else if(newCard.title === \"DHCP(Service)\") {",
                    "",
                    "    this.setDhcp();",
                    "",
                    "} else if(newCard.title === \"HTTPS/SSH(Service)\") {",
                    "",
                    "    this.setHttpsSsh();",
                    "",
                    "} else if(newCard.title === \"System(Service)\") {",
                    "",
                    "    this.setSystem();",
                    "",
                    "} else if(newCard.title === \"Firewall\") {",
                    "",
                    "    this.setFirewall();",
                    "    ",
                    "} else if(newCard.title === \"CLI\") {",
                    "    ",
                    "    this.setCli();",
                    "}",
                    "",
                    "",
                    "if(oldCard.title == \"Instance Dashboard\") {",
                    "    Ext.getCmp(\"vmDashboardReloadBtn\").hide();",
                    "}",
                    "",
                    "//this.changeNetworkInstanceTab()"
                ],
                "name": "tabchange",
                "scope": "me"
            },
            "designerId": "9249df4b-dd2f-4088-9032-e3134fc73a9e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setInstanceDashboard",
                "implHandler": [
                    "",
                    "var viewVmForm = Ext.getCmp(\"viewVmForm\");",
                    "",
                    "Ext.getStore(\"VmInterfaceStore\").removeAll();",
                    "",
                    "Ext.getStore('VmCpuChartStore').removeAll();",
                    "Ext.getStore('VmMemoryChartStore').removeAll();",
                    "Ext.getStore('VmNetworkChartStore').removeAll();",
                    "Ext.getStore('VmNicNetworkChartStore').removeAll();",
                    "",
                    "Ext.getCmp(\"inBoundCurrent\").setText(\"N/A\");",
                    "Ext.getCmp(\"outBoundCurrent\").setText(\"N/A\");",
                    "Ext.getCmp(\"inBoundAverage\").setText(\"N/A\");",
                    "Ext.getCmp(\"outBoundAverage\").setText(\"N/A\");",
                    "Ext.getCmp(\"inBoundPeak\").setText(\"N/A\");",
                    "Ext.getCmp(\"outBoundPeak\").setText(\"N/A\");",
                    "",
                    "this.setInstanceDashboardChart();",
                    "",
                    "vmConstants.chartInterval = setInterval(function() {",
                    "    ",
                    "    vmConstants.me.setInstanceDashboardChart();",
                    "    ",
                    "}, 5000);",
                    "",
                    "",
                    "viewVmForm.getForm().reset();",
                    "viewVmForm.getForm().waitMsgTarget = viewVmForm.getEl();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'mon/vm/' +vmConstants.selectRecord.get(\"id\") + '?detail=true',",
                    "    method : 'GET',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : viewVmForm.getEl(),",
                    "    success: function(response){",
                    "",
                    "        var data = Ext.JSON.decode(response.responseText);",
                    "        if(data.length > 0) {",
                    "",
                    "            var vmData = data[0];",
                    "            var form = viewVmForm.getForm();",
                    "",
                    "            form.setValues(vmData);",
                    "            form.findField(\"id\").setValue(vmData._id);",
                    "",
                    "            var gridData = [];",
                    "            var nics = [];",
                    "",
                    "            if(vmData.interfaces) {",
                    "                var interfaceKey = Object.keys(vmData.interfaces);",
                    "",
                    "                Ext.each(interfaceKey, function(nic, nIdx) {",
                    "",
                    "                    var ip = vmData.interfaces[nic].ipaddr;",
                    "                    if(ip == null) {",
                    "                        ip = \"\";",
                    "                    }",
                    "",
                    "                    if(vmData.interfaces[nic].disable == true) {",
                    "                        ip += \"(disable)\";",
                    "                    }",
                    "",
                    "                    nics.push({ethName : nic});",
                    "",
                    "                    gridData.push({",
                    "                        name : nic,",
                    "                        ipaddr : ip,",
                    "                        macaddr : vmData.interfaces[nic].macaddr",
                    "                    });",
                    "",
                    "                });",
                    "",
                    "                nics.reverse();",
                    "                gridData.reverse();",
                    "",
                    "                Ext.getStore(\"VmInterfaceStore\").loadData(gridData, false);",
                    "            }",
                    "",
                    "            vmConstants.me.setInstanceDashboardNics(nics);",
                    "",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "c440d205-87b4-4736-a7a0-230ed7c93077"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setInstanceDashboardChart",
                "implHandler": [
                    "",
                    "if(vmConstants.selectRecord.get(\"interim\") == true) {",
                    "    clearInterval(vmConstants.chartInterval);",
                    "    return;",
                    "}",
                    "",
                    "var centerContainer = this.getCenterContainer();",
                    "var vmDetailTab = Ext.getCmp(\"networkInstanceTabPanel\");",
                    "",
                    "if (centerContainer.layout.getActiveItem().itemId !== \"VmManagementPanel\") {",
                    "    clearInterval(vmConstants.chartInterval);",
                    "    return;",
                    "} else if(vmDetailTab.getActiveTab() !== vmDetailTab.items.getAt(0)) {",
                    "    clearInterval(vmConstants.chartInterval);",
                    "    return;",
                    "}",
                    "",
                    "",
                    "//CPU",
                    "Ext.Ajax.request({",
                    "    url : GLOBAL.apiUrlPrefix + 'mon/graphite/cpu/' +vmConstants.selectRecord.get(\"id\") + '?timespan=10&timeunit=minutes',",
                    "    disableCaching : true,",
                    "    failMsg : false,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "            var chartList = [];",
                    "",
                    "            Ext.each(data.datapoints, function (chartData, dateIdx) {",
                    "                var chartCol = {};",
                    "",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "                if(data.target.indexOf(\"user\") >= 0) {",
                    "                    chartCol.user_cpu = chartData.value;",
                    "                } else {",
                    "                    chartCol.system_cpu = chartData.value;",
                    "                }",
                    "",
                    "",
                    "                for(var i=1; i<columnData.length; i++) {",
                    "                    if(columnData[i].target.indexOf(\"user\") >= 0) {",
                    "                        chartCol.user_cpu = columnData[i].datapoints[dateIdx].value;",
                    "                    } else {",
                    "                        chartCol.system_cpu = columnData[i].datapoints[dateIdx].value;",
                    "                    }",
                    "                }",
                    "",
                    "                if(chartCol.user_cpu != null && chartCol.system_cpu != null) {",
                    "                    chartCol.user_cpu += chartCol.system_cpu;",
                    "                    chartList.push(chartCol);",
                    "                }",
                    "            });",
                    "",
                    "            Ext.getStore('VmCpuChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "//Memory",
                    "Ext.Ajax.request({",
                    "    url : GLOBAL.apiUrlPrefix + 'mon/graphite/memory/' +vmConstants.selectRecord.get(\"id\") + '?timespan=10&timeunit=minutes',",
                    "    disableCaching : true,",
                    "    failMsg : false,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "",
                    "            // Get the quality field from record",
                    "            // Update chart with data",
                    "            var chartList = [];",
                    "            Ext.each(data.datapoints, function (chartData) {",
                    "                var chartCol = {};",
                    "                chartCol.memory = chartData.value;",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "",
                    "                if(chartCol.memory != null) {",
                    "                    chartList.push(chartCol);",
                    "                }",
                    "",
                    "            });",
                    "",
                    "            Ext.getStore('VmMemoryChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "//Network",
                    "Ext.Ajax.request({",
                    "    url : GLOBAL.apiUrlPrefix + 'mon/graphite/interface/' +vmConstants.selectRecord.get(\"id\") + '?timespan=10&timeunit=minutes',",
                    "    disableCaching : true,",
                    "    failMsg : false,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "            var chartList = [];",
                    "            var colNames = [];",
                    "            /*",
                    "            for(var i=0; i<2; i++) {",
                    "                var name = columnData[i].target;",
                    "                //Ext.getCmp('networkChart').series.getAt(i).setTitle(name.substring(name.substring(0, name.lastIndexOf('.')).lastIndexOf('.'), name.length));",
                    "                Ext.getCmp('networkChart').series.getAt(i).setTitle(name.substring(name.lastIndexOf('.')+1, name.length));",
                    "            }",
                    "            */",
                    "            Ext.each(data.datapoints, function (chartData, dateIdx) {",
                    "                var chartCol = {};",
                    "                var txValue = 0;",
                    "                var rxValue = 0;",
                    "",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "",
                    "                if(data.target.indexOf(\".tx\") > 0) {",
                    "                    txValue += chartData.value;",
                    "                } else {",
                    "                    rxValue += chartData.value;",
                    "                }",
                    "",
                    "                for(var i=1; i<columnData.length; i++) {",
                    "",
                    "",
                    "                    if(columnData[i].target.indexOf(\".tx\") > 0) {",
                    "                        txValue += columnData[i].datapoints[dateIdx].value;",
                    "                    } else {",
                    "                        rxValue += columnData[i].datapoints[dateIdx].value;",
                    "                    }",
                    "",
                    "                    chartCol[\"col_0\"] = txValue;",
                    "                    chartCol[\"col_1\"] = rxValue;",
                    "",
                    "                }",
                    "",
                    "                chartList.push(chartCol);",
                    "",
                    "            });",
                    "",
                    "            Ext.getStore('VmNetworkChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "4ddccfcd-db84-46d4-98d5-b9255bd1ff3b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "nics"
                ],
                "fn": "setInstanceDashboardNics",
                "implHandler": [
                    "",
                    "Ext.getCmp(\"comboNetworkChartNicName\").setValue(\"\");",
                    "Ext.getCmp(\"comboNetworkChartTime\").setValue(\"\");",
                    "",
                    "var store = Ext.create('Ext.data.Store', {",
                    "    fields: ['ethName'],",
                    "    data: nics",
                    "});",
                    "",
                    "Ext.getCmp(\"comboNetworkChartNicName\").bindStore(store);",
                    "Ext.getCmp(\"comboNetworkChartTime\").setValue(\"1\");",
                    "",
                    "if(nics.length > 0)",
                    "    Ext.getCmp(\"comboNetworkChartNicName\").setValue(nics[0].ethName);",
                    ""
                ]
            },
            "designerId": "e8c7c011-4be0-4d28-9408-01e4b4e0a278"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "nicName",
                    "time"
                ],
                "fn": "changeNicNetworkChart",
                "implHandler": [
                    "if(vmConstants.selectRecord.get(\"interim\") == true) {",
                    "    return;",
                    "}",
                    "",
                    "",
                    "Ext.Ajax.request({",
                    "    url : GLOBAL.apiUrlPrefix + 'mon/graphite/interface/' +vmConstants.selectRecord.get(\"id\") + '?nic='+nicName+'&timespan='+time+'&timeunit=minutes',",
                    "    disableCaching : true,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "            var chartList = [];",
                    "",
                    "            var txSum = 0, rxSum = 0, maxTx = 0, maxRx = 0;",
                    "",
                    "            Ext.each(data.datapoints, function (chartData, dateIdx) {",
                    "                var chartCol = {};",
                    "",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "                if(data.target.indexOf(\"tx\") >= 0) {",
                    "                    chartCol.tx_network = chartData.value;",
                    "                } else {",
                    "                    chartCol.rx_network = chartData.value;",
                    "                }",
                    "",
                    "",
                    "                for(var i=1; i<columnData.length; i++) {",
                    "                    if(columnData[i].target.indexOf(\"tx\") >= 0) {",
                    "                        chartCol.tx_network = columnData[i].datapoints[dateIdx].value;",
                    "                    } else {",
                    "                        chartCol.rx_network = columnData[i].datapoints[dateIdx].value;",
                    "                    }",
                    "                }",
                    "",
                    "                if(chartCol.tx_network != null && chartCol.rx_network != null) {",
                    "                    txSum += chartCol.tx_network;",
                    "                    rxSum += chartCol.rx_network;",
                    "",
                    "                    if(maxTx < chartCol.tx_network)",
                    "                        maxTx = chartCol.tx_network;",
                    "",
                    "                    if(maxRx < chartCol.rx_network)",
                    "                        maxRx = chartCol.rx_network;",
                    "",
                    "                    chartList.push(chartCol);",
                    "                }",
                    "            });",
                    "",
                    "            if(time > 1440) {",
                    "                Ext.getCmp(\"interfaceChart\").axes.items[1].label.renderer = Ext.util.Format.dateRenderer('Y-m-d H:i:s');",
                    "            } else {",
                    "                Ext.getCmp(\"interfaceChart\").axes.items[1].label.renderer = Ext.util.Format.dateRenderer('H:i:s');",
                    "            }",
                    "",
                    "            Ext.getStore('VmNicNetworkChartStore').loadData(chartList, false);",
                    "",
                    "            if(chartList.length > 0) {",
                    "                Ext.getCmp(\"inBoundCurrent\").setText((chartList[chartList.length-1].rx_network).toFixed(0) + \" (bps)\");",
                    "                Ext.getCmp(\"outBoundCurrent\").setText((chartList[chartList.length-1].tx_network).toFixed(0) + \" (bps)\");",
                    "                Ext.getCmp(\"inBoundAverage\").setText((rxSum / chartList.length).toFixed(0) + \" (bps)\");",
                    "                Ext.getCmp(\"outBoundAverage\").setText((txSum / chartList.length).toFixed(0) + \" (bps)\");",
                    "                Ext.getCmp(\"inBoundPeak\").setText(maxRx.toFixed(0) + \" (bps)\");",
                    "                Ext.getCmp(\"outBoundPeak\").setText(maxTx.toFixed(0) + \" (bps)\");",
                    "            }",
                    "",
                    "",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "803facc0-3eab-476c-aa6b-1b7a418286a0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "centerContainer",
                "selector": "#centerPanel"
            },
            "designerId": "c7a6a88f-a400-40e5-b341-ceb61d55d4f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setNic",
                "implHandler": [
                    "Ext.getCmp(\"comboNicName\").setValue(\"\");",
                    "Ext.getCmp(\"comboNicName\").up('toolbar').down('button').hide();",
                    "",
                    "Ext.getCmp(\"viewNicForm\").getForm().reset();",
                    "",
                    "var comboStore = Ext.getStore(\"VmNicStore\");",
                    "comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet';",
                    "",
                    "if(vmConstants.initComboNic) {",
                    "    comboStore.removeAll();",
                    "    comboStore.load();",
                    "",
                    "}"
                ]
            },
            "designerId": "aa4189d2-e64d-4f1f-b780-3b1ea3f4ad8b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboNicName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboNicNameChange",
                "implHandler": [
                    "",
                    "if(newValue === '') {",
                    "",
                    "    field.up('toolbar').down('button').hide();",
                    "",
                    "} else {",
                    "",
                    "    this.changeNicData(newValue);",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "95938bac-81e3-4cda-9347-88da5fefa780"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue"
                ],
                "fn": "changeNicData",
                "implHandler": [
                    "var field = Ext.getCmp(\"comboNicName\");",
                    "var form = Ext.getCmp(\"viewNicForm\").getForm();",
                    "form.reset();",
                    "",
                    "",
                    "var store = field.getStore();",
                    "var record = store.findRecord(\"ethName\", newValue);",
                    "",
                    "Ext.getCmp(\"viewNicForm\").getForm().loadRecord(record);",
                    "",
                    "field.up('toolbar').down('button').show();",
                    "",
                    "//VM의 Mgr Address 와 NIC의 IP Address 가 같을 경우 수정 불가능",
                    "if(record.get(\"ipaddr\") == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "    field.up('toolbar').down('button').hide();",
                    "}",
                    "",
                    "var readOnlyFlag = false;",
                    "if(record.get(\"address\") == \"dhcp\") {",
                    "    readOnlyFlag = true;",
                    "}",
                    "",
                    "",
                    "Ext.getCmp(\"checkNicDhcp\").setValue(readOnlyFlag);",
                    "",
                    "if(record.get(\"disable\") == true) {",
                    "    Ext.getCmp(\"checkNicDisable\").setValue(false);",
                    "} else {",
                    "    Ext.getCmp(\"checkNicDisable\").setValue(true);",
                    "}",
                    "",
                    "form.findField(\"address\").setReadOnly(readOnlyFlag);",
                    "form.findField(\"ipv6_address\").setReadOnly(readOnlyFlag);",
                    ""
                ]
            },
            "designerId": "88380668-d759-4ba2-aed1-c04ed6f51958"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNic",
                "implHandler": [
                    "",
                    "var combo = Ext.getCmp(\"comboNicName\"),",
                    "    comboValue = combo.getValue(),",
                    "    store = combo.getStore(),",
                    "    record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "var viewNicForm = Ext.getCmp(\"viewNicForm\");",
                    "var formData = viewNicForm.getForm().getFieldValues();",
                    "",
                    "if(viewNicForm.isValid()) {",
                    "",
                    "    if(record.get(\"ipaddr\") != vmConstants.selectRecord.get(\"mgraddr\") && record.get(\"address\") != vmConstants.selectRecord.get(\"mgraddr\") &&",
                    "        formData.address == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"NIC의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var sendData = {};",
                    "    //sendData.after = viewNicForm.getForm().getFieldValues();",
                    "",
                    "    sendData.after = formData;",
                    "    sendData.after.disable = (!Ext.getCmp(\"checkNicDisable\").getValue());",
                    "",
                    "    sendData.before = {",
                    "        \"address\"\t\t: (record.get(\"address\") == null ? \"\" : record.get(\"address\")),",
                    "       // \"ipaddr\"\t\t: (record.get(\"ipaddr\") == null ? \"\" : record.get(\"ipaddr\")),",
                    "        \"ipv6_address\"\t: (record.get(\"ipv6_address\") == null ? \"\" : record.get(\"ipv6_address\")),",
                    "        \"duplex\"\t\t: (record.get(\"duplex\") == null ? \"\" : record.get(\"duplex\")),",
                    "        \"hw-id\"\t\t\t: (record.get(\"hw-id\") == null ? \"\" : record.get(\"hw-id\")),",
                    "        \"speed\"\t\t\t: (record.get(\"speed\") == null ? \"\" : record.get(\"speed\")),",
                    "        \"mtu\"\t\t\t: (record.get(\"mtu\") == null ? \"\" : record.get(\"mtu\")),",
                    "        \"config\"\t\t: (record.get(\"config\") == null ? \"\" : record.get(\"config\")),",
                    "        \"ethName\"\t\t: (record.get(\"ethName\") == null ? \"\" : record.get(\"ethName\")),",
                    "        \"smp_affinity\"\t: (record.get(\"smp_affinity\") == null ? \"\" : record.get(\"smp_affinity\")),",
                    "        \"disable\"\t\t: (record.get(\"disable\") == null ? \"\" : record.get(\"disable\"))",
                    "    };",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/if/\" + comboValue,",
                    "        method: \"PUT\",",
                    "        headers : {",
                    "            \"Content-Type\" : \"application/json\"",
                    "        },",
                    "        waitMsg: 'Saving Data...',",
                    "        jsonData: sendData,",
                    "        success: function (response) {",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    Ext.Ajax.request({",
                    "                        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/' + comboValue,",
                    "                        waitMsg: 'Loading...',",
                    "                        disableCaching : true,",
                    "                        success: function(response){",
                    "",
                    "                            var columnData = Ext.decode(response.responseText);",
                    "                            if(columnData.length > 0) {",
                    "",
                    "                                record.set(columnData[0]);",
                    "                                vmConstants.me.changeNicData(comboValue);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                });",
                    "",
                    "            }",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "    });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "994ac7a9-5021-4ca1-b3be-517b62c8db47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setBonding",
                "implHandler": [
                    "Ext.getCmp(\"comboBondingName\").setValue(\"\");",
                    "",
                    "Ext.getCmp(\"viewBondingForm\").getForm().reset();",
                    "",
                    "var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "",
                    "if(vmConstants.initComboBonding) {",
                    "    comboStore.removeAll();",
                    "    comboStore.load();",
                    "",
                    "}"
                ]
            },
            "designerId": "2670e131-23d6-4136-b89e-9bd5af7eac5f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue"
                ],
                "fn": "changeBondingData",
                "implHandler": [
                    "",
                    "var field = Ext.getCmp(\"comboBondingName\");",
                    "var form = Ext.getCmp(\"viewBondingForm\");",
                    "form.getForm().reset();",
                    "",
                    "form.down('#saveBtn').show();",
                    "form.down('#deleteBtn').show();",
                    "",
                    "var store = field.getStore();",
                    "var record = store.findRecord(\"ethName\", newValue);",
                    "",
                    "form.getForm().loadRecord(record);",
                    "",
                    "Ext.get(\"viewBondingForm\").select('.saveBtn').show();",
                    "Ext.get(\"viewBondingForm\").select('.deleteBtn').show();",
                    "",
                    "var dhcpFlag = false;",
                    "if(record.get(\"address\") == \"dhcp\") {",
                    "    dhcpFlag = true;",
                    "}",
                    "Ext.getCmp(\"checkBondigDhcp\").setValue(dhcpFlag);",
                    "",
                    "if(record.get(\"disable\") == true) {",
                    "    Ext.getCmp(\"checkBondingDisable\").setValue(false);",
                    "} else {",
                    "    Ext.getCmp(\"checkBondingDisable\").setValue(true);",
                    "}",
                    "",
                    "var nics = record.get(\"ethernets\");",
                    "var disables = record.get(\"disables\");",
                    "",
                    "var checks = form.down('#bondingNICGroup').getBoxes();",
                    "Ext.each(checks, function (checkBox) {",
                    "",
                    "    var disableFlag = false;",
                    "",
                    "    Ext.each(disables, function(disable) {",
                    "        if(checkBox.getName() == disable) {",
                    "            disableFlag = true;",
                    "        }",
                    "    });",
                    "",
                    "    if(checkBox.getName() == \"disableCheck\") {",
                    "        disableFlag = true;",
                    "    }",
                    "",
                    "    checkBox.setDisabled(disableFlag);",
                    "",
                    "    Ext.each(nics, function(nic) {",
                    "        if(checkBox.getName() == nic) {",
                    "            checkBox.setValue(true);",
                    "        }",
                    "    });",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "5de70cb7-2ae7-4832-a407-762ce11983d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmBondingWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "",
                    "var popWindow = Ext.create(\"widget.AddBondingWindow\");",
                    "popWindow.show();"
                ]
            },
            "designerId": "1efbf30a-d9a2-470a-8a28-2fa3305284f4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMBonding",
                "implHandler": [
                    "var addBondingForm = Ext.getCmp(\"addBondingForm\");",
                    "var formData = addBondingForm.getForm().getFieldValues();",
                    "",
                    "if(addBondingForm.isValid()) {",
                    "",
                    "    var checks = addBondingForm.down('#bondingNICGroup').getChecked();",
                    "",
                    "    if(checks.length < 2) {",
                    "        Ext.Msg.alert('Failure', \"NIC는 두개 이상 체크하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.address == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "        Ext.Msg.alert('Failure', \"Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var ethernets = [];",
                    "    Ext.each(checks, function(checkBox){",
                    "        ethernets.push(checkBox.getName());",
                    "    });",
                    "",
                    "    var sendData = {};",
                    "",
                    "    sendData.address = formData.address;",
                    "    sendData.mode = formData.mode;",
                    "    sendData.ethernets = ethernets;",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + formData.bondid,",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addBondingForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.');",
                    "",
                    "                var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "                comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "                comboStore.removeAll();",
                    "                comboStore.load();",
                    "",
                    "                addBondingForm.up('window').close();",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "9637f525-2ff8-4e50-8654-e5c2caef2cb9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMBonding",
                "implHandler": [
                    "",
                    "var combo = Ext.getCmp(\"comboBondingName\"),",
                    "    comboValue = combo.getValue(),",
                    "    store = combo.getStore(),",
                    "    record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "var viewBondingForm = Ext.getCmp(\"viewBondingForm\");",
                    "var formData = viewBondingForm.getForm().getFieldValues();",
                    "",
                    "if(viewBondingForm.isValid()) {",
                    "",
                    "    var checks = viewBondingForm.down('#bondingNICGroup').getChecked();",
                    "",
                    "    if(checks.length < 2) {",
                    "        Ext.Msg.alert('Failure', \"NIC는 두개 이상 체크하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.address == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "        Ext.Msg.alert('Failure', \"Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var ethernets = [];",
                    "    Ext.each(checks, function(checkBox){",
                    "        ethernets.push(checkBox.getName());",
                    "    });",
                    "",
                    "    checks = viewBondingForm.down('#bondingNICGroup').getBoxes();",
                    "    Ext.each(checks, function (checkBox) {",
                    "        delete formData[checkBox.getName()];",
                    "    });",
                    "",
                    "    var sendData = {};",
                    "",
                    "    formData.ethernets = ethernets;",
                    "",
                    "    sendData.after = formData;",
                    "    sendData.after.disable = (!Ext.getCmp(\"checkBondingDisable\").getValue());",
                    "",
                    "    sendData.before = {",
                    "        \"address\"\t\t: (record.get(\"address\") == null ? \"\" : record.get(\"address\")),",
                    "        \"ipv6_address\"\t: (record.get(\"ipv6_address\") == null ? \"\" : record.get(\"ipv6_address\")),",
                    "        \"mode\"\t\t\t: (record.get(\"mode\") == null ? \"\" : record.get(\"mode\")),",
                    "        \"hw-id\"\t\t\t: (record.get(\"hw-id\") == null ? \"\" : record.get(\"hw-id\")),",
                    "        \"mtu\"\t\t\t: (record.get(\"mtu\") == null ? \"\" : record.get(\"mtu\")),",
                    "        \"config\"\t\t: (record.get(\"config\") == null ? \"\" : record.get(\"config\")),",
                    "        \"ethernets\"\t\t: (record.get(\"ethernets\") == null ? \"\" : record.get(\"ethernets\")),",
                    "        \"disable\"\t\t: (record.get(\"disable\") == null ? \"\" : record.get(\"disable\"))",
                    "    };",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + comboValue,",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewBondingForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    Ext.Ajax.request({",
                    "                        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + comboValue,",
                    "                        method: \"GET\",",
                    "                        waitMsg: 'Loading...',",
                    "                        disableCaching : true,",
                    "                        success: function(response){",
                    "",
                    "                            var columnData = Ext.decode(response.responseText);",
                    "",
                    "                            if(columnData != null) {",
                    "",
                    "                                var data = columnData[comboValue];",
                    "                                data.ethernets = columnData.ethernets;",
                    "                                data.disables = columnData.disables;",
                    "",
                    "                                record.set(data);",
                    "",
                    "                                vmConstants.me.changeBondingData(comboValue);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                });",
                    "",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}"
                ]
            },
            "designerId": "05b5963b-b762-480b-9ccc-2be17d6ea033"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMBonding",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Bonding 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var combo = Ext.getCmp(\"comboBondingName\"),",
                    "            comboValue = combo.getValue(),",
                    "            store = combo.getStore(),",
                    "            record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "        var viewBondingForm = Ext.getCmp(\"viewBondingForm\");",
                    "",
                    "        if(viewBondingForm.isValid()) {",
                    "",
                    "            var sendData = {",
                    "                \"address\"\t\t: record.get(\"address\"),",
                    "                \"mode\"\t\t\t: record.get(\"mode\"),",
                    "                \"ethernets\"\t\t: record.get(\"ethernets\")",
                    "            };",
                    "",
                    "",
                    "            Ext.Ajax.request({",
                    "                 url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + record.get(\"ethName\"),",
                    "                 method: \"DELETE\",",
                    "                 headers : {",
                    "                     \"Content-Type\" : \"application/json\"",
                    "                 },",
                    "                 waitMsg: 'Delete Data...',",
                    "                 waitMsgTarget : viewBondingForm.getEl(),",
                    "                 jsonData: sendData,",
                    "                 success: function (response) {",
                    "",
                    "                     if(response.status == 200) {",
                    "",
                    "                        Ext.Msg.alert('Success', '삭제가 완료되었습니다.');",
                    "",
                    "                        var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "                        comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "                        comboStore.remove(record);",
                    "",
                    "                        Ext.getCmp(\"comboBondingName\").setValue(\"\");",
                    "",
                    "",
                    "                     }",
                    "",
                    "                },",
                    "                failure: function (response) {",
                    "                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "                }",
                    "             });",
                    "",
                    "        }",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "4c6694d0-86ea-4912-bb0b-67ada2c198d9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRouting",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewRoutingStaticForm\");",
                    "",
                    "Ext.getCmp(\"comboRoutingType\").setValue(\"\");",
                    "Ext.getCmp(\"comboRoutingType\").setValue(\"static\");",
                    "",
                    "form.getForm().reset();",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"routing_next_hop2\")], form.up('panel').getEl());"
                ]
            },
            "designerId": "d934364f-bc0a-4145-b069-b5066f749bf2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue"
                ],
                "fn": "changeRoutingMethod",
                "implHandler": [
                    "",
                    "if(comboValue == \"static\") {",
                    "",
                    "    Ext.getCmp(\"comboRoutingType\").up('panel').layout.setActiveItem(0);",
                    "    Ext.getCmp(\"comboRoutingType\").up('toolbar').down('#addBtn').show();",
                    "",
                    "    Ext.getCmp(\"viewRoutingStaticForm\").down('#formSet').hide();",
                    "",
                    "    this.setRoutingStaticData();",
                    "",
                    "} else {",
                    "",
                    "    Ext.getCmp(\"comboRoutingType\").up('toolbar').down('#addBtn').hide();",
                    "",
                    "    Ext.getCmp(\"comboRoutingType\").up('panel').layout.setActiveItem(1);",
                    "",
                    "    this.setRoutingOspfData();",
                    "}"
                ]
            },
            "designerId": "49b86b4a-7e4a-4861-938c-0f21fc803340"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRoutingStaticData",
                "implHandler": [
                    "",
                    "Ext.getStore(\"VmRoutingStaticStore\").removeAll();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/routing/static',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : Ext.getCmp(\"viewRoutingStaticForm\").up('panel').getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var data = Ext.decode(response.responseText);",
                    "            var gridData = [];",
                    "            var nodeData;",
                    "",
                    "            if(data[\"route\"]) {",
                    "",
                    "                Ext.each(data[\"route\"], function(node) {",
                    "",
                    "                    gridData.push(setNodeData(node, \"route\", \"N/A\"));",
                    "                });",
                    "",
                    "            }",
                    "",
                    "            if(data[\"interface-route\"]) {",
                    "",
                    "                Ext.each(data[\"interface-route\"], function(node) {",
                    "",
                    "                    gridData.push(setNodeData(node, \"interface-route\", \"N/A\"));",
                    "                });",
                    "",
                    "            }",
                    "",
                    "            if(data[\"table\"]) {",
                    "",
                    "                Ext.each(data[\"table\"], function(table) {",
                    "",
                    "                    if(table[\"route\"]) {",
                    "",
                    "                        Ext.each(table[\"route\"], function(node) {",
                    "",
                    "                            gridData.push(setNodeData(node, \"route\", table[\"key_name\"]));",
                    "                        });",
                    "",
                    "                    }",
                    "",
                    "                    if(table[\"interface-route\"]) {",
                    "",
                    "                        Ext.each(table[\"interface-route\"], function(node) {",
                    "",
                    "                            gridData.push(setNodeData(node, \"interface-route\", table[\"key_name\"]));",
                    "                        });",
                    "",
                    "                    }",
                    "",
                    "                });",
                    "",
                    "            }",
                    "",
                    "",
                    "            Ext.getStore(\"VmRoutingStaticStore\").loadData(gridData, false);",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "",
                    "",
                    "function setNodeData(node, type, table) {",
                    "",
                    "    var nodeData = {",
                    "        \"routing_subnet\":\t\tnode[\"key_name\"],",
                    "        \"routing_type\":\t\t\ttype,",
                    "        \"routing_table\":\t\ttable,",
                    "        \"routing_disable\":\t\tfalse,",
                    "        \"routing_blackhole\":\tfalse",
                    "    };",
                    "",
                    "    if(node[\"next-hop\"]) {",
                    "",
                    "        nodeData.routing_next_hop = node[\"next-hop\"][0][\"key_name\"];",
                    "        nodeData.routing_distance = node[\"next-hop\"][0][\"distance\"];",
                    "        if(node[\"next-hop\"][0][\"disable\"]) {",
                    "            nodeData.routing_disable  = node[\"next-hop\"][0][\"disable\"];",
                    "        }",
                    "",
                    "    }",
                    "",
                    "    if(node[\"next-hop-interface\"]) {",
                    "",
                    "        nodeData.routing_next_hop = node[\"next-hop-interface\"][0][\"key_name\"];",
                    "        nodeData.routing_distance = node[\"next-hop-interface\"][0][\"distance\"];",
                    "        if(node[\"next-hop-interface\"][0][\"disable\"]) {",
                    "            nodeData.routing_disable  = node[\"next-hop-interface\"][0][\"disable\"];",
                    "        }",
                    "",
                    "    }",
                    "",
                    "    if(node[\"blackhole\"]) {",
                    "",
                    "        nodeData.routing_blackhole = true;",
                    "        nodeData.routing_distance = node[\"blackhole\"][\"distance\"];",
                    "    }",
                    "",
                    "    return nodeData;",
                    "",
                    "",
                    "}"
                ]
            },
            "designerId": "5e2963f1-ffbf-43de-8b58-46b5fa509a64"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRoutingOspfData",
                "implHandler": [
                    "var viewRoutingOspfForm = Ext.getCmp(\"viewRoutingOspfForm\");",
                    "",
                    "Ext.getStore(\"VmRoutingOspfStore\").removeAll();",
                    "Ext.getStore(\"VmRoutingAccessStore\").removeAll();",
                    "Ext.getStore(\"VmRoutingRediStore\").removeAll();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/routing/ospf',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : viewRoutingOspfForm.up('panel').getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var data = Ext.decode(response.responseText);",
                    "",
                    "            vmConstants.vmRoutingRecord = data;",
                    "",
                    "            viewRoutingOspfForm.getForm().setValues(data);",
                    "",
                    "            if(data[\"redist-list\"]) {",
                    "                Ext.getStore(\"VmRoutingRediStore\").loadData(data[\"redist-list\"], false);",
                    "            }",
                    "",
                    "            if(data[\"access-list\"]) {",
                    "                Ext.getStore(\"VmRoutingAccessStore\").loadData(data[\"access-list\"], false);",
                    "            }",
                    "",
                    "            if(data[\"areas\"]) {",
                    "                Ext.getStore(\"VmRoutingOspfStore\").loadData(data[\"areas\"], false);",
                    "            }",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "80a85f87-f06e-4b23-b321-12db55e6306d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "method"
                ],
                "fn": "popVmRoutingWindow",
                "implHandler": [
                    "    //VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddRoutingWindow\");",
                    "popWindow.show();",
                    "",
                    "var form = Ext.getCmp(\"addRoutingStaticForm\");",
                    "",
                    "form.getForm().findField(\"routing_type\").setValue(\"route\");",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"routing_next_hop2\")], form.getEl());"
                ]
            },
            "designerId": "21e331c6-848e-4619-be2a-b50a7532e312"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createVmRouting",
                "implHandler": [
                    "var addRoutingStaticForm = Ext.getCmp(\"addRoutingStaticForm\");",
                    "var formData = addRoutingStaticForm.getForm().getFieldValues();",
                    "",
                    "if(addRoutingStaticForm.isValid()) {",
                    "",
                    "    if(formData.routing_type == \"route\") {",
                    "        formData.routing_next_hop = formData.routing_next_hop1;",
                    "    } else {",
                    "        formData.routing_next_hop = formData.routing_next_hop2;",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/static\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addRoutingStaticForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addRoutingStaticForm.up('window').close();",
                    "",
                    "                    vmConstants.me.setRoutingStaticData();",
                    "                    Ext.getCmp(\"viewRoutingStaticForm\").down('#formSet').hide();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "5f9ebf8e-314f-4a9f-aa4b-87e42e22c366"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveVmRoutingStatic",
                "implHandler": [
                    "var viewRoutingStaticForm = Ext.getCmp(\"viewRoutingStaticForm\");",
                    "var formData = viewRoutingStaticForm.getForm().getFieldValues();",
                    "",
                    "if(viewRoutingStaticForm.isValid()) {",
                    "",
                    "    if(formData.routing_type == \"route\") {",
                    "        formData.routing_next_hop = formData.routing_next_hop1;",
                    "    } else {",
                    "        formData.routing_next_hop = formData.routing_next_hop2;",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/static\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewRoutingStaticForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    vmConstants.me.setRoutingStaticData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "a7e81355-cc92-4022-bc1d-7139a1b1a6cf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "deleteVmRoutingStatic",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Routing 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var routingForm = Ext.getCmp(\"viewRoutingStaticForm\");",
                    "        var is_last_in_table = false;",
                    "",
                    "        if(record.get(\"routing_table\") != \"N/A\") {",
                    "",
                    "            var tableCnt = 0;",
                    "            Ext.getStore(\"VmRoutingStaticStore\").each(function(rec) {",
                    "                if(record.get(\"routing_table\") == rec.get(\"routing_table\")) {",
                    "                    tableCnt++;",
                    "                }",
                    "            });",
                    "",
                    "            if(tableCnt <= 1) {",
                    "                is_last_in_table = true;",
                    "            }",
                    "        }",
                    "",
                    "        var sendData = {",
                    "            \"routing_subnet\"\t\t: record.get(\"routing_subnet\"),",
                    "            \"routing_type\"\t\t\t: record.get(\"routing_type\"),",
                    "            \"routing_table\"\t\t\t: (record.get(\"routing_table\") == \"N/A\" ? \"\" : record.get(\"routing_table\")),",
                    "            \"is_last_in_table\"\t\t: is_last_in_table",
                    "        };",
                    "",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/static\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : routingForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        vmConstants.me.setRoutingStaticData();",
                    "                        Ext.getCmp(\"viewRoutingStaticForm\").down('#formSet').hide();",
                    "    ",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "2f6a14ca-341f-4007-8341-4176c5c6869d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popupVmRoutingOspfWindow",
                "implHandler": [
                    "var popWindow = Ext.create(\"widget.AddRoutingOspfWindow\");",
                    "popWindow.show();",
                    ""
                ]
            },
            "designerId": "16cf7444-f354-4922-a36f-3887bc4ddb4c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popupVmRoutingAccessWindow",
                "implHandler": [
                    "var popWindow = Ext.create(\"widget.AddRoutingAccessWindow\");",
                    "popWindow.show();",
                    ""
                ]
            },
            "designerId": "f94c87d2-96de-4878-b3d5-841921ee738f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popupVmRoutingRediWindow",
                "implHandler": [
                    "var popWindow = Ext.create(\"widget.AddRoutingRediWindow\");",
                    "popWindow.show();",
                    ""
                ]
            },
            "designerId": "98dbc50f-7133-4429-8c1f-64e6d0003f08"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveVmRoutingOspf",
                "implHandler": [
                    "var viewRoutingOspfForm = Ext.getCmp(\"viewRoutingOspfForm\");",
                    "var formData = viewRoutingOspfForm.getForm().getFieldValues();",
                    "",
                    "if(viewRoutingOspfForm.isValid()) {",
                    "",
                    "    var sendData = {};",
                    "",
                    "    formData[\"auto-cost_reference-bandwidth\"] = formData[\"auto-cost_reference-bandwidth\"].toString();",
                    "    formData[\"default-metric\"] = formData[\"default-metric\"].toString();",
                    "",
                    "    sendData.after = formData;",
                    "",
                    "    var beforeData = vmConstants.vmRoutingRecord;",
                    "    sendData.before =  {",
                    "        \"parameters_router-id\"\t\t\t: (beforeData[\"parameters_router-id\"] == null ? \"\" : beforeData[\"parameters_router-id\"]) ,",
                    "        \"auto-cost_reference-bandwidth\"\t: (beforeData[\"auto-cost_reference-bandwidth\"] == null ? \"\" : beforeData[\"auto-cost_reference-bandwidth\"]),",
                    "        \"default-metric\"\t\t\t\t: (beforeData[\"default-metric\"] == null ? \"\" : beforeData[\"default-metric\"])",
                    "    };",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewRoutingOspfForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    vmConstants.me.setRoutingOspfData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "0ed69b86-e6ba-409b-bd7d-882bed31b9e3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createVmRoutingOspf",
                "implHandler": [
                    "var addRoutingOspfForm = Ext.getCmp(\"addRoutingOspfForm\");",
                    "var formData = addRoutingOspfForm.getForm().getFieldValues();",
                    "",
                    "if(addRoutingOspfForm.isValid()) {",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/area\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addRoutingOspfForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addRoutingOspfForm.up('window').close();",
                    "",
                    "                    vmConstants.me.setRoutingOspfData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "da4da04a-4066-44fc-9637-9f6c4f767d24"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createVmRoutingAccess",
                "implHandler": [
                    "var addRoutingAccessForm = Ext.getCmp(\"addRoutingAccessForm\");",
                    "var formData = addRoutingAccessForm.getForm().getFieldValues();",
                    "",
                    "if(addRoutingAccessForm.isValid()) {",
                    "",
                    "    formData[\"access-list\"] = formData[\"access-list\"].toString();",
                    "    ",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/access\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addRoutingAccessForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addRoutingAccessForm.up('window').close();",
                    "",
                    "                    vmConstants.me.setRoutingOspfData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "3f7dc7fb-8c09-4fe2-9a3a-ca0ec310e7b1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createVmRoutingRedi",
                "implHandler": [
                    "var addRoutingRediForm = Ext.getCmp(\"addRoutingRediForm\");",
                    "var formData = addRoutingRediForm.getForm().getFieldValues();",
                    "",
                    "if(addRoutingRediForm.isValid()) {",
                    "",
                    "    formData[\"metric\"] = formData[\"metric\"].toString();",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/redist\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addRoutingRediForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addRoutingRediForm.up('window').close();",
                    "",
                    "                    vmConstants.me.setRoutingOspfData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "bffb37fc-9ef5-4f8d-891b-3d498295c18d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "deleteVmRoutingOspf",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Routing Area 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var routingForm = Ext.getCmp(\"viewRoutingOspfForm\");",
                    "",
                    "        var sendData = {",
                    "            \"area\"\t\t: record.get(\"area\"),",
                    "            \"network\"\t: record.get(\"network\")",
                    "        };",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/area\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : routingForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        vmConstants.me.setRoutingOspfData();",
                    "    ",
                    "                    });",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "d3053583-48f1-4267-955d-80df71899d35"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "deleteVmRoutingAccess",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Routing Access 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var routingForm = Ext.getCmp(\"viewRoutingOspfForm\");",
                    "",
                    "        var sendData = {",
                    "            \"access-list\"\t: record.get(\"access-list\"),",
                    "            \"export\"\t\t: record.get(\"export\")",
                    "        };",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/access\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : routingForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        vmConstants.me.setRoutingOspfData();",
                    "",
                    "                    });",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "bfc98118-1b89-46a4-9d2b-f5efee25851e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "deleteVmRoutingRedi",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Routing Access 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var routingForm = Ext.getCmp(\"viewRoutingOspfForm\");",
                    "",
                    "        var sendData = {",
                    "            \"protocol\"\t: record.get(\"protocol\")",
                    "        };",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/routing/ospf/redist\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : routingForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        vmConstants.me.setRoutingOspfData();",
                    "",
                    "                    });",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "b7e9a336-65db-4d02-bb00-0a3674ebe509"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "msgTarget"
                ],
                "fn": "renderNicCheckbox",
                "implHandler": [
                    "component.removeAll();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : msgTarget,",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var data = Ext.decode(response.responseText);",
                    "            var i_max = data.length;",
                    "            var newCheckboxes = new Array();",
                    "            for( i = 0; i < i_max; i++ ) {",
                    "",
                    "                var disabledFlag = true;",
                    "                if(data[i][\"bond-group\"] == null || data[i][\"bond-group\"].length == 0) {",
                    "                    disabledFlag = false;",
                    "                }",
                    "",
                    "                if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "                    disabledFlag = true;",
                    "                }",
                    "                ",
                    "                if(data[i].disable == true) {",
                    "                    disabledFlag = true;",
                    "                }",
                    "",
                    "                component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: data[i].ethName, inputValue: data[i].ethName, disabled:disabledFlag }));",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "a6be4e96-6a36-4bb2-bc64-4d5fca96b6e4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboBondingName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboBondingNameChange",
                "implHandler": [
                    "",
                    "if(newValue !== '') {",
                    "",
                    "    this.changeBondingData(newValue);",
                    "",
                    "} else {",
                    "",
                    "    var form = Ext.getCmp(\"viewBondingForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "690e72fe-a5ef-49c9-ba23-7378a3d45390"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "msgTarget"
                ],
                "fn": "activeNicCheckbox",
                "implHandler": [
                    "component.removeAll();",
                    "",
                    "if(vmConstants.vmNicRecords == null) {",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet',",
                    "        disableCaching : true,",
                    "        waitMsg: 'Loading...',",
                    "        waitMsgTarget : msgTarget,",
                    "        success: function(response){",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                var data = Ext.decode(response.responseText);",
                    "",
                    "                vmConstants.vmNicRecords = data;",
                    "",
                    "                var i_max = data.length;",
                    "                var newCheckboxes = new Array();",
                    "                for( i = 0; i < i_max; i++ ) {",
                    "",
                    "                    var disabledFlag = false;",
                    "                    var fieldName = data[i].ethName;",
                    "                    if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "                        disabledFlag = true;",
                    "                        fieldName = \"disableCheck\";",
                    "                    }",
                    "                    if(data[i].disable == true) {",
                    "                        disabledFlag = true;",
                    "                        fieldName = \"disableCheck\";",
                    "                    }",
                    "                    component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));",
                    "                }",
                    "            }",
                    "",
                    "        }",
                    "    });",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var data = vmConstants.vmNicRecords;",
                    "",
                    "    var i_max = data.length;",
                    "    var newCheckboxes = new Array();",
                    "    for( i = 0; i < i_max; i++ ) {",
                    "",
                    "        var disabledFlag = false;",
                    "        var fieldName = data[i].ethName;",
                    "        if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "            disabledFlag = true;",
                    "            fieldName = \"disableCheck\";",
                    "        }",
                    "        if(data[i].disable == true) {",
                    "            disabledFlag = true;",
                    "            fieldName = \"disableCheck\";",
                    "        }",
                    "",
                    "        component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));",
                    "    }",
                    "}",
                    ""
                ]
            },
            "designerId": "2e925cee-dadd-419c-93d6-f46d02feb686"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setNat",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "form.getForm().reset();",
                    "",
                    "if(vmConstants.vmNatRecords == null) {",
                    "",
                    "    this.setVmNatRecords();",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmNatRecords;",
                    "",
                    "    var recordData = [];",
                    "    Ext.each(datas, function (record){",
                    "",
                    "        var addFlag = true;",
                    "",
                    "        Ext.each(recordData, function(rData) {",
                    "",
                    "            if(record.rule === rData.rule) {",
                    "",
                    "                rData.ruleTypes.push(record.isSource);",
                    "",
                    "                addFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(addFlag) {",
                    "",
                    "            record.ruleTypes = [];",
                    "            record.ruleTypes.push(record.isSource);",
                    "            recordData.push(record);",
                    "",
                    "        }",
                    "",
                    "    });",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmNatModel',",
                    "        data: recordData",
                    "    });",
                    "",
                    "    Ext.getCmp(\"comboRuleName\").bindStore(store);",
                    "",
                    "}",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"ibnic\"), form.getForm().findField(\"obnic\")], form.getEl());"
                ]
            },
            "designerId": "c6f607d1-443c-4a5f-b2d0-d6bbbdcb503d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "radioValue"
                ],
                "fn": "setVmNatRecords",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/nat',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            vmConstants.vmNatRecords = datas;",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (record){",
                    "",
                    "                var addFlag = true;",
                    "",
                    "                Ext.each(recordData, function(rData) {",
                    "",
                    "                    if(record.rule === rData.rule) {",
                    "",
                    "                        rData.ruleTypes.push(record.isSource);",
                    "",
                    "                        addFlag = false;",
                    "                        return false;",
                    "                    }",
                    "                });",
                    "",
                    "                if(addFlag) {",
                    "",
                    "                    record.ruleTypes = [];",
                    "                    record.ruleTypes.push(record.isSource);",
                    "                    recordData.push(record);",
                    "",
                    "                }",
                    "",
                    "            });",
                    "",
                    "            store = Ext.create('Ext.data.Store', {",
                    "                model: 'spider.model.VmNatModel',",
                    "                data: recordData",
                    "            });",
                    "",
                    "            Ext.getCmp(\"comboRuleName\").bindStore(store);",
                    "",
                    "            if(comboValue != null) {",
                    "",
                    "                vmConstants.me.changeNatData(comboValue, radioValue);",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "334dc976-5fe4-4500-8f98-745283d8882b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "radioValue"
                ],
                "fn": "changeNatData",
                "implHandler": [
                    "var data;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "if(comboValue == null || comboValue == \"\") {",
                    "    return;",
                    "}",
                    "",
                    "if(radioValue == null) {",
                    "",
                    "    var isSource = false;",
                    "    var isDestination = false;",
                    "    Ext.each(vmConstants.vmNatRecords, function(record) {",
                    "        if(record.rule === comboValue) {",
                    "",
                    "            if(record.isSource) {",
                    "                isSource = true;",
                    "",
                    "                data = record;",
                    "",
                    "            } else {",
                    "                isDestination = true;",
                    "",
                    "                if(isSource == false) {",
                    "                    data = record;",
                    "                }",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    Ext.getCmp(\"natRuleSource\").setDisabled(!isSource);",
                    "    Ext.getCmp(\"natRuleDestination\").setDisabled(!isDestination);",
                    "",
                    "    if(isSource) {",
                    "        Ext.getCmp(\"natRuleSource\").setValue(true);",
                    "",
                    "    } else {",
                    "        Ext.getCmp(\"natRuleDestination\").setValue(true);",
                    "",
                    "    }",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var isSource = (radioValue == \"source\" ? true : false);",
                    "    Ext.each(vmConstants.vmNatRecords, function(record) {",
                    "",
                    "        if(record.rule === comboValue && record.isSource === isSource) {",
                    "            data = record;",
                    "        }",
                    "    });",
                    "",
                    "    form.getForm().reset();",
                    "",
                    "}",
                    "",
                    "form.getForm().setValues(data);",
                    "",
                    "form.getForm().findField(\"rulenum\").setValue(data.rule);",
                    "",
                    "if(data.isSource) {",
                    "",
                    "    form.getForm().findField(\"ruletype\").setValue(\"source\");",
                    "    form.getForm().findField(\"ibnic\").setDisabled(true);",
                    "    form.getForm().findField(\"obnic\").setDisabled(false);",
                    "",
                    "} else {",
                    "",
                    "    form.getForm().findField(\"ruletype\").setValue(\"destination\");",
                    "    form.getForm().findField(\"ibnic\").setDisabled(false);",
                    "    form.getForm().findField(\"obnic\").setDisabled(true);",
                    "",
                    "}",
                    "",
                    "form.getForm().findField(\"ibnic\").setValue(data[\"inbound-interface\"]);",
                    "form.getForm().findField(\"obnic\").setValue(data[\"outbound-interface\"]);",
                    "",
                    "if(data.source != null) {",
                    "    form.getForm().findField(\"srcaddr\").setValue(data.source.address);",
                    "    form.getForm().findField(\"srcport\").setValue(data.source.port);",
                    "}",
                    "",
                    "if(data.destination != null) {",
                    "    form.getForm().findField(\"destaddr\").setValue(data.destination.address);",
                    "    form.getForm().findField(\"destport\").setValue(data.destination.port);",
                    "}",
                    "",
                    "if(data.translation != null) {",
                    "",
                    "    if(data.translation.address == \"masquerade\") {",
                    "        form.getForm().findField(\"masquerade\").setValue(true);",
                    "    } else {",
                    "        form.getForm().findField(\"transaddr\").setValue(data.translation.address);",
                    "        form.getForm().findField(\"transport\").setValue(data.translation.port);",
                    "    }",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "aff9685f-3150-4feb-a942-6d54db9a8b9b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "components",
                    "msgTarget",
                    "blankText"
                ],
                "fn": "renderNicComboBox",
                "implHandler": [
                    "",
                    "var store;",
                    "",
                    "if(vmConstants.vmIfAllRecords == null) {",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all',",
                    "        disableCaching : true,",
                    "        waitMsg: 'Loading...',",
                    "        waitMsgTarget : msgTarget,",
                    "        success: function(response){",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                var datas = Ext.decode(response.responseText);",
                    "",
                    "                vmConstants.vmIfAllRecords = datas;",
                    "",
                    "                store = Ext.create('Ext.data.Store', {",
                    "                    model: 'spider.model.VmNicModel',",
                    "                    data: datas",
                    "                });",
                    "",
                    "                Ext.each(components, function(component) {",
                    "",
                    "                    component.bindStore(store);",
                    "                    if(blankText) {",
                    "                        store.insert(0, {ethName : blankText});",
                    "                        component.setValue(blankText);",
                    "                    }",
                    "",
                    "                });",
                    "            }",
                    "",
                    "        }",
                    "    });",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmIfAllRecords;",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmNicModel',",
                    "        data: datas",
                    "    });",
                    "",
                    "    Ext.each(components, function(component) {",
                    "",
                    "        component.bindStore(store);",
                    "        if(blankText) {",
                    "            store.insert(0, {ethName : blankText});",
                    "            component.setValue(blankText);",
                    "        }",
                    "    });",
                    "}",
                    ""
                ]
            },
            "designerId": "035b8573-446f-4229-b744-6dff74471b27"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmNatWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddNatWindow\");",
                    "popWindow.show();",
                    "",
                    "Ext.getCmp(\"addNatForm\").getForm().findField(\"ruletype\").setValue(\"source\");"
                ]
            },
            "designerId": "bc0d373d-41ca-46d8-af9f-4131671eda22"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMNat",
                "implHandler": [
                    "var addNatForm = Ext.getCmp(\"addNatForm\");",
                    "var formData = addNatForm.getForm().getFieldValues();",
                    "",
                    "if(addNatForm.isValid()) {",
                    "",
                    "    if(formData.masquerade == false) {",
                    "        formData.masquerade = \"\";",
                    "    }",
                    "",
                    "    if(formData.disable == false) {",
                    "        formData.disable = \"\";",
                    "    }",
                    "",
                    "    if(formData.exclude == false) {",
                    "        formData.exclude = \"\";",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addNatForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addNatForm.up('window').close();",
                    "",
                    "                    Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "                    vmConstants.me.setVmNatRecords();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "069d2f00-14a6-4c1c-8f85-7208091dbc8e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboRoutingType",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboRoutingTypeChange",
                "implHandler": [
                    "if(newValue != \"\") {",
                    "    this.changeRoutingMethod(newValue);",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "624e4e19-88bb-47d9-9a7a-fb232f26a137"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboRuleName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboRuleNameChange",
                "implHandler": [
                    "",
                    "if(newValue !== '') {",
                    "",
                    "    var form = Ext.getCmp(\"viewNatForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').show();",
                    "    form.down('#deleteBtn').show();",
                    "",
                    "    this.changeNatData(newValue);",
                    "",
                    "} else {",
                    "",
                    "    var form = Ext.getCmp(\"viewNatForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "2153ecc4-94ce-4e5e-830b-020470fb6d8b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMNat",
                "implHandler": [
                    "var viewNatForm = Ext.getCmp(\"viewNatForm\");",
                    "var formData = viewNatForm.getForm().getFieldValues();",
                    "",
                    "if(viewNatForm.isValid()) {",
                    "",
                    "    if(formData.masquerade == false) {",
                    "        formData.masquerade = \"\";",
                    "    }",
                    "",
                    "    if(formData.disable == false) {",
                    "        formData.disable = \"\";",
                    "    }",
                    "",
                    "    if(formData.exclude == false) {",
                    "        formData.exclude = \"\";",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewNatForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    viewNatForm.getForm().reset();",
                    "                    vmConstants.me.setVmNatRecords(formData.rulenum, formData.ruletype);",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "669c9dcd-5300-4ac9-bd9e-920ac6519770"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMNat",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 NAT 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var viewNatForm = Ext.getCmp(\"viewNatForm\");",
                    "        var formData = viewNatForm.getForm().getFieldValues();",
                    "",
                    "        var sendData = {",
                    "            \"rulenum\"\t\t: formData.rulenum,",
                    "            \"ruletype\"\t\t: formData.ruletype",
                    "        };",
                    "",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : viewNatForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "                        viewNatForm.getForm().reset();",
                    "                        vmConstants.me.setVmNatRecords();",
                    "",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "61f358ab-b5c2-4cb3-878d-40e5c021c775"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDhcp",
                "implHandler": [
                    "",
                    "Ext.getCmp(\"viewDhcpForm\").getForm().reset();",
                    "Ext.getCmp(\"comboDhcpNetworkName\").setValue(\"\");",
                    "",
                    "this.setDhcpNetworkData();"
                ]
            },
            "designerId": "e97f968c-8806-47df-917e-8f3f0c931380"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue"
                ],
                "fn": "setDhcpNetworkData",
                "implHandler": [
                    "var store;",
                    "var grobalForm = Ext.getCmp(\"viewDhcpForm\");",
                    "var networkForm = Ext.getCmp(\"viewDhcpNetworkForm\");",
                    "",
                    "grobalForm.getForm().reset();",
                    "networkForm.getForm().reset();",
                    "",
                    "Ext.getStore(\"VmDhcpMappingStore\").removeAll();",
                    "",
                    "grobalForm.down('#saveBtn').hide();",
                    "networkForm.down('#saveBtn').hide();",
                    "networkForm.down('#deleteBtn').hide();",
                    "networkForm.down('#addBtn').hide();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/dhcp',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    timeout : 3*60*1000,",
                    "    waitMsgTarget : grobalForm.up('panel').getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var data = Ext.decode(response.responseText);",
                    "",
                    "            if(data[\"shared-network-name\"] != null) {",
                    "",
                    "                grobalForm.down('#saveBtn').show();",
                    "",
                    "                grobalForm.getForm().setValues(data);",
                    "",
                    "                if(data[\"dynamic-dns-update\"] != null) {",
                    "                    grobalForm.getForm().findField(\"dynamic_dns_update\").setValue(data[\"dynamic-dns-update\"][\"enable\"]);",
                    "                }",
                    "",
                    "                if(data[\"global-parameters\"] != null) {",
                    "                    grobalForm.getForm().findField(\"parameters\").setValue(data[\"global-parameters\"].replace(/(?:\\r,|\\r|,)/g, '\\n'));",
                    "                }",
                    "",
                    "                var recordData = data[\"shared-network-name\"];",
                    "",
                    "                store = Ext.create('Ext.data.Store', {",
                    "                    model: 'spider.model.VmDhcpModel',",
                    "                    data: recordData",
                    "                });",
                    "",
                    "                Ext.getCmp(\"comboDhcpNetworkName\").bindStore(store);",
                    "",
                    "                if(comboValue != null) {",
                    "",
                    "                    vmConstants.me.changeDhcpNetworkData(comboValue);",
                    "                }",
                    "",
                    "            } else {",
                    "",
                    "                store = Ext.create('Ext.data.Store', {",
                    "                    model: 'spider.model.VmDhcpModel',",
                    "                    data: []",
                    "                });",
                    "",
                    "                Ext.getCmp(\"comboDhcpNetworkName\").bindStore(store);",
                    "            }",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "fccc7037-0f2c-460e-85e9-1b9ffcaf4359"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue"
                ],
                "fn": "changeDhcpNetworkData",
                "implHandler": [
                    "var field = Ext.getCmp(\"comboDhcpNetworkName\"),",
                    "    store = field.getStore(),",
                    "    record = store.findRecord(\"key_name\", comboValue);",
                    "",
                    "var formCmp = Ext.getCmp(\"viewDhcpNetworkForm\"),",
                    "    form = formCmp.getForm();",
                    "",
                    "form.reset();",
                    "",
                    "formCmp.down('#saveBtn').show();",
                    "formCmp.down('#deleteBtn').show();",
                    "formCmp.down('#addBtn').show();",
                    "",
                    "formCmp.down('fieldset').setTitle(comboValue);",
                    "",
                    "form.findField(\"disable\").setValue(record.get(\"disable\"));",
                    "",
                    "if(record.get(\"authoritative\") != null && record.get(\"authoritative\") == \"enable\") {",
                    "    form.findField(\"authoritative\").setValue(true);",
                    "}",
                    "",
                    "form.findField(\"shared_network_name\").setValue(record.get(\"key_name\"));",
                    "",
                    "if(record.get(\"subnet\") != null && record.get(\"subnet\").length > 0) {",
                    "    var subnet = record.get(\"subnet\")[0];",
                    "",
                    "    form.findField(\"subnet_ipv4net\").setValue(subnet.key_name);",
                    "",
                    "    if(subnet.start != null) {",
                    "",
                    "        form.findField(\"start_ip\").setValue(subnet.start[0].key_name);",
                    "        form.findField(\"stop_ip\").setValue(subnet.start[0].stop);",
                    "    }",
                    "",
                    "    form.findField(\"default_router\").setValue(subnet[\"default-router\"]);",
                    "    form.findField(\"dns_server\").setValue(subnet[\"dns-server\"]);",
                    "    form.findField(\"domain_name\").setValue(subnet[\"domain-name\"]);",
                    "",
                    "    if(subnet[\"static-mapping\"] != null){",
                    "",
                    "        var gridData = [];",
                    "",
                    "        Ext.each(subnet[\"static-mapping\"], function(mapping){",
                    "            gridData.push({",
                    "                map_name : mapping.key_name,",
                    "                map_ip : mapping[\"ip-address\"],",
                    "                map_mac : mapping[\"mac-address\"]",
                    "            });",
                    "",
                    "        });",
                    "",
                    "        Ext.getStore(\"VmDhcpMappingStore\").loadData(gridData, false);",
                    "",
                    "    }",
                    "",
                    "",
                    "}"
                ]
            },
            "designerId": "fcd9fb59-45ca-459f-8452-e93fef6b1c06"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmDhcpWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddDhcpWindow\");",
                    "popWindow.show();",
                    "",
                    "Ext.getStore(\"addDhcpMappingStore\").removeAll();",
                    ""
                ]
            },
            "designerId": "ba2efc06-5032-4b1e-a84e-ff8a45f77c7d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMDhcp",
                "implHandler": [
                    "var addDhcpForm = Ext.getCmp(\"addDhcpForm\");",
                    "var formData = addDhcpForm.getForm().getFieldValues();",
                    "",
                    "if(addDhcpForm.isValid()) {",
                    "",
                    "    var store = Ext.getStore(\"addDhcpMappingStore\");",
                    "    var sendData = {};",
                    "    if(store.getCount() > 0 ) {",
                    "",
                    "        var validFlag = true;",
                    "        Ext.each(Ext.pluck(store.data.items, 'data'), function(item) {",
                    "",
                    "            if(item.map_name == \"\" || item.map_ip == \"\" || item.map_mac == \"\") {",
                    "                validFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(validFlag === false) {",
                    "            Ext.Msg.alert('Failure', \"Static Mapping 설정시 Static Mapping 의 모든 정보를 입력하시기 바랍니다.\");",
                    "            return;",
                    "        }",
                    "",
                    "        formData.static_mapping = Ext.pluck(store.data.items, 'data');",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/dhcp/sharednetwork\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addDhcpForm.getEl(),",
                    "         jsonData: formData,",
                    "         timeout : 3*60*1000,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addDhcpForm.up('window').close();",
                    "",
                    "                    Ext.getCmp(\"comboDhcpNetworkName\").setValue(\"\");",
                    "                    vmConstants.me.setDhcpNetworkData();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "f2c54a40-fa4e-4ab2-842d-cf79fc0994d2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveVmDhcpGlobal",
                "implHandler": [
                    "var viewDhcpForm = Ext.getCmp(\"viewDhcpForm\");",
                    "var formData = viewDhcpForm.getForm().getFieldValues();",
                    "",
                    "if(viewDhcpForm.isValid()) {",
                    "",
                    "    formData.parameters = formData.parameters.replace(/(?:\\r\\n|\\r|\\n)/g, ',');",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/dhcp/global\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewDhcpForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.');",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "2a65826e-f1d5-42cd-ad4b-42bb50cb6561"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVmDhcpSharednet",
                "implHandler": [
                    "var viewDhcpNetworkForm = Ext.getCmp(\"viewDhcpNetworkForm\");",
                    "var formData = viewDhcpNetworkForm.getForm().getFieldValues();",
                    "",
                    "if(viewDhcpNetworkForm.isValid()) {",
                    "",
                    "    var store = Ext.getStore(\"VmDhcpMappingStore\");",
                    "    var sendData = {};",
                    "    if(store.getCount() > 0 ) {",
                    "",
                    "        var validFlag = true;",
                    "        Ext.each(Ext.pluck(store.data.items, 'data'), function(item) {",
                    "",
                    "            if(item.map_name == \"\" || item.map_ip == \"\" || item.map_mac == \"\") {",
                    "                validFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(validFlag === false) {",
                    "            Ext.Msg.alert('Failure', \"Static Mapping 설정시 Static Mapping 의 모든 정보를 입력하시기 바랍니다.\");",
                    "            return;",
                    "        }",
                    "",
                    "        formData.static_mapping = Ext.pluck(store.data.items, 'data');",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/dhcp/sharednetwork\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewDhcpNetworkForm.getEl(),",
                    "         jsonData: formData,",
                    "         timeout : 3*60*1000,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    vmConstants.me.setDhcpNetworkData(formData.shared_network_name);",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "f9e5577f-a5fe-471c-8fa3-8285c98b4917"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVmDhcpSharednet",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 DHCP 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var viewDhcpNetworkForm = Ext.getCmp(\"viewDhcpNetworkForm\");",
                    "        var formData = viewDhcpNetworkForm.getForm().getFieldValues();",
                    "",
                    "        var is_last = false;",
                    "        if(Ext.getCmp(\"comboDhcpNetworkName\").getStore().getCount() < 2) {",
                    "            is_last = true;",
                    "        }",
                    "",
                    "        var sendData = {",
                    "            \"shared_network_name\" : formData.shared_network_name,",
                    "            \"is_last\" : is_last",
                    "        };",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/dhcp/sharednetwork\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : viewDhcpNetworkForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        Ext.getCmp(\"comboDhcpNetworkName\").setValue(\"\");",
                    "                        viewDhcpNetworkForm.getForm().reset();",
                    "                        vmConstants.me.setDhcpNetworkData();",
                    "",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "e84474e9-a097-4a47-ad4a-72c4ea2905a4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setHttpsSsh",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewHttpsSshForm\");",
                    "",
                    "form.getForm().reset();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/remote',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (data){",
                    "",
                    "                if(data.service === \"https\") {",
                    "",
                    "                    form.getForm().findField(\"httpsenable\").setValue(true);",
                    "                    form.getForm().findField(\"httpsaddr\").setValue(data[\"listen-address\"]);",
                    "",
                    "                } else if(data.service === \"ssh\") {",
                    "",
                    "                    form.getForm().findField(\"sshallow\").setValue(data[\"allow-root\"]);",
                    "                    form.getForm().findField(\"sshaddr\").setValue(data[\"listen-address\"]);",
                    "                    form.getForm().findField(\"sshport\").setValue(data[\"port\"]);",
                    "",
                    "                }",
                    "",
                    "            });",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "454a2b36-3d50-4504-a535-e2a96fd5cfd6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveHttpsSsh",
                "implHandler": [
                    "var viewHttpsSshForm = Ext.getCmp(\"viewHttpsSshForm\");",
                    "var formData = viewHttpsSshForm.getForm().getFieldValues();",
                    "",
                    "var sendData = {",
                    "      httpsenable : formData.httpsenable,",
                    "      httpsaddr : formData.httpsaddr",
                    "    };",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/remote\",",
                    "    method: \"PUT\",",
                    "    headers : {",
                    "        \"Content-Type\" : \"application/json\"",
                    "    },",
                    "    waitMsg: 'Saving Data...',",
                    "    waitMsgTarget : viewHttpsSshForm.getEl(),",
                    "    jsonData: sendData,",
                    "    success: function (response) {",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                vmConstants.me.setHttpsSsh();",
                    "",
                    "            });",
                    "",
                    "        }",
                    "",
                    "    },",
                    "    failure: function (response) {",
                    "        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "2de5f3db-8fc0-433f-b124-4d5895ac424a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setSystem",
                "implHandler": [
                    "var globalform = Ext.getCmp(\"vmSystemGlobalForm\");",
                    "var loginform = Ext.getCmp(\"vmSystemLoginForm\");",
                    "",
                    "globalform.getForm().reset();",
                    "loginform.getForm().reset();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/system',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : globalform.up('panel').getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "            ",
                    "            if(datas.length > 0) {",
                    "                ",
                    "                Ext.each(datas, function (data){",
                    "                    ",
                    "                    if(data.category === \"host-name\") {",
                    "                        globalform.getForm().findField(\"hostname\").setValue(data[\"host-name\"]);",
                    "                    }",
                    "                    ",
                    "                    if(data.category === \"time-zone\") {",
                    "                        globalform.getForm().findField(\"timezone\").setValue(data[\"time-zone\"]);",
                    "                    }",
                    "                    ",
                    "                    if(data.category === \"login\") {",
                    "                        ",
                    "                        var store = Ext.create('Ext.data.Store', {",
                    "                            fields : [\"authentication\", \"key_name\", \"level\"],",
                    "                            data: data.user",
                    "                        });",
                    "            ",
                    "                        loginform.getForm().findField(\"username\").bindStore(store);",
                    "                        loginform.getForm().findField(\"username\").setValue(data.user[0].key_name);",
                    "                    }",
                    "                });",
                    "            }",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "ff444749-4948-4e12-9d72-6957c7b050ed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue"
                ],
                "fn": "changeSystemUserName",
                "implHandler": [
                    "var store = field.getStore();",
                    "var form = field.up('form').getForm();",
                    "var record = store.findRecord(\"key_name\", newValue);",
                    "",
                    "form.findField(\"level\").setValue(record.get(\"level\"));",
                    "",
                    "var auth = record.get(\"authentication\");",
                    "",
                    "if(auth) {",
                    "    ",
                    "    var keys = auth[\"public-keys\"];",
                    "    ",
                    "    if(keys) {",
                    "        ",
                    "        form.findField(\"key_id\").setValue(keys[0].key_name);",
                    "        form.findField(\"key_type\").setValue(keys[0].type);",
                    "        form.findField(\"key_value\").setValue(keys[0].key);",
                    "    ",
                    "    }",
                    "}",
                    ""
                ]
            },
            "designerId": "4ce27858-5063-4461-8314-cff20afb3f11"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveVmSystemGrobal",
                "implHandler": [
                    "",
                    "var vmSystemGlobalForm = Ext.getCmp(\"vmSystemGlobalForm\");",
                    "",
                    "if(vmSystemGlobalForm.isValid()) {",
                    "    ",
                    "    var formData = vmSystemGlobalForm.getForm().getFieldValues();",
                    "    formData.systemtype = \"global\";",
                    "    ",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/system\",",
                    "        method: \"PUT\",",
                    "        headers : {",
                    "            \"Content-Type\" : \"application/json\"",
                    "        },",
                    "        waitMsg: 'Saving Data...',",
                    "        waitMsgTarget : vmSystemGlobalForm.up('panel').getEl(),",
                    "        jsonData: formData,",
                    "        success: function (response) {",
                    "    ",
                    "            if(response.status == 200) {",
                    "    ",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "    ",
                    "                    vmConstants.me.setSystem();",
                    "    ",
                    "                });",
                    "    ",
                    "            }",
                    "    ",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "    });",
                    "    ",
                    "}"
                ]
            },
            "designerId": "33b6b38a-2c78-43e7-b090-fe3ffdaf637f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveVmSystemLogin",
                "implHandler": [
                    "",
                    "var vmSystemLoginForm = Ext.getCmp(\"vmSystemLoginForm\");",
                    "",
                    "if(vmSystemLoginForm.isValid()) {",
                    "",
                    "    var formData = vmSystemLoginForm.getForm().getFieldValues();",
                    "    formData.systemtype = \"login\";",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/system\",",
                    "        method: \"PUT\",",
                    "        headers : {",
                    "            \"Content-Type\" : \"application/json\"",
                    "        },",
                    "        waitMsg: 'Saving Data...',",
                    "        waitMsgTarget : vmSystemLoginForm.up('panel').getEl(),",
                    "        jsonData: formData,",
                    "        success: function (response) {",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    vmConstants.me.setSystem();",
                    "",
                    "                });",
                    "",
                    "            }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "    });",
                    "",
                    "}"
                ]
            },
            "designerId": "00e35a55-6a2c-42a9-ba85-9b3fd35e7a9c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setFirewall",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "",
                    "Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "",
                    "form.getForm().reset();",
                    "",
                    "if(vmConstants.vmFirewallRecords == null) {",
                    "",
                    "    this.setVmFirewallRecords();",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmFirewallRecords;",
                    "",
                    "    var recordData = [];",
                    "    Ext.each(datas, function (record){",
                    "",
                    "        var addFlag = true;",
                    "",
                    "        Ext.each(recordData, function(rData) {",
                    "",
                    "            if(record.name === rData.name) {",
                    "",
                    "                addFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(addFlag) {",
                    "            recordData.push(record);",
                    "        }",
                    "",
                    "    });",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmFirewallModel',",
                    "        data: recordData",
                    "    });",
                    "",
                    "    Ext.getCmp(\"comboFirewallName\").bindStore(store);",
                    "    Ext.getCmp(\"comboFirewallRuleName\").getStore().removeAll();",
                    "",
                    "}",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"ethernet\")], form.up('panel').getEl(), \"해당없음\");"
                ]
            },
            "designerId": "60900d50-8f97-4a53-b910-e62f77fd8de5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "ruleValue"
                ],
                "fn": "setVmFirewallRecords",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/firewall/all',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.up('panel').getEl(),",
                    "    //async  : false,",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            vmConstants.vmFirewallRecords = datas;",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (record){",
                    "",
                    "                var addFlag = true;",
                    "",
                    "                Ext.each(recordData, function(rData) {",
                    "",
                    "                    if(record.name === rData.name) {",
                    "",
                    "                        addFlag = false;",
                    "                        return false;",
                    "                    }",
                    "                });",
                    "",
                    "                if(addFlag) {",
                    "                    recordData.push(record);",
                    "                }",
                    "",
                    "            });",
                    "",
                    "            store = Ext.create('Ext.data.Store', {",
                    "                model: 'spider.model.VmFirewallModel',",
                    "                data: recordData",
                    "            });",
                    "",
                    "            Ext.getCmp(\"comboFirewallName\").bindStore(store);",
                    "            Ext.getCmp(\"comboFirewallRuleName\").getStore().removeAll();",
                    "",
                    "            if(comboValue != null) {",
                    "",
                    "                vmConstants.me.changeFirewallData(comboValue, ruleValue);",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "3c6d891f-e66c-4d83-82ce-0afac144f486"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "firewallName",
                    "ruleName"
                ],
                "fn": "changeFirewallData",
                "implHandler": [
                    "var data;",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "",
                    "if(firewallName == \"\" || ruleName == \"\") {",
                    "    return;",
                    "}",
                    "",
                    "form.down('#saveBtn').show();",
                    "form.down('#deleteBtn').show();",
                    "",
                    "Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "",
                    "    if(record.name === firewallName) {",
                    "",
                    "        Ext.each(record.rules, function(rule) {",
                    "",
                    "            if(rule.rule === ruleName) {",
                    "                rule.name = firewallName;",
                    "                rule.ethernet = record.ethernet;",
                    "                rule.inout = record.inout;",
                    "",
                    "                data = rule;",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "});",
                    "",
                    "form.getForm().reset();",
                    "form.getForm().findField(\"name\").setValue(firewallName);",
                    "form.getForm().setValues(data);",
                    "",
                    "if(data.source_address != null && data.source_address.indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"source_address\").setValue(data.source_address.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_address\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    "",
                    "if(data.destination_address != null && data.destination_address.indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"destination_address\").setValue(data.destination_address.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"destination_address\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    "",
                    "if(data.source_port != null && data.source_port.indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"source_port\").setValue(data.source_port.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_port\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    "",
                    "if(data.destination_port != null && data.destination_port.indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"destination_port\").setValue(data.destination_port.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"destination_port\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    "",
                    "if(data.protocol != null && data.protocol.indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"protocol\").setValue(data.protocol.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"protocol\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    "",
                    "if(data[\"source_mac-address\"] != null && data[\"source_mac-address\"].indexOf(\"!\") === 0) {",
                    "",
                    "    form.getForm().findField(\"source_mac-address\").setValue(data[\"source_mac-address\"].replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_mac-address\").nextNode('checkboxfield').setValue(true);",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "034ae7f3-4fea-49da-adf6-f7fc4c847234"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmFirewallWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddFirewallWindow\");",
                    "popWindow.show();",
                    "",
                    "var component = Ext.getCmp(\"addFirewallForm\");",
                    "var components = [component.getForm().findField(\"ethernet\")];",
                    "",
                    "component.getForm().findField(\"name\").bindStore(Ext.getCmp(\"comboFirewallName\").getStore());",
                    "",
                    "vmConstants.me.renderNicComboBox(components, component.getEl(), \"해당없음\");"
                ]
            },
            "designerId": "fbed4b8b-d773-4f07-bb12-ed4971a8e592"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMFirewall",
                "implHandler": [
                    "var addFirewallForm = Ext.getCmp(\"addFirewallForm\");",
                    "var formData = addFirewallForm.getForm().getFieldValues();",
                    "",
                    "if(addFirewallForm.isValid()) {",
                    "",
                    "    if(formData.ethernet === \"해당없음\") {",
                    "        formData.ethernet = \"\";",
                    "    }",
                    "",
                    "    if(formData.ethernet != \"\" && formData.inout == null) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"NIC가 선택된 경우 동작위치는 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.source_address == \"\" &&",
                    "          formData.destination_address == \"\" &&",
                    "          formData.source_port == \"\" &&",
                    "          formData.destination_port == \"\" &&",
                    "          formData.protocol == \"\" ) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_address\").nextNode('checkboxfield');",
                    "    if(formData.source_address !== \"\" && chkField.getValue() === true) {",
                    "        formData.source_address = \"!\" + formData.source_address;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"destination_address\").nextNode('checkboxfield');",
                    "    if(formData.destination_address !== \"\" && chkField.getValue() === true) {",
                    "        formData.destination_address = \"!\" + formData.destination_address;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_port\").nextNode('checkboxfield');",
                    "    if(formData.source_port !== \"\" && chkField.getValue() === true) {",
                    "        formData.source_port = \"!\" + formData.source_port;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"destination_port\").nextNode('checkboxfield');",
                    "    if(formData.destination_port !== \"\" && chkField.getValue() === true) {",
                    "        formData.destination_port = \"!\" + formData.destination_port;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"protocol\").nextNode('checkboxfield');",
                    "    if(formData.protocol !== \"\" && chkField.getValue() === true) {",
                    "        formData.protocol = \"!\" + formData.protocol;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_mac-address\").nextNode('checkboxfield');",
                    "    if(formData[\"source_mac-address\"] !== \"\" && chkField.getValue() === true) {",
                    "        formData[\"source_mac-address\"] = \"!\" + formData[\"source_mac-address\"];",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + formData.name,",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addFirewallForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addFirewallForm.up('window').close();",
                    "",
                    "                    Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "                    Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "                    vmConstants.me.setVmFirewallRecords();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "f18a757f-bfa8-4e54-8207-e5a7149b9f8e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboDhcpNetworkName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboDhcpNetworkNameChange",
                "implHandler": [
                    "",
                    "if(newValue !== '') {",
                    "",
                    "    this.changeDhcpNetworkData(newValue);",
                    "",
                    "} else {",
                    "",
                    "    var form = Ext.getCmp(\"viewDhcpNetworkForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "9346dab4-1bb6-4197-bc75-2343c014a68a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboFirewallName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboFirewallNameChange",
                "implHandler": [
                    "var firewallName = newValue,",
                    "    ruleField = field.up('form').getForm().findField(\"comboFirewallRuleName\");",
                    "",
                    "ruleField.setValue(\"\");",
                    "ruleField.getStore().removeAll();",
                    "",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "form.getForm().reset();",
                    "",
                    "if(firewallName != \"\") {",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').show();",
                    "",
                    "    var recordData = [];",
                    "    Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "        if(record.name === firewallName) {",
                    "",
                    "            recordData = record.rules;",
                    "        }",
                    "    });",
                    "",
                    "    var store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmFirewallModel',",
                    "        data: recordData",
                    "    });",
                    "",
                    "    ruleField.bindStore(store);",
                    "",
                    "} else {",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "221de21e-ebfb-4640-a16f-bec842bc0217"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboFirewallRuleName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboFirewallRuleNameChange",
                "implHandler": [
                    "var firewall = field.up('form').getForm().findField(\"comboFirewallName\"),",
                    "    ruleName = newValue;",
                    "",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "form.getForm().reset();",
                    "",
                    "if(firewall.getValue() != \"\" && ruleName != \"\") {",
                    "",
                    "    this.changeFirewallData(firewall.getValue(), ruleName);",
                    "",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "726c7544-e8a4-4e0b-8c90-03a4ef822cfe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMFirewall",
                "implHandler": [
                    "",
                    "var viewFirewallForm = Ext.getCmp(\"viewFirewallForm\");",
                    "var formData = viewFirewallForm.getForm().getFieldValues();",
                    "",
                    "if(viewFirewallForm.isValid()) {",
                    "",
                    "    if(formData.ethernet === \"해당없음\") {",
                    "        formData.ethernet = \"\";",
                    "    }",
                    "",
                    "    if(formData.ethernet != \"\" && formData.inout == null) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"NIC가 선택된 경우 동작위치는 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.source_address == \"\" &&",
                    "          formData.destination_address == \"\" &&",
                    "          formData.source_port == \"\" &&",
                    "          formData.destination_port == \"\" &&",
                    "          formData.protocol == \"\" ) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_address\").nextNode('checkboxfield');",
                    "    if(formData.source_address !== \"\" && chkField.getValue() === true) {",
                    "        formData.source_address = \"!\" + formData.source_address;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"destination_address\").nextNode('checkboxfield');",
                    "    if(formData.destination_address !== \"\" && chkField.getValue() === true) {",
                    "        formData.destination_address = \"!\" + formData.destination_address;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_port\").nextNode('checkboxfield');",
                    "    if(formData.source_port !== \"\" && chkField.getValue() === true) {",
                    "        formData.source_port = \"!\" + formData.source_port;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"destination_port\").nextNode('checkboxfield');",
                    "    if(formData.destination_port !== \"\" && chkField.getValue() === true) {",
                    "        formData.destination_port = \"!\" + formData.destination_port;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"protocol\").nextNode('checkboxfield');",
                    "    if(formData.protocol !== \"\" && chkField.getValue() === true) {",
                    "        formData.protocol = \"!\" + formData.protocol;",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_mac-address\").nextNode('checkboxfield');",
                    "    if(formData[\"source_mac-address\"] !== \"\" && chkField.getValue() === true) {",
                    "        formData[\"source_mac-address\"] = \"!\" + formData[\"source_mac-address\"];",
                    "    }",
                    "    delete formData[chkField.getName()];",
                    "",
                    "    var sendData = {};",
                    "    sendData.after = formData;",
                    "",
                    "    sendData.before = {};",
                    "    Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "",
                    "        if(record.name === formData.name) {",
                    "",
                    "            Ext.each(record.rules, function(rule) {",
                    "",
                    "                if(rule.rule === formData.rule) {",
                    "",
                    "                    sendData.before.action\t\t\t\t\t= (rule.action == null ? \"\" : rule.action);",
                    "                    sendData.before.destination_address\t\t= (rule.destination_address == null ? \"\" : rule.destination_address);",
                    "                    sendData.before.destination_port\t\t= (rule.destination_port == null ? \"\" : rule.destination_port);",
                    "                    sendData.before.ethernet\t\t\t\t= (rule.ethernet == null ? \"\" : rule.ethernet);",
                    "                    sendData.before.inout\t\t\t\t\t= (rule.inout == null ? \"\" : rule.inout);",
                    "                    sendData.before.name\t\t\t\t\t= (rule.name == null ? \"\" : rule.name);",
                    "                    sendData.before.protocol\t\t\t\t= (rule.protocol == null ? \"\" : rule.protocol);",
                    "                    sendData.before.rule\t\t\t\t\t= (rule.rule == null ? \"\" : rule.rule);",
                    "                    sendData.before[\"source_mac-address\"]\t= (rule[\"source_mac-address\"] == null ? \"\" : rule[\"source_mac-address\"]);",
                    "                    sendData.before.source_address\t\t\t= (rule.source_address == null ? \"\" : rule.source_address);",
                    "                    sendData.before.source_port\t\t\t\t= (rule.source_port == null ? \"\" : rule.source_port);",
                    "",
                    "                }",
                    "            });",
                    "",
                    "        }",
                    "    });",
                    "",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + formData.name,",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewFirewallForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    viewFirewallForm.getForm().reset();",
                    "                    vmConstants.me.setVmFirewallRecords(formData.name, formData.rule);",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "dbc25db6-778d-4b93-afc1-8fd90b280d38"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMFirewall",
                "implHandler": [
                    "",
                    "var ruleField = Ext.getCmp(\"comboFirewallRuleName\");",
                    "if(ruleField.getStore().getCount() > 0 && (ruleField.getValue() == null || ruleField.getValue() == \"\") ) {",
                    "",
                    "    Ext.Msg.alert('Failure', \"해당 Firewall 에 Rule 정보가 한 건 이상 존재할 경우 <br/> Rule 을 선택한 후에 삭제하시기 바랍니다.\");",
                    "    return;",
                    "}",
                    "",
                    "Ext.MessageBox.confirm('Confirm', '해당 Firewall 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var viewFirewallForm = Ext.getCmp(\"viewFirewallForm\");",
                    "        var formData = viewFirewallForm.getForm().getFieldValues();",
                    "",
                    "        var sendData = {rule : ruleField.getValue()};",
                    "        Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "",
                    "            if(record.name === formData.name) {",
                    "",
                    "                Ext.each(record.rules, function(rule) {",
                    "",
                    "                    if(rule.rule === formData.rule) {",
                    "",
                    "                        sendData = rule;",
                    "                    }",
                    "                });",
                    "",
                    "            }",
                    "        });",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + Ext.getCmp(\"comboFirewallName\").getValue(),",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : viewFirewallForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "                        Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "                        vmConstants.me.setVmFirewallRecords();",
                    "",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "b5e137f8-6bf6-49a0-ba95-858bea7511b8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setCli",
                "implHandler": [
                    "",
                    "var center = Ext.getCmp(\"lnbLocationCombo\").getValue();",
                    "var checkTreeData = [];",
                    "",
                    "Ext.each(menuConstants.hostRecord, function(host, index) {",
                    "",
                    "    if(host.location == center) {",
                    "",
                    "        host.id = host._id;",
                    "        host.text = host.name;",
                    "        host.icon = 'resources/images/icons/server.png';",
                    "        host.type = 'vmhost';",
                    "        host.expanded = true;",
                    "",
                    "        var vmList = [];",
                    "        Ext.each(menuConstants.vmRecord, function(vm) {",
                    "",
                    "            if(host._id == vm.vmhost) {",
                    "",
                    "                vm.id = vm._id;",
                    "                vm.text = vm.vmname;",
                    "                vm.icon = 'resources/images/icons/host.png';",
                    "                vm.type = 'vm';",
                    "                vm.leaf = true;",
                    "                ",
                    "                if(vmConstants.selectRecord.get(\"id\") === vm.id) {",
                    "                    vm.checked = true;",
                    "                } else {",
                    "                    vm.checked = false;",
                    "                }",
                    "                ",
                    "                if(vm.interim === true) {",
                    "                    vm.cls = \"node-red\";",
                    "                    delete vm.checked;",
                    "                }",
                    "",
                    "                vmList.push(vm);",
                    "            }",
                    "        });",
                    "",
                    "        if(vmList.length > 0) {",
                    "",
                    "            host.leaf = false;",
                    "            host.children = vmList;",
                    "",
                    "        } else {",
                    "",
                    "            host.leaf = true;",
                    "",
                    "        }",
                    "",
                    "        checkTreeData.push(host);",
                    "",
                    "    }",
                    "",
                    "});",
                    "",
                    "var treeStore = Ext.create('Ext.data.TreeStore', {",
                    "    model: 'spider.model.VmHostModel',",
                    "    root: {",
                    "        expanded: true,",
                    "        text: 'Server List',",
                    "        icon : '',",
                    "        type : 'root',",
                    "        children: checkTreeData",
                    "    }",
                    "});",
                    "",
                    "Ext.getCmp(\"listCheckMenuPanel\").bindStore(treeStore);",
                    "",
                    ""
                ]
            },
            "designerId": "ba4d0e4e-c321-4e95-9344-1818f8cebeef"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "executeCli",
                "implHandler": [
                    "var cliForm = Ext.getCmp(\"cliSubmitForm\");",
                    "",
                    "var vmRecords = Ext.getCmp(\"listCheckMenuPanel\").getView().getChecked();",
                    "",
                    "if(vmRecords.length == 0) {",
                    "",
                    "    Ext.Msg.alert('Failure', \"VM 선택 후 명령을 실행하시기 바랍니다.\");",
                    "    return;",
                    "",
                    "}",
                    "",
                    "if(cliForm.isValid()) {",
                    "",
                    "    var vms = [];",
                    "    Ext.each(vmRecords, function(record){",
                    "        vms.push(record.get(\"id\"));",
                    "    });",
                    "",
                    "    var sendData = {vms : vms,",
                    "                    commands : cliForm.getForm().findField(\"commands\").getValue()",
                    "                   };",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/cli\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : cliForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                cliForm.getForm().findField(\"results\").setValue(response.responseText);",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />'));",
                    "        }",
                    "     });",
                    "",
                    "}"
                ]
            },
            "designerId": "f60969ce-5c75-430f-bae3-a358175fbd1a"
        }
    ]
}