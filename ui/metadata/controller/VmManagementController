{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "VmManagementController"
    },
    "designerId": "402db966-e25d-4c82-a994-7e075a6bfb20",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record",
                    "tabIndex"
                ],
                "fn": "initVmManagement",
                "implHandler": [
                    "var vmDetailTab = Ext.getCmp(\"networkInstanceTabPanel\");",
                    "",
                    "if(record == null) {",
                    "",
                    "    Ext.getCmp(\"mgmtVmHostName\").setValue(\"\");",
                    "    Ext.getCmp(\"mgmtVmName\").setValue(\"\");",
                    "",
                    "    Ext.getCmp(\"networkInstanceTabPanel\").setActiveTab(0);",
                    "",
                    "    return;",
                    "}",
                    "",
                    "if(record.get(\"id\") !== vmConstants.selectVmId) {",
                    "",
                    "    vmConstants.vmNicRecords = null;",
                    "    vmConstants.vmNatRecords = null;",
                    "    vmConstants.vmIfAllRecords = null;",
                    "    ",
                    "    vmConstants.selectRecord = record;",
                    "    vmConstants.selectVmId = record.get(\"id\");",
                    "",
                    "    Ext.getCmp(\"mgmtVmHostName\").setValue(record.get(\"vmhostName\"));",
                    "    Ext.getCmp(\"mgmtVmName\").setValue(record.get(\"text\"));",
                    "    Ext.getCmp(\"mgmtVmState\").setValue(\"\");",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + 'mon/vm/' + record.get(\"vmhost\") + \"/\" + record.get(\"text\") + \"/status\",",
                    "        method : 'GET',",
                    "        disableCaching : true,",
                    "        success: function(response){",
                    "",
                    "            var data = Ext.JSON.decode(response.responseText);",
                    "",
                    "            if(data.length > 0) {",
                    "                Ext.getCmp(\"mgmtVmState\").setValue(data[0].state.toLowerCase());",
                    "",
                    "            }",
                    "",
                    "            if(data[0].state.toLowerCase() == 'running') {",
                    "                Ext.getCmp('startVmBtn').setDisabled(true);",
                    "                Ext.getCmp('stopVmBtn').setDisabled(false);",
                    "            } else {",
                    "                Ext.getCmp('startVmBtn').setDisabled(false);",
                    "                Ext.getCmp('stopVmBtn').setDisabled(true);",
                    "            }",
                    "",
                    "",
                    "        }",
                    "    });",
                    "",
                    "    vmDetailTab.setActiveTab(11); //blank tab",
                    "}",
                    "",
                    "if(tabIndex) {",
                    "",
                    "    vmDetailTab.setActiveTab(tabIndex);",
                    "",
                    "} else {",
                    "",
                    "    if(vmDetailTab.getActiveTab() === vmDetailTab.items.getAt(0)) {",
                    "",
                    "        this.setInstanceDashboard();",
                    "",
                    "    } else {",
                    "",
                    "        vmDetailTab.setActiveTab(0);",
                    "",
                    "    }",
                    "",
                    "}"
                ]
            },
            "designerId": "d896c668-1bab-45ea-b033-e33d3668bee0"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "var vmMgmt = this;",
                    "",
                    "//VM Menu Constants",
                    "Ext.define('vmConstants', {",
                    "    singleton: true,",
                    "    me : vmMgmt,",
                    "",
                    "    selectVmId : null,",
                    "    selectRecord : null,",
                    "",
                    "    vmCombo : null,",
                    "",
                    "    initComboNic : false,",
                    "    initComboBonding : false,",
                    "    vmNicRecords : null,",
                    "    vmNatRecords : null,",
                    "    vmIfAllRecords : null,",
                    "    vmFirewallRecords : null",
                    "",
                    "});"
                ]
            },
            "designerId": "6a820b2e-8506-479f-856d-0b0d212aa840"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "index"
                ],
                "fn": "getUtilzation",
                "implHandler": [
                    "",
                    "// Case 3",
                    "var currentDate = new Date();",
                    "",
                    "// milli second 값을 지운다.",
                    "currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());",
                    "",
                    "// chart에 표시될 x축 개수",
                    "var length = 10;",
                    "",
                    "// x축의 시간 차(초)",
                    "// length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.",
                    "// length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.",
                    "var step = 1;",
                    "",
                    "// CPU, Memory, Network Chart를 위한 변수 설정",
                    "var cpuChart, memoryChart, networkChart;",
                    "var chartData = [];",
                    "",
                    "//var store = Ext.getStore('ChartDataStore');",
                    "var store = Ext.create('Ext.data.Store', {",
                    "    fields: ['date', 'cpu', 'memory', 'network']",
                    "});",
                    "/*",
                    "Ext.ComponentManager.unregister(Ext.getCmp('cpuChart'));",
                    "Ext.ComponentManager.unregister(Ext.getCmp('memoryChart'));",
                    "Ext.ComponentManager.unregister(Ext.getCmp('networkChart'));",
                    "",
                    "// CPU Chart 생성 후 cpuPanel에 draw 한다.",
                    "var cpuChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 170,",
                    "    style: 'background:#fff',",
                    "    id: 'cpuChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG CPU Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'cpu',",
                    "        title: 'AVG CPU Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'cpu',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "// Memory Chart 생성 후 memoryPanel에 draw 한다.",
                    "var memoryChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 170,",
                    "    style: 'background:#fff',",
                    "    id: 'memoryChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG Memory Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'memory',",
                    "        title: 'AVG Memory Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'memory',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "// Network Chart 생성 후 networkPanel에 draw 한다.",
                    "var networkChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 170,",
                    "    style: 'background:#fff',",
                    "    id: 'networkChart',",
                    "    store: store,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    legend: {",
                    "        visible: false,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        minimum: 0,",
                    "        maximum: 100,",
                    "        position: 'left',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        title: 'AVG Network Utilization',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: true,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'network',",
                    "        title: 'AVG Network Utilization',",
                    "        label: {",
                    "            display: '',",
                    "            field: 'network',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 2,",
                    "            size: 2",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "Ext.getCmp('cpuChartPanel').removeAll();",
                    "Ext.getCmp('memoryChartPanel').removeAll();",
                    "Ext.getCmp('networkChartPanel').removeAll();",
                    "",
                    "Ext.getCmp('cpuChartPanel').add(cpuChartItem);",
                    "Ext.getCmp('memoryChartPanel').add(memoryChartItem);",
                    "Ext.getCmp('networkChartPanel').add(networkChartItem);",
                    "*/",
                    "cpuChart = Ext.getCmp('cpuChart');",
                    "memoryChart = Ext.getCmp('memoryChart');",
                    "networkChart = Ext.getCmp('networkChart');",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "clearInterval(GlobalData.intervalId1);",
                    "GlobalData.intervalId1 = setInterval(function() {",
                    "    loadStat();",
                    "}, step * 1000);",
                    "",
                    "// Utilization 상태 정보를 조회하기 위한 function",
                    "loadStat = function() {",
                    "    var last = false, date = new Date();",
                    "    chartData = chartData.slice();",
                    "",
                    "    last = chartData[chartData.length -1];",
                    "",
                    "    chartData.push({",
                    "        date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "        cpu: Math.min(100, Math.max(last? last.cpu + (Math.random() - 0.5) * 10 : 5, 5)),",
                    "        memory: Math.min(100, Math.max(last? last.memory + (Math.random() - 0.5) * 25 : 40, 40)),",
                    "        network: Math.min(100, Math.max(last? last.network + (Math.random() - 0.5) * 15 : 20, 20))",
                    "    });",
                    "",
                    "    if (chartData.length > length + 1) {",
                    "        chartData.splice(0, 1);",
                    "    }",
                    "",
                    "    cpuAxis = cpuChart.axes.get(1);",
                    "    memoryAxis = memoryChart.axes.get(1);",
                    "    networkAxis = networkChart.axes.get(1);",
                    "",
                    "    var toDate = cpuAxis.toDate,",
                    "        lastDate = chartData[chartData.length - 1].date;",
                    "",
                    "    if (+toDate < +lastDate) {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = chartData[chartData.length -1].date;",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = chartData[chartData.length -1].date;",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = chartData[chartData.length -1].date;",
                    "",
                    "        cpuChart.markerIndex = 1;",
                    "        networkChart.markerIndex = 1;",
                    "        memoryChart.markerIndex = 1;",
                    "    } else {",
                    "        cpuAxis.fromDate = chartData[0].date;",
                    "        cpuAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        memoryAxis.fromDate = chartData[0].date;",
                    "        memoryAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "        networkAxis.fromDate = chartData[0].date;",
                    "        networkAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));",
                    "    }",
                    "",
                    "    store.loadData(chartData);",
                    "};"
                ]
            },
            "designerId": "96ab26a2-b6e9-477e-ae6a-c26cee25f91e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#vmListCycleBtn menuitem",
                "designer|targetType": "Ext.menu.CheckItem",
                "fn": "onVmListCycleBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"vmListCycleBtn\").setText(item.text);",
                    "",
                    "this.getInstanceDashboard(item.code);"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "30b05e8f-1d1c-4f2f-b5d5-cfc75ae0f710"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "no"
                ],
                "fn": "getInstanceDashboard",
                "implHandler": [
                    "",
                    "var vmStore = Ext.getStore(\"HostListStore\");",
                    "var r = vmStore.findRecord(\"no\", no);",
                    "var idx = vmStore.indexOf(r);",
                    "",
                    "//console.log(\"Host Index : \" + idx + \", Instance Index : \" + index);",
                    "",
                    "//Ext.getCmp('instanceDashboardBtn').fireEvent('click');",
                    "",
                    "var data = Ext.getStore('HostListStore').proxy.data[idx].instances[0];",
                    "",
                    "var gridStore = Ext.create('Ext.data.Store', {",
                    "    fields: ['name', 'description', 'ip', 'status', 'in', 'out'],",
                    "    data: data.interfaces",
                    "});",
                    "",
                    "Ext.getCmp('cpuBar').updateProgress(data.usage.cpu.percentage / 100, data.usage.cpu.percentage + \"%\");",
                    "Ext.getCmp('memoryBar').updateProgress(data.usage.memory.percentage / 100, data.usage.memory.percentage + \"% of \" + data.usage.memory.total);",
                    "Ext.getCmp('diskBar').updateProgress(data.usage.disk.percentage / 100, data.usage.disk.percentage + \"% of \" + data.usage.disk.total);",
                    "",
                    "Ext.getCmp('domainNameLabel').update(data.information.domain);",
                    "Ext.getCmp('dnsServersLabel').update(data.information.dns);",
                    "Ext.getCmp('bootViaLabel').update(data.information.boot);",
                    "Ext.getCmp('imagesLabel').update(data.information.images);",
                    "Ext.getCmp('entitlementLabel').update(data.information.entitlement);",
                    "",
                    "Ext.getCmp('interfacesGridPanel').reconfigure(gridStore, gridStore.fields);",
                    "",
                    "Ext.getCmp('interfacesCombo').bindStore(gridStore);",
                    "Ext.getCmp('interfacesCombo').setValue(gridStore.proxy.data[0].name);",
                    "Ext.getCmp('interfacesCombo').fireEvent('select');",
                    "",
                    "var cpu = data.usage.cpu.percentage,",
                    "    memory = data.usage.memory.percentage,",
                    "    disk = data.usage.disk.percentage;",
                    "",
                    "//Resource Usage를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "clearInterval(GlobalData.intervalId2);",
                    "GlobalData.intervalId2 = setInterval(function() {",
                    "    loadResourceUsage();",
                    "}, 2000);",
                    "",
                    "loadResourceUsage = function() {",
                    "    cpu = Math.min(100, Math.max(+cpu + (Math.random() - 0.5), 0));",
                    "    memory = Math.min(100, Math.max(+memory + (Math.random() - 0.5) * 2, 0));",
                    "    disk = Math.min(100, Math.max(+disk + (Math.random() - 0.5) / 2, 0));",
                    "",
                    "    Ext.getCmp('cpuBar').updateProgress(cpu / 100, cpu.toFixed(2) + \"%\");",
                    "    Ext.getCmp('memoryBar').updateProgress(memory / 100, memory.toFixed(2) + \"% of \" + data.usage.memory.total);",
                    "    Ext.getCmp('diskBar').updateProgress(disk / 100, disk.toFixed(2) + \"% of \" + data.usage.disk.total);",
                    "",
                    "};",
                    "",
                    "this.interfacesSelect(0);"
                ]
            },
            "designerId": "fd764692-c2a0-4710-87b1-72262de01507"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#networkInstanceTabPanel",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onNetworkInstanceTabPanelTabChange",
                "implHandler": [
                    "//if(newCard.title)",
                    "if(newCard.title === \"Instance Dashboard\") {",
                    "",
                    "    this.setInstanceDashboard();",
                    "",
                    "} else if(newCard.title === \"NIC\") {",
                    "",
                    "    this.setNic();",
                    "",
                    "} else if(newCard.title === \"Bonding\") {",
                    "",
                    "    this.setBonding();",
                    "",
                    "} else if(newCard.title === \"NAT\") {",
                    "",
                    "    this.setNat();",
                    "    ",
                    "} else if(newCard.title === \"HTTPS/SSH(Service)\") {",
                    "    ",
                    "    this.setHttpsSsh();",
                    "    ",
                    "} else if(newCard.title === \"Firewall\") {",
                    "    ",
                    "    this.setFirewall();",
                    "}",
                    "",
                    "",
                    "if(oldCard.title == \"Instance Dashboard\") {",
                    "    clearInterval(GlobalData.intervalId2);",
                    "}",
                    "",
                    "//this.changeNetworkInstanceTab()"
                ],
                "name": "tabchange",
                "scope": "me"
            },
            "designerId": "9249df4b-dd2f-4088-9032-e3134fc73a9e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "index"
                ],
                "fn": "interfacesSelect",
                "implHandler": [
                    "var currentDate = new Date();",
                    "",
                    "// milli second 값을 지운다.",
                    "currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());",
                    "",
                    "// chart에 표시될 x축 개수",
                    "var length = 60;",
                    "",
                    "// x축의 시간 차(초)",
                    "// length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.",
                    "// length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.",
                    "var step = 1;",
                    "",
                    "var interfaceChart;",
                    "var ifChartData = [];",
                    "",
                    "var ifChartStore = Ext.create('Ext.data.Store', {",
                    "    fields: ['date', 'cur_in', 'cur_out']",
                    "});",
                    "",
                    "Ext.ComponentManager.unregister(Ext.getCmp('interfaceChart'));",
                    "",
                    "var curIn = 0, curOut = 0, avgIn = 0, avgOut = 0, peakIn = 0, peakOut = 0;",
                    "var cnt = 0;",
                    "",
                    "var curInLabel = Ext.getCmp('curInLabel'),",
                    "    curOutLabel = Ext.getCmp('curOutLabel'),",
                    "    avgInLabel = Ext.getCmp('avgInLabel'),",
                    "    avgOutLabel = Ext.getCmp('avgOutLabel'),",
                    "    peakInLabel = Ext.getCmp('peakInLabel'),",
                    "    peakOutLabel = Ext.getCmp('peakOutLabel');",
                    "",
                    "// interfaceChart 생성 후 ifChartPanel에 draw 한다.",
                    "var interfaceChartItem = Ext.create('Ext.chart.Chart', {",
                    "    width: 250,",
                    "    height: 400,",
                    "    style: 'background:#fff',",
                    "    id: 'interfaceChart',",
                    "    store: ifChartStore,",
                    "    shadow: true,",
                    "    animate: true,",
                    "    //margins: '15 0 0 0',",
                    "    //autoSize: true, // true로 변경하면 Error: Invalid value for <svg> attribute width=\"-Infinity\" 에러 발생",
                    "    //insetPadding: 20,",
                    "    legend: {",
                    "        visible: true,",
                    "        position: 'bottom'",
                    "    },",
                    "    axes: [{",
                    "        type: 'Numeric',",
                    "        //minimum: 0,",
                    "        //maximum: 100,",
                    "        position: 'left',",
                    "        title: 'Usage (kbps)',",
                    "        grid: {",
                    "            odd: {",
                    "                fill: '#dedede',",
                    "                stroke: '#ddd',",
                    "                'stroke-width': 0.5",
                    "            }",
                    "        }",
                    "    }, {",
                    "        type: 'Time',",
                    "        position: 'bottom',",
                    "        fields: 'date',",
                    "        dateFormat: 'H:i:s',",
                    "        constrain: true,",
                    "        fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "        toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "        grid: true,",
                    "        step: [",
                    "            's',",
                    "            step",
                    "        ],",
                    "        label: {",
                    "            rotate: {",
                    "                degrees: 315",
                    "            }",
                    "        }",
                    "    }],",
                    "    series: [{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: false,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'cur_in',",
                    "        title: 'Network In',",
                    "        label: {",
                    "            display: 'none',",
                    "            field: 'cur_in',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 3,",
                    "            size: 3",
                    "        }",
                    "    },{",
                    "        type: 'line',",
                    "        smooth: false,",
                    "        fill: false,",
                    "        axis: ['left', 'bottom'],",
                    "        xField: 'date',",
                    "        yField: 'cur_out',",
                    "        title: 'Network Out',",
                    "        label: {",
                    "            display: 'none',",
                    "            field: 'cur_out',",
                    "            renderer: function(v) { return v >> 0; },",
                    "            'text-anchor': 'middle'",
                    "        },",
                    "        markerConfig: {",
                    "            radius: 3,",
                    "            size: 3",
                    "        }",
                    "    }]",
                    "});",
                    "",
                    "Ext.getCmp('ifChartPanel').removeAll();",
                    "Ext.getCmp('ifChartPanel').add(interfaceChartItem);",
                    "",
                    "interfaceChart = Ext.getCmp('interfaceChart');",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "clearInterval(GlobalData.intervalId3);",
                    "GlobalData.intervalId3 = setInterval(function() {",
                    "    loadNetworkRealtime();",
                    "}, step * 2000);",
                    "",
                    "// 실시간 네트워크 인터페이스 상태 정보를 조회하기 위한 function",
                    "loadNetworkRealtime = function() {",
                    "    var last = false, date = new Date();",
                    "    ifChartData = ifChartData.slice();",
                    "",
                    "    last = ifChartData[ifChartData.length -1];",
                    "",
                    "    curIn = Math.min(200, Math.max(last? last.cur_in + ((Math.random() - 0.5) * 2345) / 1000 : 15.27, 1.52));",
                    "    curOut = Math.min(200, Math.max(last? last.cur_out + ((Math.random() - 0.5) * 1234) / 1000 : 8.96, 1.52));",
                    "",
                    "    ifChartData.push({",
                    "        date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "        cur_in: curIn,",
                    "        cur_out: curOut",
                    "    });",
                    "",
                    "    if (ifChartData.length > length + 1) {",
                    "        ifChartData.splice(0, 1);",
                    "    }",
                    "",
                    "    ifAxis = interfaceChart.axes.get(1);",
                    "",
                    "    var toDate = ifAxis.toDate,",
                    "        lastDate = ifChartData[ifChartData.length - 1].date;",
                    "",
                    "    if (+toDate < +lastDate) {",
                    "        ifAxis.fromDate = ifChartData[0].date;",
                    "        ifAxis.toDate = ifChartData[ifChartData.length -1].date;",
                    "",
                    "        interfaceChart.markerIndex = 1;",
                    "    } else {",
                    "        ifAxis.fromDate = ifChartData[0].date;",
                    "        ifAxis.toDate = Ext.Date.add(ifChartData[0].date, Ext.Date.SECOND, (length * step));",
                    "    }",
                    "",
                    "    if (peakIn < curIn) {",
                    "        peakIn = curIn;",
                    "    }",
                    "    if (peakOut < curOut) {",
                    "        peakOut = curOut;",
                    "    }",
                    "",
                    "    if (cnt === 0) {",
                    "        avgIn = curIn;",
                    "        avgOut = curOut;",
                    "    } else {",
                    "        if (cnt > 1000000) {",
                    "            cnt = 1000000;",
                    "        }",
                    "        avgIn = ((avgIn * cnt) + curIn) / (cnt + 1);",
                    "        avgOut = ((avgOut * cnt) + curOut) / (cnt + 1);",
                    "    }",
                    "",
                    "    cnt++;",
                    "",
                    "    curInLabel.setText(curIn.toFixed(2) + \" kbps\");",
                    "    curOutLabel.setText(curOut.toFixed(2) + \" kbps\");",
                    "    avgInLabel.setText(avgIn.toFixed(2) + \" kbps\");",
                    "    avgOutLabel.setText(avgOut.toFixed(2) + \" kbps\");",
                    "    peakInLabel.setText(peakIn.toFixed(2) + \" kbps\");",
                    "    peakOutLabel.setText(peakOut.toFixed(2) + \" kbps\");",
                    "",
                    "    ifChartStore.loadData(ifChartData);",
                    "};"
                ]
            },
            "designerId": "3f092f17-a12c-400d-ab25-c92b43befc63"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setInstanceDashboard",
                "implHandler": [
                    "",
                    "this.setInstanceDashboardChart();",
                    "",
                    "",
                    "var viewVmForm = Ext.getCmp(\"viewVmForm\");",
                    "",
                    "viewVmForm.getForm().reset();",
                    "viewVmForm.getForm().waitMsgTarget = viewVmForm.getEl();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'mon/vm/' +vmConstants.selectRecord.get(\"id\") + '?detail=true',",
                    "    method : 'GET',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : viewVmForm.getEl(),",
                    "    success: function(response){",
                    "",
                    "        var data = Ext.JSON.decode(response.responseText);",
                    "",
                    "        if(data.length > 0) {",
                    "",
                    "            var vmData = data[0];",
                    "            var form = viewVmForm.getForm();",
                    "",
                    "            form.setValues(vmData);",
                    "",
                    "            var gridData = [];",
                    "            var interfaceKey = Object.keys(vmData.interfaces);",
                    "",
                    "            Ext.each(interfaceKey, function(nic) {",
                    "                ",
                    "                var ip = vmData.interfaces[nic].ipaddr;",
                    "                if(vmData.interfaces[nic].disable == true) {",
                    "                    ip += \"(disable)\";",
                    "                }",
                    "                ",
                    "                gridData.push({",
                    "                    name : nic,",
                    "                    ipaddr : ip,",
                    "                    macaddr : vmData.interfaces[nic].macaddr",
                    "                });",
                    "",
                    "            });",
                    "",
                    "            gridData.reverse();",
                    "",
                    "            Ext.getStore(\"VmInterfaceStore\").loadData(gridData, false);",
                    "",
                    "",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "c440d205-87b4-4736-a7a0-230ed7c93077"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setInstanceDashboardChart",
                "implHandler": [
                    "var centerContainer = this.getCenterContainer();",
                    "var vmDetailTab = Ext.getCmp(\"networkInstanceTabPanel\");",
                    "",
                    "if (centerContainer.layout.getActiveItem().itemId !== \"VmManagementPanel\") {",
                    "    return;",
                    "} else if(vmDetailTab.getActiveTab() !== vmDetailTab.items.getAt(0)) {",
                    "    return;",
                    "}",
                    "",
                    "",
                    "//CPU",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414488656.039&target='",
                    "            + vmConstants.selectRecord.get(\"id\") + '.cpu.0.cpu.user.value&from=-1minutes&format=json',",
                    "    disableCaching : true,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "",
                    "        if(columnData.length > 0) {",
                    "            var data = columnData[0];",
                    "",
                    "            // Get the quality field from record",
                    "            // Update chart with data",
                    "            var chartList = [];",
                    "            Ext.each(data.datapoints, function (chartData, aaa) {",
                    "                var chartCol = {};",
                    "                chartCol.cpu = chartData.value;",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "",
                    "                chartList.push(chartCol);",
                    "            });",
                    "",
                    "            //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);",
                    "",
                    "            Ext.getStore('VmCpuChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "//Memory",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414489011.422&target='",
                    "            + vmConstants.selectRecord.get(\"id\") + '.memory.memory.free.value&from=-1minutes&format=json',",
                    "    disableCaching : true,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "",
                    "            // Get the quality field from record",
                    "            // Update chart with data",
                    "            var chartList = [];",
                    "            Ext.each(data.datapoints, function (chartData) {",
                    "                var chartCol = {};",
                    "                chartCol.memory = chartData.value;",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "                chartList.push(chartCol);",
                    "            });",
                    "",
                    "            //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);",
                    "",
                    "            Ext.getStore('VmMemoryChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "//Network",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414489467.473&target='",
                    "            + vmConstants.selectRecord.get(\"id\") + '.interface.if_packets.eth0.tx&from=-1minutes&format=json',",
                    "    disableCaching : true,",
                    "    success: function(response){",
                    "",
                    "        var columnData = Ext.decode(response.responseText);",
                    "",
                    "        if(columnData.length > 0) {",
                    "",
                    "            var data = columnData[0];",
                    "",
                    "            // Get the quality field from record",
                    "            // Update chart with data",
                    "            var chartList = [];",
                    "            Ext.each(data.datapoints, function (chartData) {",
                    "                var chartCol = {};",
                    "                chartCol.network = chartData.value;",
                    "                chartCol.date = new Date(chartData.date*1000);",
                    "                chartList.push(chartCol);",
                    "            });",
                    "",
                    "            //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);",
                    "",
                    "            Ext.getStore('VmNetworkChartStore').loadData(chartList, false);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "",
                    "setTimeout(function() {",
                    "",
                    "    vmConstants.me.setInstanceDashboardChart();",
                    "",
                    "}, 5000);",
                    ""
                ]
            },
            "designerId": "4ddccfcd-db84-46d4-98d5-b9255bd1ff3b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "centerContainer",
                "selector": "#centerPanel"
            },
            "designerId": "c7a6a88f-a400-40e5-b341-ceb61d55d4f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setNic",
                "implHandler": [
                    "Ext.getCmp(\"comboNicName\").setValue(\"\");",
                    "Ext.getCmp(\"comboNicName\").up('toolbar').down('button').hide();",
                    "",
                    "Ext.getCmp(\"viewNicForm\").getForm().reset();",
                    "",
                    "var comboStore = Ext.getStore(\"VmNicStore\");",
                    "comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet';",
                    "",
                    "if(vmConstants.initComboNic) {",
                    "    comboStore.removeAll();",
                    "    comboStore.load();",
                    "",
                    "}"
                ]
            },
            "designerId": "aa4189d2-e64d-4f1f-b780-3b1ea3f4ad8b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboNicName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboNicNameChange",
                "implHandler": [
                    "",
                    "if(newValue === '') {",
                    "",
                    "    field.up('toolbar').down('button').hide();",
                    "",
                    "} else {",
                    "",
                    "    this.changeNicData(newValue);",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "95938bac-81e3-4cda-9347-88da5fefa780"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue"
                ],
                "fn": "changeNicData",
                "implHandler": [
                    "var field = Ext.getCmp(\"comboNicName\");",
                    "var form = Ext.getCmp(\"viewNicForm\").getForm();",
                    "form.reset();",
                    "",
                    "",
                    "var store = field.getStore();",
                    "var record = store.findRecord(\"ethName\", newValue);",
                    "",
                    "Ext.getCmp(\"viewNicForm\").getForm().loadRecord(record);",
                    "",
                    "field.up('toolbar').down('button').show();",
                    "",
                    "//VM의 Mgr Address 와 NIC의 IP Address 가 같을 경우 수정 불가능",
                    "if(record.get(\"ipaddr\") == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "    field.up('toolbar').down('button').hide();",
                    "}",
                    "",
                    "var readOnlyFlag = false;",
                    "if(record.get(\"address\") == \"dhcp\") {",
                    "    readOnlyFlag = true;",
                    "}",
                    "",
                    "",
                    "Ext.getCmp(\"checkNicDhcp\").setValue(readOnlyFlag);",
                    "",
                    "if(record.get(\"disable\") == true) {",
                    "    Ext.getCmp(\"checkNicDisable\").setValue(false);",
                    "} else {",
                    "    Ext.getCmp(\"checkNicDisable\").setValue(true);",
                    "}",
                    "",
                    "form.findField(\"ipaddr\").setReadOnly(readOnlyFlag);",
                    "form.findField(\"ipv6_address\").setReadOnly(readOnlyFlag);",
                    ""
                ]
            },
            "designerId": "88380668-d759-4ba2-aed1-c04ed6f51958"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNic",
                "implHandler": [
                    "",
                    "var combo = Ext.getCmp(\"comboNicName\"),",
                    "    comboValue = combo.getValue(),",
                    "    store = combo.getStore(),",
                    "    record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "var viewNicForm = Ext.getCmp(\"viewNicForm\");",
                    "var formData = viewNicForm.getForm().getFieldValues();",
                    "",
                    "if(viewNicForm.isValid()) {",
                    "",
                    "    if(formData.ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "        Ext.Msg.alert('Failure', \"NIC의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var sendData = {};",
                    "    //sendData.after = viewNicForm.getForm().getFieldValues();",
                    "",
                    "    sendData.after = formData;",
                    "    sendData.after.disable = (!Ext.getCmp(\"checkNicDisable\").getValue());",
                    "    if(Ext.getCmp(\"checkNicDhcp\").getValue() == true) {",
                    "        sendData.after.address = \"dhcp\";",
                    "    } else {",
                    "        sendData.after.address = \"\";",
                    "    }",
                    "",
                    "    sendData.before = {",
                    "        \"address\"\t\t: (record.get(\"address\") == null ? \"\" : record.get(\"address\")),",
                    "        \"ipaddr\"\t\t: (record.get(\"ipaddr\") == null ? \"\" : record.get(\"ipaddr\")),",
                    "        \"ipv6_address\"\t: (record.get(\"ipv6_address\") == null ? \"\" : record.get(\"ipv6_address\")),",
                    "        \"duplex\"\t\t: (record.get(\"duplex\") == null ? \"\" : record.get(\"duplex\")),",
                    "        \"hw-id\"\t\t\t: (record.get(\"hw-id\") == null ? \"\" : record.get(\"hw-id\")),",
                    "        \"speed\"\t\t\t: (record.get(\"speed\") == null ? \"\" : record.get(\"speed\")),",
                    "        \"mtu\"\t\t\t: (record.get(\"mtu\") == null ? \"\" : record.get(\"mtu\")),",
                    "        \"config\"\t\t: (record.get(\"config\") == null ? \"\" : record.get(\"config\")),",
                    "        \"ethName\"\t\t: (record.get(\"ethName\") == null ? \"\" : record.get(\"ethName\")),",
                    "        \"smp_affinity\"\t: (record.get(\"smp_affinity\") == null ? \"\" : record.get(\"smp_affinity\")),",
                    "        \"disable\"\t\t: (record.get(\"disable\") == null ? \"\" : record.get(\"disable\"))",
                    "    };",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/if/\" + comboValue,",
                    "        method: \"PUT\",",
                    "        headers : {",
                    "            \"Content-Type\" : \"application/json\"",
                    "        },",
                    "        waitMsg: 'Saving Data...',",
                    "        jsonData: sendData,",
                    "        success: function (response) {",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    Ext.Ajax.request({",
                    "                        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/' + comboValue,",
                    "                        waitMsg: 'Loading...',",
                    "                        disableCaching : true,",
                    "                        success: function(response){",
                    "",
                    "                            var columnData = Ext.decode(response.responseText);",
                    "                            if(columnData.length > 0) {",
                    "",
                    "                                record.set(columnData[0]);",
                    "                                vmConstants.me.changeNicData(comboValue);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                });",
                    "",
                    "            }",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "    });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "994ac7a9-5021-4ca1-b3be-517b62c8db47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setBonding",
                "implHandler": [
                    "Ext.getCmp(\"comboBondingName\").setValue(\"\");",
                    "",
                    "Ext.getCmp(\"viewBondingForm\").getForm().reset();",
                    "",
                    "var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "",
                    "if(vmConstants.initComboBonding) {",
                    "    comboStore.removeAll();",
                    "    comboStore.load();",
                    "",
                    "}"
                ]
            },
            "designerId": "2670e131-23d6-4136-b89e-9bd5af7eac5f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue"
                ],
                "fn": "changeBondingData",
                "implHandler": [
                    "",
                    "var field = Ext.getCmp(\"comboBondingName\");",
                    "var form = Ext.getCmp(\"viewBondingForm\");",
                    "form.getForm().reset();",
                    "",
                    "form.down('#saveBtn').show();",
                    "form.down('#deleteBtn').show();",
                    "",
                    "var store = field.getStore();",
                    "var record = store.findRecord(\"ethName\", newValue);",
                    "",
                    "form.getForm().loadRecord(record);",
                    "",
                    "Ext.get(\"viewBondingForm\").select('.saveBtn').show();",
                    "Ext.get(\"viewBondingForm\").select('.deleteBtn').show();",
                    "",
                    "var dhcpFlag = false;",
                    "if(record.get(\"address\") == \"dhcp\") {",
                    "    dhcpFlag = true;",
                    "}",
                    "Ext.getCmp(\"checkBondigDhcp\").setValue(dhcpFlag);",
                    "",
                    "if(record.get(\"disable\") == true) {",
                    "    Ext.getCmp(\"checkBondingDisable\").setValue(false);",
                    "} else {",
                    "    Ext.getCmp(\"checkBondingDisable\").setValue(true);",
                    "}",
                    "",
                    "var nics = record.get(\"ethernets\");",
                    "var disables = record.get(\"disables\");",
                    "",
                    "var checks = form.down('#bondingNICGroup').getBoxes();",
                    "Ext.each(checks, function (checkBox) {",
                    "",
                    "    var disableFlag = false;",
                    "",
                    "    Ext.each(disables, function(disable) {",
                    "        if(checkBox.getName() == disable) {",
                    "            disableFlag = true;",
                    "        }",
                    "    });",
                    "",
                    "    if(checkBox.getName() == \"disableCheck\") {",
                    "        disableFlag = true;",
                    "    }",
                    "",
                    "    checkBox.setDisabled(disableFlag);",
                    "",
                    "    Ext.each(nics, function(nic) {",
                    "        if(checkBox.getName() == nic) {",
                    "            checkBox.setValue(true);",
                    "        }",
                    "    });",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "5de70cb7-2ae7-4832-a407-762ce11983d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmBondingWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "",
                    "var popWindow = Ext.create(\"widget.AddBondingWindow\");",
                    "popWindow.show();"
                ]
            },
            "designerId": "1efbf30a-d9a2-470a-8a28-2fa3305284f4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMBonding",
                "implHandler": [
                    "var addBondingForm = Ext.getCmp(\"addBondingForm\");",
                    "var formData = addBondingForm.getForm().getFieldValues();",
                    "",
                    "if(addBondingForm.isValid()) {",
                    "",
                    "    var checks = addBondingForm.down('#bondingNICGroup').getChecked();",
                    "",
                    "    if(checks.length < 2) {",
                    "        Ext.Msg.alert('Failure', \"NIC는 두개 이상 체크하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.address == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "        Ext.Msg.alert('Failure', \"Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var ethernets = [];",
                    "    Ext.each(checks, function(checkBox){",
                    "        ethernets.push(checkBox.getName());",
                    "    });",
                    "",
                    "    var sendData = {};",
                    "",
                    "    sendData.address = formData.address;",
                    "    sendData.mode = formData.mode;",
                    "    sendData.ethernets = ethernets;",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + formData.bondid,",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addBondingForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.');",
                    "",
                    "                var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "                comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "                comboStore.removeAll();",
                    "                comboStore.load();",
                    "",
                    "                addBondingForm.up('window').close();",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "9637f525-2ff8-4e50-8654-e5c2caef2cb9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMBonding",
                "implHandler": [
                    "",
                    "var combo = Ext.getCmp(\"comboBondingName\"),",
                    "    comboValue = combo.getValue(),",
                    "    store = combo.getStore(),",
                    "    record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "var viewBondingForm = Ext.getCmp(\"viewBondingForm\");",
                    "var formData = viewBondingForm.getForm().getFieldValues();",
                    "",
                    "if(viewBondingForm.isValid()) {",
                    "",
                    "    var checks = viewBondingForm.down('#bondingNICGroup').getChecked();",
                    "",
                    "    if(checks.length < 2) {",
                    "        Ext.Msg.alert('Failure', \"NIC는 두개 이상 체크하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if(formData.address == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "        Ext.Msg.alert('Failure', \"Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.\");",
                    "        return;",
                    "    }",
                    "",
                    "    var ethernets = [];",
                    "    Ext.each(checks, function(checkBox){",
                    "        ethernets.push(checkBox.getName());",
                    "    });",
                    "",
                    "    checks = viewBondingForm.down('#bondingNICGroup').getBoxes();",
                    "    Ext.each(checks, function (checkBox) {",
                    "        delete formData[checkBox.getName()];",
                    "    });",
                    "",
                    "    var sendData = {};",
                    "",
                    "    formData.ethernets = ethernets;",
                    "",
                    "    sendData.after = formData;",
                    "    sendData.after.disable = (!Ext.getCmp(\"checkBondingDisable\").getValue());",
                    "",
                    "    sendData.before = {",
                    "        \"address\"\t\t: (record.get(\"address\") == null ? \"\" : record.get(\"address\")),",
                    "        \"ipv6_address\"\t: (record.get(\"ipv6_address\") == null ? \"\" : record.get(\"ipv6_address\")),",
                    "        \"mode\"\t\t\t: (record.get(\"mode\") == null ? \"\" : record.get(\"mode\")),",
                    "        \"hw-id\"\t\t\t: (record.get(\"hw-id\") == null ? \"\" : record.get(\"hw-id\")),",
                    "        \"mtu\"\t\t\t: (record.get(\"mtu\") == null ? \"\" : record.get(\"mtu\")),",
                    "        \"config\"\t\t: (record.get(\"config\") == null ? \"\" : record.get(\"config\")),",
                    "        \"ethernets\"\t\t: (record.get(\"ethernets\") == null ? \"\" : record.get(\"ethernets\")),",
                    "        \"disable\"\t\t: (record.get(\"disable\") == null ? \"\" : record.get(\"disable\"))",
                    "    };",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + comboValue,",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewBondingForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    Ext.Ajax.request({",
                    "                        url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + comboValue,",
                    "                        method: \"GET\",",
                    "                        waitMsg: 'Loading...',",
                    "                        disableCaching : true,",
                    "                        success: function(response){",
                    "",
                    "                            var columnData = Ext.decode(response.responseText);",
                    "",
                    "                            if(columnData != null) {",
                    "",
                    "                                var data = columnData[comboValue];",
                    "                                data.ethernets = columnData.ethernets;",
                    "                                data.disables = columnData.disables;",
                    "",
                    "                                record.set(data);",
                    "",
                    "                                vmConstants.me.changeBondingData(comboValue);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                });",
                    "",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}"
                ]
            },
            "designerId": "05b5963b-b762-480b-9ccc-2be17d6ea033"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMBonding",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Bonding 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var combo = Ext.getCmp(\"comboBondingName\"),",
                    "            comboValue = combo.getValue(),",
                    "            store = combo.getStore(),",
                    "            record = store.findRecord(\"ethName\", comboValue);",
                    "",
                    "        var viewBondingForm = Ext.getCmp(\"viewBondingForm\");",
                    "",
                    "        if(viewBondingForm.isValid()) {",
                    "",
                    "            var sendData = {",
                    "                \"address\"\t\t: record.get(\"address\"),",
                    "                \"mode\"\t\t\t: record.get(\"mode\"),",
                    "                \"ethernets\"\t\t: record.get(\"ethernets\")",
                    "            };",
                    "",
                    "",
                    "            Ext.Ajax.request({",
                    "                 url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/bonding/\" + record.get(\"ethName\"),",
                    "                 method: \"DELETE\",",
                    "                 headers : {",
                    "                     \"Content-Type\" : \"application/json\"",
                    "                 },",
                    "                 waitMsg: 'Delete Data...',",
                    "                 waitMsgTarget : viewBondingForm.getEl(),",
                    "                 jsonData: sendData,",
                    "                 success: function (response) {",
                    "",
                    "                     if(response.status == 200) {",
                    "",
                    "                        Ext.Msg.alert('Success', '삭제가 완료되었습니다.');",
                    "",
                    "                        var comboStore = Ext.getStore(\"VmBondingStore\");",
                    "                        comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/bonding/all';",
                    "                        comboStore.remove(record);",
                    "",
                    "                        Ext.getCmp(\"comboBondingName\").setValue(\"\");",
                    "",
                    "",
                    "                     }",
                    "",
                    "                },",
                    "                failure: function (response) {",
                    "                    Ext.Msg.alert('Failure', response.responseText);",
                    "                }",
                    "             });",
                    "",
                    "        }",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "4c6694d0-86ea-4912-bb0b-67ada2c198d9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "msgTarget"
                ],
                "fn": "renderNicCheckbox",
                "implHandler": [
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : msgTarget,",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var data = Ext.decode(response.responseText);",
                    "            var i_max = data.length;",
                    "            var newCheckboxes = new Array();",
                    "            for( i = 0; i < i_max; i++ ) {",
                    "",
                    "                var disabledFlag = true;",
                    "                if(data[i][\"bond-group\"] == null || data[i][\"bond-group\"].length == 0) {",
                    "                    disabledFlag = false;",
                    "                }",
                    "",
                    "                if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "                    disabledFlag = true;",
                    "                }",
                    "",
                    "                component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: data[i].ethName, inputValue: data[i].ethName, disabled:disabledFlag }));",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "a6be4e96-6a36-4bb2-bc64-4d5fca96b6e4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboBondingName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboBondingNameChange",
                "implHandler": [
                    "",
                    "if(newValue !== '') {",
                    "",
                    "    this.changeBondingData(newValue);",
                    "",
                    "} else {",
                    "",
                    "    var form = Ext.getCmp(\"viewBondingForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "690e72fe-a5ef-49c9-ba23-7378a3d45390"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "msgTarget"
                ],
                "fn": "activeNicCheckbox",
                "implHandler": [
                    "component.removeAll();",
                    "",
                    "if(vmConstants.vmNicRecords == null) {",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all?filter=ethernet',",
                    "        disableCaching : true,",
                    "        waitMsg: 'Loading...',",
                    "        waitMsgTarget : msgTarget,",
                    "        success: function(response){",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                var data = Ext.decode(response.responseText);",
                    "",
                    "                vmConstants.vmNicRecords = data;",
                    "",
                    "                var i_max = data.length;",
                    "                var newCheckboxes = new Array();",
                    "                for( i = 0; i < i_max; i++ ) {",
                    "",
                    "                    var disabledFlag = false;",
                    "                    var fieldName = data[i].ethName;",
                    "                    if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "                        disabledFlag = true;",
                    "                        fieldName = \"disableCheck\";",
                    "                    }",
                    "                    component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));",
                    "                }",
                    "            }",
                    "",
                    "        }",
                    "    });",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var data = vmConstants.vmNicRecords;",
                    "",
                    "    var i_max = data.length;",
                    "    var newCheckboxes = new Array();",
                    "    for( i = 0; i < i_max; i++ ) {",
                    "",
                    "        var disabledFlag = false;",
                    "        var fieldName = data[i].ethName;",
                    "        if(data[i].ipaddr == vmConstants.selectRecord.get(\"mgraddr\")) {",
                    "            disabledFlag = true;",
                    "            fieldName = \"disableCheck\";",
                    "        }",
                    "",
                    "        component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));",
                    "    }",
                    "}",
                    ""
                ]
            },
            "designerId": "2e925cee-dadd-419c-93d6-f46d02feb686"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setNat",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "form.getForm().reset();",
                    "",
                    "if(vmConstants.vmNatRecords == null) {",
                    "",
                    "    this.setVmNatRecords();",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmNatRecords;",
                    "",
                    "    var recordData = [];",
                    "    Ext.each(datas, function (record){",
                    "",
                    "        var addFlag = true;",
                    "",
                    "        Ext.each(recordData, function(rData) {",
                    "",
                    "            if(record.rule === rData.rule) {",
                    "",
                    "                rData.ruleTypes.push(record.isSource);",
                    "",
                    "                addFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(addFlag) {",
                    "",
                    "            record.ruleTypes = [];",
                    "            record.ruleTypes.push(record.isSource);",
                    "            recordData.push(record);",
                    "",
                    "        }",
                    "",
                    "    });",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmNatModel',",
                    "        data: recordData",
                    "    });",
                    "",
                    "    Ext.getCmp(\"comboRuleName\").bindStore(store);",
                    "",
                    "}",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"ibnic\"), form.getForm().findField(\"obnic\")], form.getEl());"
                ]
            },
            "designerId": "c6f607d1-443c-4a5f-b2d0-d6bbbdcb503d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "radioValue"
                ],
                "fn": "setVmNatRecords",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/nat',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            vmConstants.vmNatRecords = datas;",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (record){",
                    "",
                    "                var addFlag = true;",
                    "",
                    "                Ext.each(recordData, function(rData) {",
                    "",
                    "                    if(record.rule === rData.rule) {",
                    "",
                    "                        rData.ruleTypes.push(record.isSource);",
                    "",
                    "                        addFlag = false;",
                    "                        return false;",
                    "                    }",
                    "                });",
                    "",
                    "                if(addFlag) {",
                    "",
                    "                    record.ruleTypes = [];",
                    "                    record.ruleTypes.push(record.isSource);",
                    "                    recordData.push(record);",
                    "",
                    "                }",
                    "",
                    "            });",
                    "",
                    "            store = Ext.create('Ext.data.Store', {",
                    "                model: 'spider.model.VmNatModel',",
                    "                data: recordData",
                    "            });",
                    "",
                    "            Ext.getCmp(\"comboRuleName\").bindStore(store);",
                    "",
                    "            if(comboValue != null) {",
                    "",
                    "                vmConstants.me.changeNatData(comboValue, radioValue);",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "334dc976-5fe4-4500-8f98-745283d8882b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "radioValue"
                ],
                "fn": "changeNatData",
                "implHandler": [
                    "var data;",
                    "var form = Ext.getCmp(\"viewNatForm\");",
                    "",
                    "if(comboValue == null || comboValue == \"\") {",
                    "    return;",
                    "}",
                    "",
                    "if(radioValue == null) {",
                    "",
                    "    var isSource = false;",
                    "    var isDestination = false;",
                    "    Ext.each(vmConstants.vmNatRecords, function(record) {",
                    "        if(record.rule === comboValue) {",
                    "",
                    "            if(record.isSource) {",
                    "                isSource = true;",
                    "",
                    "                data = record;",
                    "",
                    "            } else {",
                    "                isDestination = true;",
                    "",
                    "                if(isSource == false) {",
                    "                    data = record;",
                    "                }",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    Ext.getCmp(\"natRuleSource\").setDisabled(!isSource);",
                    "    Ext.getCmp(\"natRuleDestination\").setDisabled(!isDestination);",
                    "",
                    "    if(isSource) {",
                    "        Ext.getCmp(\"natRuleSource\").setValue(true);",
                    "",
                    "    } else {",
                    "        Ext.getCmp(\"natRuleDestination\").setValue(true);",
                    "",
                    "    }",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var isSource = (radioValue == \"source\" ? true : false);",
                    "    Ext.each(vmConstants.vmNatRecords, function(record) {",
                    "",
                    "        if(record.rule === comboValue && record.isSource === isSource) {",
                    "            data = record;",
                    "        }",
                    "    });",
                    "",
                    "    form.getForm().reset();",
                    "",
                    "}",
                    "",
                    "form.getForm().setValues(data);",
                    "",
                    "form.getForm().findField(\"rulenum\").setValue(data.rule);",
                    "",
                    "if(data.isSource) {",
                    "",
                    "    form.getForm().findField(\"ruletype\").setValue(\"source\");",
                    "    form.getForm().findField(\"ibnic\").setDisabled(true);",
                    "    form.getForm().findField(\"obnic\").setDisabled(false);",
                    "",
                    "} else {",
                    "",
                    "    form.getForm().findField(\"ruletype\").setValue(\"destination\");",
                    "    form.getForm().findField(\"ibnic\").setDisabled(false);",
                    "    form.getForm().findField(\"obnic\").setDisabled(true);",
                    "",
                    "}",
                    "",
                    "form.getForm().findField(\"ibnic\").setValue(data[\"inbound-interface\"]);",
                    "form.getForm().findField(\"obnic\").setValue(data[\"outbound-interface\"]);",
                    "",
                    "if(data.source != null) {",
                    "    form.getForm().findField(\"srcaddr\").setValue(data.source.address);",
                    "    form.getForm().findField(\"srcport\").setValue(data.source.port);",
                    "}",
                    "",
                    "if(data.destination != null) {",
                    "    form.getForm().findField(\"destaddr\").setValue(data.destination.address);",
                    "    form.getForm().findField(\"destport\").setValue(data.destination.port);",
                    "}",
                    "",
                    "if(data.translation != null) {",
                    "",
                    "    if(data.translation.address == \"masquerade\") {",
                    "        form.getForm().findField(\"masquerade\").setValue(true);",
                    "    } else {",
                    "        form.getForm().findField(\"transaddr\").setValue(data.translation.address);",
                    "        form.getForm().findField(\"transport\").setValue(data.translation.port);",
                    "    }",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "aff9685f-3150-4feb-a942-6d54db9a8b9b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "components",
                    "msgTarget"
                ],
                "fn": "renderNicComboBox",
                "implHandler": [
                    "",
                    "var store;",
                    "",
                    "if(vmConstants.vmIfAllRecords == null) {",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get(\"id\") + '/if/_all',",
                    "        disableCaching : true,",
                    "        waitMsg: 'Loading...',",
                    "        waitMsgTarget : msgTarget,",
                    "        success: function(response){",
                    "",
                    "            if(response.status == 200) {",
                    "",
                    "                var datas = Ext.decode(response.responseText);",
                    "",
                    "                vmConstants.vmIfAllRecords = datas;",
                    "",
                    "                store = Ext.create('Ext.data.Store', {",
                    "                    model: 'spider.model.VmNicModel',",
                    "                    data: datas",
                    "                });",
                    "",
                    "                Ext.each(components, function(component) {",
                    "",
                    "                    component.bindStore(store);",
                    "                });",
                    "            }",
                    "",
                    "        }",
                    "    });",
                    "",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmIfAllRecords;",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmNicModel',",
                    "        data: datas",
                    "    });",
                    "",
                    "    Ext.each(components, function(component) {",
                    "",
                    "        component.bindStore(store);",
                    "    });",
                    "}",
                    ""
                ]
            },
            "designerId": "035b8573-446f-4229-b744-6dff74471b27"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmNatWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddNatWindow\");",
                    "popWindow.show();",
                    "",
                    "Ext.getCmp(\"addNatForm\").getForm().findField(\"ruletype\").setValue(\"source\");"
                ]
            },
            "designerId": "bc0d373d-41ca-46d8-af9f-4131671eda22"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMNat",
                "implHandler": [
                    "var addNatForm = Ext.getCmp(\"addNatForm\");",
                    "var formData = addNatForm.getForm().getFieldValues();",
                    "",
                    "if(addNatForm.isValid()) {",
                    "",
                    "    if(formData.masquerade == false) {",
                    "        formData.masquerade = \"\";",
                    "    }",
                    "",
                    "    if(formData.disable == false) {",
                    "        formData.disable = \"\";",
                    "    }",
                    "",
                    "    if(formData.exclude == false) {",
                    "        formData.exclude = \"\";",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addNatForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addNatForm.up('window').close();",
                    "",
                    "                    Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "                    vmConstants.me.setVmNatRecords();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "069d2f00-14a6-4c1c-8f85-7208091dbc8e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboRuleName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboRuleNameChange",
                "implHandler": [
                    "",
                    "if(newValue !== '') {",
                    "",
                    "    var form = Ext.getCmp(\"viewNatForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').show();",
                    "    form.down('#deleteBtn').show();",
                    "",
                    "    this.changeNatData(newValue);",
                    "",
                    "} else {",
                    "",
                    "    var form = Ext.getCmp(\"viewNatForm\");",
                    "    form.getForm().reset();",
                    "",
                    "    form.down('#saveBtn').hide();",
                    "    form.down('#deleteBtn').hide();",
                    "",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "2153ecc4-94ce-4e5e-830b-020470fb6d8b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMNat",
                "implHandler": [
                    "var viewNatForm = Ext.getCmp(\"viewNatForm\");",
                    "var formData = viewNatForm.getForm().getFieldValues();",
                    "",
                    "if(viewNatForm.isValid()) {",
                    "",
                    "    if(formData.masquerade == false) {",
                    "        formData.masquerade = \"\";",
                    "    }",
                    "",
                    "    if(formData.disable == false) {",
                    "        formData.disable = \"\";",
                    "    }",
                    "",
                    "    if(formData.exclude == false) {",
                    "        formData.exclude = \"\";",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewNatForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    viewNatForm.getForm().reset();",
                    "                    vmConstants.me.setVmNatRecords(formData.rulenum, formData.ruletype);",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "669c9dcd-5300-4ac9-bd9e-920ac6519770"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMNat",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 NAT 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var viewNatForm = Ext.getCmp(\"viewNatForm\");",
                    "        var formData = viewNatForm.getForm().getFieldValues();",
                    "",
                    "        var sendData = {",
                    "            \"rulenum\"\t\t: formData.rulenum,",
                    "            \"ruletype\"\t\t: formData.ruletype",
                    "        };",
                    "",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/nat\",",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : viewNatForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        Ext.getCmp(\"comboRuleName\").setValue(\"\");",
                    "                        viewNatForm.getForm().reset();",
                    "                        vmConstants.me.setVmNatRecords();",
                    "",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText);",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "61f358ab-b5c2-4cb3-878d-40e5c021c775"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setHttpsSsh",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewHttpsSshForm\");",
                    "",
                    "form.getForm().reset();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/remote',",
                    "    method : \"GET\",",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (data){",
                    "                ",
                    "                if(data.service === \"https\") {",
                    "                    ",
                    "                    form.getForm().findField(\"httpsenable\").setValue(true);",
                    "                    form.getForm().findField(\"httpsaddr\").setValue(data[\"listen-address\"]);",
                    "                    ",
                    "                } else if(data.service === \"ssh\") {",
                    "                    ",
                    "                    form.getForm().findField(\"sshallow\").setValue(data[\"allow-root\"]);",
                    "                    form.getForm().findField(\"sshaddr\").setValue(data[\"listen-address\"]);",
                    "                    form.getForm().findField(\"sshport\").setValue(data[\"port\"]);",
                    "                    ",
                    "                }",
                    "",
                    "            });",
                    "",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "454a2b36-3d50-4504-a535-e2a96fd5cfd6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveHttpsSsh",
                "implHandler": [
                    "var viewHttpsSshForm = Ext.getCmp(\"viewHttpsSshForm\");",
                    "var formData = viewHttpsSshForm.getForm().getFieldValues();",
                    "",
                    "var sendData = {",
                    "      httpsenable : formData.httpsenable,",
                    "      httpsaddr : formData.httpsaddr",
                    "    };",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/remote\",",
                    "    method: \"PUT\",",
                    "    headers : {",
                    "        \"Content-Type\" : \"application/json\"",
                    "    },",
                    "    waitMsg: 'Saving Data...',",
                    "    waitMsgTarget : viewHttpsSshForm.getEl(),",
                    "    jsonData: sendData,",
                    "    success: function (response) {",
                    "        ",
                    "        if(response.status == 200) {",
                    "            ",
                    "            Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "                ",
                    "                vmConstants.me.setHttpsSsh();",
                    "                ",
                    "            });",
                    "            ",
                    "        }",
                    "        ",
                    "    },",
                    "    failure: function (response) {",
                    "        Ext.Msg.alert('Failure', response.responseText);",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "2de5f3db-8fc0-433f-b124-4d5895ac424a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setFirewall",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "",
                    "Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "",
                    "form.getForm().reset();",
                    "",
                    "if(vmConstants.vmFirewallRecords == null) {",
                    "",
                    "    this.setVmFirewallRecords();",
                    "",
                    "} else {",
                    "",
                    "    var datas = vmConstants.vmFirewallRecords;",
                    "",
                    "    var recordData = [];",
                    "    Ext.each(datas, function (record){",
                    "",
                    "        var addFlag = true;",
                    "",
                    "        Ext.each(recordData, function(rData) {",
                    "",
                    "            if(record.name === rData.name) {",
                    "",
                    "                addFlag = false;",
                    "                return false;",
                    "            }",
                    "        });",
                    "",
                    "        if(addFlag) {",
                    "            recordData.push(record);",
                    "        }",
                    "",
                    "    });",
                    "",
                    "    store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmFirewallModel',",
                    "        data: recordData",
                    "    });",
                    "",
                    "    Ext.getCmp(\"comboFirewallName\").bindStore(store);",
                    "    Ext.getCmp(\"comboFirewallRuleName\").getStore().removeAll();",
                    "",
                    "}",
                    "",
                    "this.renderNicComboBox([form.getForm().findField(\"ethernet\")], form.getEl());"
                ]
            },
            "designerId": "60900d50-8f97-4a53-b910-e62f77fd8de5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboValue",
                    "ruleValue"
                ],
                "fn": "setVmFirewallRecords",
                "implHandler": [
                    "var store;",
                    "var form = Ext.getCmp(\"viewFirewallForm\").up('panel');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get(\"id\") + '/firewall/all',",
                    "    disableCaching : true,",
                    "    waitMsg: 'Loading...',",
                    "    waitMsgTarget : form.getEl(),",
                    "    success: function(response){",
                    "",
                    "        if(response.status == 200) {",
                    "",
                    "            var datas = Ext.decode(response.responseText);",
                    "",
                    "            vmConstants.vmFirewallRecords = datas;",
                    "",
                    "            var recordData = [];",
                    "            Ext.each(datas, function (record){",
                    "",
                    "                var addFlag = true;",
                    "",
                    "                Ext.each(recordData, function(rData) {",
                    "",
                    "                    if(record.name === rData.name) {",
                    "                        ",
                    "                        addFlag = false;",
                    "                        return false;",
                    "                    }",
                    "                });",
                    "",
                    "                if(addFlag) {",
                    "                    recordData.push(record);",
                    "                }",
                    "",
                    "            });",
                    "",
                    "            store = Ext.create('Ext.data.Store', {",
                    "                model: 'spider.model.VmFirewallModel',",
                    "                data: recordData",
                    "            });",
                    "",
                    "            Ext.getCmp(\"comboFirewallName\").bindStore(store);",
                    "            Ext.getCmp(\"comboFirewallRuleName\").getStore().removeAll();",
                    "",
                    "            if(comboValue != null) {",
                    "",
                    "                //vmConstants.me.changeNatData(comboValue, radioValue);",
                    "",
                    "            }",
                    "        }",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "3c6d891f-e66c-4d83-82ce-0afac144f486"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "firewallName",
                    "ruleName"
                ],
                "fn": "changeFirewallData",
                "implHandler": [
                    "var data;",
                    "var form = Ext.getCmp(\"viewFirewallForm\");",
                    "",
                    "if(firewallName == \"\" || ruleName == \"\") {",
                    "    return;",
                    "}",
                    "",
                    "Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "    ",
                    "    if(record.name === firewallName && record.rule === ruleName) {",
                    "        data = record;",
                    "    }",
                    "});",
                    "",
                    "form.getForm().reset();",
                    "form.getForm().setValues(data);",
                    "",
                    "if(record.source_address.indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"source_address\").setValue(record.source_address.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_address\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    "",
                    "if(record.destination_address.indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"destination_address\").setValue(record.destination_address.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"destination_address\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    "",
                    "if(record.source_port.indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"source_port\").setValue(record.source_port.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_port\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    "",
                    "if(record.destination_port.indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"destination_port\").setValue(record.destination_port.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"destination_port\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    "",
                    "if(record.protocol.indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"protocol\").setValue(record.protocol.replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"protocol\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    "",
                    "if(record[\"source_mac-address\"].indexOf(\"!\") === 0) {",
                    "    ",
                    "    form.getForm().findField(\"source_mac-address\").setValue(record[\"source_mac-address\"].replace(\"!\",\"\"));",
                    "    form.getForm().findField(\"source_mac-address\").nextNode('checkboxfield').setValue(true);",
                    "    ",
                    "}",
                    ""
                ]
            },
            "designerId": "034ae7f3-4fea-49da-adf6-f7fc4c847234"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "popVmFirewallWindow",
                "implHandler": [
                    "//VM Host 생성 팝업 호출",
                    "var popWindow = Ext.create(\"widget.AddFirewallWindow\");",
                    "popWindow.show();"
                ]
            },
            "designerId": "fbed4b8b-d773-4f07-bb12-ed4971a8e592"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "createVMFirewall",
                "implHandler": [
                    "var addFirewallForm = Ext.getCmp(\"addFirewallForm\");",
                    "var formData = addFirewallForm.getForm().getFieldValues();",
                    "",
                    "if(addFirewallForm.isValid()) {",
                    "    ",
                    "    if(formData.source_address == \"\" &&",
                    "          formData.destination_address == \"\" &&",
                    "          formData.source_port == \"\" &&",
                    "          formData.destination_port == \"\" &&",
                    "          formData.protocol == \"\" ) {",
                    "        ",
                    "        Ext.Msg.alert('Failure', \"Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "        ",
                    "    }",
                    "",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.source_address = \"!\" + formData.source_address;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "    ",
                    "    var chkField = addFirewallForm.getForm().findField(\"destination_address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.destination_address = \"!\" + formData.destination_address;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "    ",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_port\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.source_port = \"!\" + formData.source_port;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "    ",
                    "    var chkField = addFirewallForm.getForm().findField(\"destination_port\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.destination_port = \"!\" + formData.destination_port;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "    ",
                    "    var chkField = addFirewallForm.getForm().findField(\"protocol\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.protocol = \"!\" + formData.protocol;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "    ",
                    "    var chkField = addFirewallForm.getForm().findField(\"source_mac-address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData[\"source_mac-address\"] = \"!\" + formData[\"source_mac-address\"];",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + formData.name,",
                    "         method: \"POST\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : addFirewallForm.getEl(),",
                    "         jsonData: formData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){",
                    "",
                    "                    addFirewallForm.up('window').close();",
                    "",
                    "                    Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "                    Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "                    vmConstants.me.setVmFirewallRecords();",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "f18a757f-bfa8-4e54-8207-e5a7149b9f8e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboFirewallName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboFirewallNameChange",
                "implHandler": [
                    "var firewallName = newValue,",
                    "    ruleField = field.up('form').getForm().findField(\"comboFirewallRuleName\");",
                    "",
                    "ruleField.getStore().removeAll();",
                    "",
                    "if(firewallName != \"\") {",
                    "    ",
                    "    var recordData = [];",
                    "    Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "        if(record.name === firewallName) {",
                    "            ",
                    "            records.push(record);",
                    "        }",
                    "    });",
                    "    ",
                    "    var store = Ext.create('Ext.data.Store', {",
                    "        model: 'spider.model.VmFirewallModel',",
                    "        data: recordData",
                    "    });",
                    "    ",
                    "    ruleField.bindStore(store);",
                    "    ",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "221de21e-ebfb-4640-a16f-bec842bc0217"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboFirewallRuleName",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onComboFirewallRuleNameChange",
                "implHandler": [
                    "var firewall = field.up('form').getForm().findField(\"comboFirewallName\"),",
                    "    ruleName = newValue;",
                    "",
                    "if(firewall.getValue() != \"\" && ruleName != \"\") {",
                    "    ",
                    "    changeFirewallData(firewall.getValue(), ruleName);",
                    "    ",
                    "}",
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "726c7544-e8a4-4e0b-8c90-03a4ef822cfe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVMFirewall",
                "implHandler": [
                    "",
                    "var viewFirewallForm = Ext.getCmp(\"viewFirewallForm\");",
                    "var formData = viewFirewallForm.getForm().getFieldValues();",
                    "",
                    "if(viewFirewallForm.isValid()) {",
                    "",
                    "    if(formData.source_address == \"\" &&",
                    "          formData.destination_address == \"\" &&",
                    "          formData.source_port == \"\" &&",
                    "          formData.destination_port == \"\" &&",
                    "          formData.protocol == \"\" ) {",
                    "",
                    "        Ext.Msg.alert('Failure', \"Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.\");",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.source_address = \"!\" + formData.source_address;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"destination_address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.destination_address = \"!\" + formData.destination_address;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_port\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.source_port = \"!\" + formData.source_port;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"destination_port\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.destination_port = \"!\" + formData.destination_port;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"protocol\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData.protocol = \"!\" + formData.protocol;",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var chkField = viewFirewallForm.getForm().findField(\"source_mac-address\").nextNode('checkboxfield');",
                    "    if(chkField.getValue() === true) {",
                    "        formData[\"source_mac-address\"] = \"!\" + formData[\"source_mac-address\"];",
                    "        delete formData[chkField.getName()];",
                    "    }",
                    "",
                    "    var sendData = {};",
                    "    sendData.after = formData;",
                    "        ",
                    "    Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "        ",
                    "        if(record.name === formData.name && record.rule === formData.rule) {",
                    "            sendData.before = record;",
                    "        }",
                    "    });",
                    "",
                    "    Ext.Ajax.request({",
                    "         url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + formData.name,",
                    "         method: \"PUT\",",
                    "         headers : {",
                    "             \"Content-Type\" : \"application/json\"",
                    "         },",
                    "         waitMsg: 'Saving Data...',",
                    "         waitMsgTarget : viewFirewallForm.getEl(),",
                    "         jsonData: sendData,",
                    "         success: function (response) {",
                    "",
                    "             if(response.status == 200) {",
                    "",
                    "                Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){",
                    "",
                    "                    viewFirewallForm.getForm().reset();",
                    "                    vmConstants.me.setVmFirewallRecords(formData.name, formData.rule);",
                    "",
                    "                });",
                    "",
                    "             }",
                    "",
                    "        },",
                    "        failure: function (response) {",
                    "            Ext.Msg.alert('Failure', response.responseText);",
                    "        }",
                    "     });",
                    "",
                    "}",
                    ""
                ]
            },
            "designerId": "dbc25db6-778d-4b93-afc1-8fd90b280d38"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteVMFirewall",
                "implHandler": [
                    "Ext.MessageBox.confirm('Confirm', '해당 Firewall 정보를 삭제하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        var viewFirewallForm = Ext.getCmp(\"viewFirewallForm\");",
                    "        var formData = viewFirewallForm.getForm().getFieldValues();",
                    "",
                    "        var sendData;",
                    "        Ext.each(vmConstants.vmFirewallRecords, function(record) {",
                    "            ",
                    "            if(record.name === formData.name && record.rule === formData.rule) {",
                    "                sendData = record;",
                    "            }",
                    "        });",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.apiUrlPrefix + \"nfv/\" + vmConstants.selectRecord.get(\"id\") + \"/firewall/\" + formData.name,",
                    "            method: \"DELETE\",",
                    "            headers : {",
                    "                \"Content-Type\" : \"application/json\"",
                    "            },",
                    "            waitMsg: 'Delete Data...',",
                    "            waitMsgTarget : viewFirewallForm.getEl(),",
                    "            jsonData: sendData,",
                    "            success: function (response) {",
                    "",
                    "                if(response.status == 200) {",
                    "",
                    "                    Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){",
                    "",
                    "                        Ext.getCmp(\"comboFirewallName\").setValue(\"\");",
                    "                        Ext.getCmp(\"comboFirewallRuleName\").setValue(\"\");",
                    "                        vmConstants.me.setVmFirewallRecords();",
                    "",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "            },",
                    "            failure: function (response) {",
                    "                Ext.Msg.alert('Failure', response.responseText);",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "b5e137f8-6bf6-49a0-ba95-858bea7511b8"
        }
    ]
}