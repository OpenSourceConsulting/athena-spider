/*
 * File: app/controller/MonitoringController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.MonitoringController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerPanel'
        }
    ],

    onListMonitoringCheckMenuPanelCheckChange: function(node, checked, eOpts) {

        clearInterval(monitoringConstants.chartInterval);
        this.showMonitoringImg();

        monitoringConstants.chartInterval = setInterval(function() {

            monitoringConstants.me.showMonitoringImg();

        }, 5000);

    },

    init: function(application) {
                var monitoring = this;

                //Dashboard Menu Constants
                Ext.define('monitoringConstants', {
                    singleton: true,
                    me : monitoring,

                    checkVm : [],
                    width : 100,
                    height : 100,
                    chartInterval : null
                });

        this.control({
            "#listMonitoringCheckMenuPanel": {
                checkchange: this.onListMonitoringCheckMenuPanelCheckChange
            }
        });
    },

    initMonitoring: function() {

        var center = Ext.getCmp("lnbLocationCombo").getValue();
        var checkTreeData = [];

        Ext.each(menuConstants.hostRecord, function(host, index) {

            if(host.location == center) {

                host.id = host._id;
                host.text = host.name;
                host.icon = 'resources/images/icons/server.png';
                host.type = 'vmhost';
                host.expanded = true;

                var vmList = [];
                Ext.each(menuConstants.vmRecord, function(vm) {

                    if(host._id == vm.vmhost) {

                        vm.id = vm._id;
                        vm.text = vm.vmname;
                        vm.icon = 'resources/images/icons/host.png';
                        vm.type = 'vm';
                        vm.leaf = true;

                        vm.checked = false;
                        Ext.each(monitoringConstants.checkVm, function(cVm){

                            if(cVm.get("id") === vm.id) {
                                vm.checked = true;
                            }
                        });

                        if(vm.interim === true) {
                            vm.cls = "node-red";
                            delete vm.checked;
                        }

                        vmList.push(vm);
                    }
                });

                if(vmList.length > 0) {

                    host.leaf = false;
                    host.children = vmList;

                } else {

                    host.leaf = true;

                }

                checkTreeData.push(host);

            }

        });

        var monitoringTreeStore = Ext.create('Ext.data.TreeStore', {
            storeId: 'monitoringTreeStore',
            model: 'spider.model.VmHostModel',
            root: {
                expanded: true,
                text: 'Server List',
                icon : '',
                type : 'root',
                children: checkTreeData
            }
        });

        Ext.getCmp("listMonitoringCheckMenuPanel").bindStore(monitoringTreeStore);

        clearInterval(monitoringConstants.chartInterval);
        this.showMonitoringImg();

        monitoringConstants.chartInterval = setInterval(function() {

            monitoringConstants.me.showMonitoringImg();

        }, 5000);

    },

    showMonitoringImg: function(cWidth, cHeight) {

        var centerContainer = this.getCenterContainer();

        if (centerContainer.layout.getActiveItem().itemId !== "MonitoringPanel") {
            clearInterval(monitoringConstants.chartInterval);
            return;
        }

        if(cWidth) {

            monitoringConstants.width = cWidth-30;
            //monitoringConstants.height = cHeight;

            //nitoringConstants.width = 700;
            monitoringConstants.height = 300;

        }



        var cpuCmp = Ext.getCmp("monitoringCpuChart").down('image');
        var memoryCmp = Ext.getCmp("monitoringMemoryChart").down('image');
        var networkCmp = Ext.getCmp("monitoringNetworkChart").down('image');

        var vmRecords = Ext.getCmp("listMonitoringCheckMenuPanel").getView().getChecked();

        monitoringConstants.checkVm = vmRecords;

        var sendData = {};
        Ext.each(monitoringConstants.checkVm, function(vm){
            sendData[vm.get("id")] = "";
        });

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + "mon/graphite/totalview?timespan=10&timeunit=minutes",
            method: "POST",
            headers : {
                "Content-Type" : "application/json"
            },
            jsonData: sendData,
            success: function (response) {

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);

                    cpuCmp.setWidth(monitoringConstants.width);
                    cpuCmp.setHeight(monitoringConstants.height);

                    cpuCmp.setSrc(datas.cpu+'?dc=' + new Date().getTime());


                    memoryCmp.setWidth(monitoringConstants.width);
                    memoryCmp.setHeight(monitoringConstants.height);

                    memoryCmp.setSrc(datas.mem+'?dc=' + new Date().getTime());


                    networkCmp.setWidth(monitoringConstants.width);
                    networkCmp.setHeight(monitoringConstants.height);

                    networkCmp.setSrc(datas.nic+'?dc=' + new Date().getTime());

                }

            },
            failure: function (response) {
                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
            }
        });


    }

});
