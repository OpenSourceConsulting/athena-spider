/*
 * File: app/controller/VmManagementController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.VmManagementController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerPanel'
        }
    ],

    onVmListCycleBtnClick: function(item, e, eOpts) {
        Ext.getCmp("vmListCycleBtn").setText(item.text);

        this.getInstanceDashboard(item.code);
    },

    onNetworkInstanceTabPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        //if(newCard.title)
        if(newCard.title === "Instance Dashboard") {

            Ext.getCmp("vmDashboardReloadBtn").show();
            this.setInstanceDashboard();

        } else if(newCard.title === "NIC") {

            this.setNic();

        } else if(newCard.title === "Bonding") {

            this.setBonding();

        } else if(newCard.title === "Routing") {

            this.setRouting();

        } else if(newCard.title === "NAT") {

            this.setNat();

        } else if(newCard.title === "DHCP(Service)") {

            this.setDhcp();

        } else if(newCard.title === "HTTPS/SSH(Service)") {

            this.setHttpsSsh();

        } else if(newCard.title === "System(Service)") {

            this.setSystem();

        } else if(newCard.title === "Firewall") {

            this.setFirewall();

        } else if(newCard.title === "CLI") {

            this.setCli();
        }


        if(oldCard.title == "Instance Dashboard") {
            Ext.getCmp("vmDashboardReloadBtn").hide();
        }

        //this.changeNetworkInstanceTab()
    },

    onComboRoutingTypeChange: function(field, newValue, oldValue, eOpts) {
        if(newValue != "") {
            this.changeRoutingMethod(newValue);
        }
    },

    initVmManagement: function(record, tabIndex) {
        var vmDetailTab = Ext.getCmp("networkInstanceTabPanel");

        clearInterval(vmConstants.statusInterval);
        clearInterval(vmConstants.chartInterval);

        if(record == null) {

            Ext.getCmp("mgmtVmHostName").setValue("");
            Ext.getCmp("mgmtVmName").setValue("");

            Ext.getCmp("networkInstanceTabPanel").setActiveTab(0);

            return;
        }

        if(record.get("id") !== vmConstants.selectVmId) {

            vmConstants.vmNicRecords = null;
            vmConstants.vmNatRecords = null;
            vmConstants.vmIfAllRecords = null;
            vmConstants.vmFirewallRecords = null;

            vmConstants.selectRecord = record;
            vmConstants.selectVmId = record.get("id");

            Ext.getCmp("mgmtVmHostName").setValue(record.get("vmhostName"));
            Ext.getCmp("mgmtVmName").setValue(record.get("text"));
            Ext.getCmp("mgmtVmState").setValue("");

        }


        if(record.get("interim") == true) {

            vmDetailTab.up('panel').getEl().mask("VM Clone 후 초기작업이 수행되지 않았습니다.", "custom-loader");
            return;

        } else {

            vmDetailTab.up('panel').getEl().unmask();

            vmConstants.me.setVmStatus();

            vmConstants.statusInterval = setInterval(function() {

                vmConstants.me.setVmStatus();

            }, 10000);

            vmDetailTab.setActiveTab(11); //blank tab
        }



        if(tabIndex) {

            vmDetailTab.setActiveTab(tabIndex);

        } else {

            if(vmDetailTab.getActiveTab() === vmDetailTab.items.getAt(0)) {

                this.setInstanceDashboard();

            } else {

                vmDetailTab.setActiveTab(0);

            }

        }
    },

    setVmStatus: function() {

        var centerContainer = this.getCenterContainer();
        if (centerContainer.layout.getActiveItem().itemId !== "VmManagementPanel") {
            clearInterval(vmConstants.statusInterval);
            return;
        }

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/vm/' + vmConstants.selectRecord.get("vmhost") + "/" + vmConstants.selectRecord.get("text") + "/status",
            method : 'GET',
            disableCaching : true,
            success: function(response){

                var data = Ext.JSON.decode(response.responseText);

                if(data.length > 0) {

                    vmHostConstants.vmStatus = data[0].clone_state;

                    Ext.getCmp("mgmtVmState").setValue(data[0].state.toLowerCase());

                    if(data[0].state.toLowerCase() == 'running') {
                        Ext.getCmp('startVmBtn').setDisabled(true);
                        Ext.getCmp('stopVmBtn').setDisabled(false);
                    } else {
                        Ext.getCmp('startVmBtn').setDisabled(false);
                        Ext.getCmp('stopVmBtn').setDisabled(true);
                    }

                }

            }
        });

    },

    refreshInstanceDashboard: function() {

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'vm/refresh/' + vmConstants.selectRecord.get("id"),
            method : 'GET',
            waitMsg: 'Refresh VM...',
            waitMsgTarget : Ext.getCmp("networkInstanceTabPanel").up('panel').getEl(),
            disableCaching : true,
            success: function (response) {

                if(response.status == 200) {

                    Ext.Msg.alert('Success', 'Repository 정보 갱신 요청이 완료되었습니다.', function (){

                        vmConstants.me.setInstanceDashboard();

                    });

                }
            },
            failure: function (response) {
                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
            }
        });

    },

    init: function(application) {
                var vmMgmt = this;

                //VM Menu Constants
                Ext.define('vmConstants', {
                    singleton: true,
                    me : vmMgmt,

                    selectVmId : null,
                    selectRecord : null,

                    vmCombo : null,

                    statusInterval : null,
                    chartInterval : null,

                    initComboNic : false,
                    initComboBonding : false,
                    vmNicRecords : null,
                    vmNatRecords : null,
                    vmIfAllRecords : null,
                    vmFirewallRecords : null,
                    vmRoutingRecord : null

                });

        this.control({
            "#vmListCycleBtn menuitem": {
                click: this.onVmListCycleBtnClick
            },
            "#networkInstanceTabPanel": {
                tabchange: this.onNetworkInstanceTabPanelTabChange
            },
            "#comboRoutingType": {
                change: this.onComboRoutingTypeChange
            }
        });
    },

    setInstanceDashboard: function() {
        clearInterval(vmConstants.chartInterval);

        var viewVmForm = Ext.getCmp("viewVmForm");

        Ext.getStore("VmInterfaceStore").removeAll();

        Ext.getStore('VmCpuChartStore').removeAll();
        Ext.getStore('VmMemoryChartStore').removeAll();
        Ext.getStore('VmNetworkChartStore').removeAll();
        Ext.getStore('VmNicNetworkChartStore').removeAll();

        Ext.getCmp("inBoundCurrent").setText("N/A");
        Ext.getCmp("outBoundCurrent").setText("N/A");
        Ext.getCmp("inBoundAverage").setText("N/A");
        Ext.getCmp("outBoundAverage").setText("N/A");
        Ext.getCmp("inBoundPeak").setText("N/A");
        Ext.getCmp("outBoundPeak").setText("N/A");

        this.setInstanceDashboardChart();

        vmConstants.chartInterval = setInterval(function() {

            vmConstants.me.setInstanceDashboardChart();

        }, 5000);


        viewVmForm.getForm().reset();
        viewVmForm.getForm().waitMsgTarget = viewVmForm.getEl();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/vm/' +vmConstants.selectRecord.get("id") + '?detail=true',
            method : 'GET',
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : viewVmForm.getEl(),
            success: function(response){

                var data = Ext.JSON.decode(response.responseText);
                if(data.length > 0) {

                    var vmData = data[0];
                    var form = viewVmForm.getForm();

                    form.setValues(vmData);
                    form.findField("id").setValue(vmData._id);

                    var gridData = [];
                    var nics = [];

                    if(vmData.interfaces) {
                        var interfaceKey = Object.keys(vmData.interfaces);

                        Ext.each(interfaceKey, function(nic, nIdx) {

                            var ip = vmData.interfaces[nic].ipaddr;
                            if(ip == null) {
                                ip = "";
                            }

                            if(vmData.interfaces[nic].disable == true) {
                                ip += "(disable)";
                            }

                            nics.push({ethName : nic});

                            gridData.push({
                                name : nic,
                                ipaddr : ip,
                                macaddr : vmData.interfaces[nic].macaddr
                            });

                        });

                        nics.reverse();
                        gridData.reverse();

                        Ext.getStore("VmInterfaceStore").loadData(gridData, false);
                    }

                    vmConstants.me.setInstanceDashboardNics(nics);

                }
            }
        });

    },

    setInstanceDashboardChart: function() {

        if(vmConstants.selectRecord.get("interim") == true) {
            clearInterval(vmConstants.chartInterval);
            return;
        }

        var centerContainer = this.getCenterContainer();
        var vmDetailTab = Ext.getCmp("networkInstanceTabPanel");

        if (centerContainer.layout.getActiveItem().itemId !== "VmManagementPanel") {
            clearInterval(vmConstants.chartInterval);
            return;
        } else if(vmDetailTab.getActiveTab() !== vmDetailTab.items.getAt(0)) {
            clearInterval(vmConstants.chartInterval);
            return;
        }


        //CPU
        Ext.Ajax.request({
            url : GLOBAL.apiUrlPrefix + 'mon/graphite/cpu/' +vmConstants.selectRecord.get("id") + '?timespan=10&timeunit=minutes',
            disableCaching : true,
            failMsg : false,
            success: function(response){

                var columnData = Ext.decode(response.responseText);

                if(columnData.length > 0) {

                    var data = columnData[0];
                    var chartList = [];

                    Ext.each(data.datapoints, function (chartData, dateIdx) {
                        var chartCol = {};

                        chartCol.date = new Date(chartData.date*1000);
                        if(data.target.indexOf("user") >= 0) {
                            chartCol.user_cpu = chartData.value;
                        } else {
                            chartCol.system_cpu = chartData.value;
                        }


                        for(var i=1; i<columnData.length; i++) {
                            if(columnData[i].target.indexOf("user") >= 0) {
                                chartCol.user_cpu = columnData[i].datapoints[dateIdx].value;
                            } else {
                                chartCol.system_cpu = columnData[i].datapoints[dateIdx].value;
                            }
                        }

                        if(chartCol.user_cpu != null && chartCol.system_cpu != null) {
                            chartCol.user_cpu += chartCol.system_cpu;
                            chartList.push(chartCol);
                        }
                    });

                    Ext.getStore('VmCpuChartStore').loadData(chartList, false);
                }
            }
        });

        //Memory
        Ext.Ajax.request({
            url : GLOBAL.apiUrlPrefix + 'mon/graphite/memory/' +vmConstants.selectRecord.get("id") + '?timespan=10&timeunit=minutes',
            disableCaching : true,
            failMsg : false,
            success: function(response){

                var columnData = Ext.decode(response.responseText);
                if(columnData.length > 0) {

                    var data = columnData[0];

                    // Get the quality field from record
                    // Update chart with data
                    var chartList = [];
                    Ext.each(data.datapoints, function (chartData) {
                        var chartCol = {};
                        chartCol.memory = chartData.value;
                        chartCol.date = new Date(chartData.date*1000);

                        if(chartCol.memory != null) {
                            chartList.push(chartCol);
                        }

                    });

                    Ext.getStore('VmMemoryChartStore').loadData(chartList, false);
                }
            }
        });

        //Network
        Ext.Ajax.request({
            url : GLOBAL.apiUrlPrefix + 'mon/graphite/interface/' +vmConstants.selectRecord.get("id") + '?timespan=10&timeunit=minutes',
            disableCaching : true,
            failMsg : false,
            success: function(response){

                var columnData = Ext.decode(response.responseText);

                if(columnData.length > 0) {

                    var data = columnData[0];
                    var chartList = [];
                    var colNames = [];
                    /*
                    for(var i=0; i<2; i++) {
                        var name = columnData[i].target;
                        //Ext.getCmp('networkChart').series.getAt(i).setTitle(name.substring(name.substring(0, name.lastIndexOf('.')).lastIndexOf('.'), name.length));
                        Ext.getCmp('networkChart').series.getAt(i).setTitle(name.substring(name.lastIndexOf('.')+1, name.length));
                    }
                    */
                    Ext.each(data.datapoints, function (chartData, dateIdx) {
                        var chartCol = {};
                        var txValue = 0;
                        var rxValue = 0;

                        chartCol.date = new Date(chartData.date*1000);

                        if(data.target.indexOf(".tx") > 0) {
                            txValue += chartData.value;
                        } else {
                            rxValue += chartData.value;
                        }

                        for(var i=1; i<columnData.length; i++) {


                            if(columnData[i].target.indexOf(".tx") > 0) {
                                txValue += columnData[i].datapoints[dateIdx].value;
                            } else {
                                rxValue += columnData[i].datapoints[dateIdx].value;
                            }

                            chartCol["col_0"] = txValue;
                            chartCol["col_1"] = rxValue;

                        }

                        chartList.push(chartCol);

                    });

                    Ext.getStore('VmNetworkChartStore').loadData(chartList, false);
                }
            }
        });

    },

    setInstanceDashboardNics: function(nics) {

        Ext.getCmp("comboNetworkChartNicName").setValue("");
        Ext.getCmp("comboNetworkChartTime").setValue("");

        var store = Ext.create('Ext.data.Store', {
            fields: ['ethName'],
            data: nics
        });

        Ext.getCmp("comboNetworkChartNicName").bindStore(store);
        Ext.getCmp("comboNetworkChartTime").setValue("1");

        if(nics.length > 0)
            Ext.getCmp("comboNetworkChartNicName").setValue(nics[0].ethName);

    },

    changeNicNetworkChart: function(nicName, time) {
        if(vmConstants.selectRecord.get("interim") == true) {
            return;
        }


        Ext.Ajax.request({
            url : GLOBAL.apiUrlPrefix + 'mon/graphite/interface/' +vmConstants.selectRecord.get("id") + '?nic='+nicName+'&timespan='+time+'&timeunit=minutes',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);

                if(columnData.length > 0) {

                    var data = columnData[0];
                    var chartList = [];

                    var txSum = 0, rxSum = 0, maxTx = 0, maxRx = 0;

                    Ext.each(data.datapoints, function (chartData, dateIdx) {
                        var chartCol = {};

                        chartCol.date = new Date(chartData.date*1000);
                        if(data.target.indexOf("tx") >= 0) {
                            chartCol.tx_network = chartData.value;
                        } else {
                            chartCol.rx_network = chartData.value;
                        }


                        for(var i=1; i<columnData.length; i++) {
                            if(columnData[i].target.indexOf("tx") >= 0) {
                                chartCol.tx_network = columnData[i].datapoints[dateIdx].value;
                            } else {
                                chartCol.rx_network = columnData[i].datapoints[dateIdx].value;
                            }
                        }

                        if(chartCol.tx_network != null && chartCol.rx_network != null) {
                            txSum += chartCol.tx_network;
                            rxSum += chartCol.rx_network;

                            if(maxTx < chartCol.tx_network)
                                maxTx = chartCol.tx_network;

                            if(maxRx < chartCol.rx_network)
                                maxRx = chartCol.rx_network;

                            chartList.push(chartCol);
                        }
                    });

                    if(time > 1440) {
                        Ext.getCmp("interfaceChart").axes.items[1].label.renderer = Ext.util.Format.dateRenderer('Y-m-d H:i:s');
                    } else {
                        Ext.getCmp("interfaceChart").axes.items[1].label.renderer = Ext.util.Format.dateRenderer('H:i:s');
                    }

                    Ext.getStore('VmNicNetworkChartStore').loadData(chartList, false);

                    if(chartList.length > 0) {
                        Ext.getCmp("inBoundCurrent").setText((chartList[chartList.length-1].rx_network).toFixed(0) + " (bps)");
                        Ext.getCmp("outBoundCurrent").setText((chartList[chartList.length-1].tx_network).toFixed(0) + " (bps)");
                        Ext.getCmp("inBoundAverage").setText((rxSum / chartList.length).toFixed(0) + " (bps)");
                        Ext.getCmp("outBoundAverage").setText((txSum / chartList.length).toFixed(0) + " (bps)");
                        Ext.getCmp("inBoundPeak").setText(maxRx.toFixed(0) + " (bps)");
                        Ext.getCmp("outBoundPeak").setText(maxTx.toFixed(0) + " (bps)");
                    }


                }
            }
        });

    },

    setNic: function() {
        Ext.getCmp("viewNicForm").up('fieldset').down('#saveBtn').hide();

        Ext.getCmp("viewNicForm").getForm().reset();

        var gridStore = Ext.getStore("VmNicStore");
        gridStore.removeAll();
        gridStore.getProxy().url = GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet';
        gridStore.load();

        Ext.getCmp("viewNicForm").up('fieldset').hide();

    },

    changeNicData: function(record) {
        var form = Ext.getCmp("viewNicForm").getForm();
        form.reset();

        Ext.getCmp("viewNicForm").getForm().loadRecord(record);
        Ext.getCmp("viewNicForm").up('fieldset').down('#saveBtn').show();

        Ext.getCmp("displayNicName").setValue(record.get("ethName"));

        Ext.getCmp("viewNicForm").up('fieldset').show();

        //VM의 Mgr Address 와 NIC의 IP Address 가 같을 경우 수정 불가능
        if(record.get("ipaddr") == vmConstants.selectRecord.get("mgraddr")) {
            Ext.getCmp("viewNicForm").up('fieldset').down('#saveBtn').hide();
        }
        var readOnlyFlag = false;
        if(record.get("address") == "dhcp") {
            readOnlyFlag = true;
        }


        Ext.getCmp("checkNicDhcp").setValue(readOnlyFlag);

        if(record.get("disable") == true) {
            Ext.getCmp("checkNicDisable").setValue(false);
        } else {
            Ext.getCmp("checkNicDisable").setValue(true);
        }

        form.findField("address").setReadOnly(readOnlyFlag);
        form.findField("ipv6_address").setReadOnly(readOnlyFlag);

    },

    saveNic: function(button) {

        var comboValue = Ext.getCmp("displayNicName").getValue(),
            grid = Ext.getCmp("viewVmNicGrid"),
            record = grid.getSelectionModel().getSelection()[0];


        var viewNicForm = Ext.getCmp("viewNicForm");
        var formData = viewNicForm.getForm().getFieldValues();

        if(viewNicForm.isValid()) {

            if(record.get("ipaddr") != vmConstants.selectRecord.get("mgraddr") && record.get("address") != vmConstants.selectRecord.get("mgraddr") &&
                formData.address == vmConstants.selectRecord.get("mgraddr")) {

                Ext.Msg.alert('Failure', "NIC의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var sendData = {};
            //sendData.after = viewNicForm.getForm().getFieldValues();

            sendData.after = formData;
            sendData.after.disable = (!Ext.getCmp("checkNicDisable").getValue());
            sendData.after.disable = (!Ext.getCmp("checkNicDisable").getValue());

            sendData.before = {
                "address"		: (record.get("address") == null ? "" : record.get("address")),
               // "ipaddr"		: (record.get("ipaddr") == null ? "" : record.get("ipaddr")),
                "ipv6_address"	: (record.get("ipv6_address") == null ? "" : record.get("ipv6_address")),
                "duplex"		: (record.get("duplex") == null ? "" : record.get("duplex")),
                "hw-id"			: (record.get("hw-id") == null ? "" : record.get("hw-id")),
                "speed"			: (record.get("speed") == null ? "" : record.get("speed")),
                "mtu"			: (record.get("mtu") == null ? "" : record.get("mtu")),
                "config"		: (record.get("config") == null ? "" : record.get("config")),
                "ethName"		: (record.get("ethName") == null ? "" : record.get("ethName")),
                "smp_affinity"	: (record.get("smp_affinity") == null ? "" : record.get("smp_affinity")),
                "disable"		: (record.get("disable") == null ? "" : record.get("disable"))
            };

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/if/" + comboValue,
                method: "PUT",
                headers : {
                    "Content-Type" : "application/json"
                },
                waitMsg: 'Saving Data...',
                jsonData: sendData,
                success: function (response) {

                    if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            Ext.Ajax.request({
                                url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/' + comboValue,
                                waitMsg: 'Loading...',
                                disableCaching : true,
                                success: function(response){

                                    var columnData = Ext.decode(response.responseText);
                                    record.set({
                                        "address"		: "",
                                        "ipv6_address"	: "",
                                        "duplex"		: "",
                                        "hw-id"			: "",
                                        "speed"			: "",
                                        "mtu"			: "",
                                        "config"		: "",
                                        "ethName"		: "",
                                        "smp_affinity"	: "",
                                        "disable"		: ""
                                    });

                                    if(columnData.length > 0) {

                                        record.set(columnData[0]);
                                        vmConstants.me.changeNicData(record);
                                    }
                                }
                            });
                        });

                    }
                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
            });

        }

    },

    setBonding: function() {

        Ext.getCmp("viewBondingForm").up('fieldset').down('#saveBtn').hide();
        Ext.getCmp("viewBondingForm").up('fieldset').hide();

        Ext.getCmp("viewBondingForm").getForm().reset();

        var gridStore = Ext.getStore("VmBondingStore");
        gridStore.removeAll();

        Ext.getCmp("viewBondingForm").up('panel').getEl().mask("Loading", "loading");

        gridStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/bonding/all';
        gridStore.load({
            callback : function(records, options, success) {

                Ext.getCmp("viewBondingForm").up('panel').getEl().unmask();

                vmConstants.me.activeNicCheckbox(Ext.getCmp("viewBondingForm").down('#bondingNICGroup'), Ext.getCmp("viewBondingForm").up('panel').getEl());
            }
        });


    },

    changeBondingData: function(record) {
        var form = Ext.getCmp("viewBondingForm");
        form.getForm().reset();

        form.getForm().loadRecord(record);
        form.up('fieldset').down('#saveBtn').show();

        Ext.getCmp("displayBondingName").setValue(record.get("ethName"));

        form.up('fieldset').show();

        var dhcpFlag = false;
        if(record.get("address") == "dhcp") {
            dhcpFlag = true;
        }
        Ext.getCmp("checkBondigDhcp").setValue(dhcpFlag);

        if(record.get("disable") == true) {
            Ext.getCmp("checkBondingDisable").setValue(false);
        } else {
            Ext.getCmp("checkBondingDisable").setValue(true);
        }

        var nics = record.get("ethernets");
        var disables = record.get("disables");

        var checks = form.down('#bondingNICGroup').getBoxes();

        Ext.each(checks, function (checkBox) {

            var disableFlag = false;

            Ext.each(disables, function(disable) {
                if(checkBox.getName() == disable) {
                    disableFlag = true;
                }
            });

            if(checkBox.getName() == "disableCheck") {
                disableFlag = true;
            }

            checkBox.setDisabled(disableFlag);

            Ext.each(nics, function(nic) {
                if(checkBox.getName() == nic) {
                    checkBox.setValue(true);
                }
            });

        });

    },

    popVmBondingWindow: function() {
        //VM Host 생성 팝업 호출

        var popWindow = Ext.create("widget.AddBondingWindow");
        popWindow.show();
    },

    createVMBonding: function(button) {
        var addBondingForm = Ext.getCmp("addBondingForm");
        var formData = addBondingForm.getForm().getFieldValues();

        if(addBondingForm.isValid()) {

            var checks = addBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            var sendData = {};

            sendData.address = formData.address;
            sendData.mode = formData.mode;
            sendData.ethernets = ethernets;

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + formData.bondid,
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addBondingForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                         Ext.Msg.alert('Success', '등록이 완료되었습니다.', function(){

                             vmConstants.me.setBonding();
                             addBondingForm.up('window').close();

                         });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVMBonding: function(button) {
        var comboValue = Ext.getCmp("displayBondingName").getValue(),
            grid = Ext.getCmp("viewVmBondingGrid"),
            record = grid.getSelectionModel().getSelection()[0];

        var viewBondingForm = Ext.getCmp("viewBondingForm");
        var formData = viewBondingForm.getForm().getFieldValues();

        if(viewBondingForm.isValid()) {

            var checks = viewBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            checks = viewBondingForm.down('#bondingNICGroup').getBoxes();
            Ext.each(checks, function (checkBox) {
                delete formData[checkBox.getName()];
            });

            var sendData = {};

            formData.ethernets = ethernets;

            sendData.after = formData;
            sendData.after.disable = (!Ext.getCmp("checkBondingDisable").getValue());

            sendData.before = {
                "address"		: (record.get("address") == null ? "" : record.get("address")),
                "ipv6_address"	: (record.get("ipv6_address") == null ? "" : record.get("ipv6_address")),
                "mode"			: (record.get("mode") == null ? "" : record.get("mode")),
                "hw-id"			: (record.get("hw-id") == null ? "" : record.get("hw-id")),
                "mtu"			: (record.get("mtu") == null ? "" : record.get("mtu")),
                "config"		: (record.get("config") == null ? "" : record.get("config")),
                "ethernets"		: (record.get("ethernets") == null ? "" : record.get("ethernets")),
                "disable"		: (record.get("disable") == null ? "" : record.get("disable"))
            };

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + comboValue,
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewBondingForm.up('panel').getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            Ext.Ajax.request({
                                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + comboValue,
                                method: "GET",
                                waitMsg: 'Loading...',
                                waitMsgTarget : viewBondingForm.up('panel').getEl(),
                                disableCaching : true,
                                success: function(response){

                                    var columnData = Ext.decode(response.responseText);
                                    record.set({
                                        "address"		: "",
                                        "ipv6_address"	: "",
                                        "mode"			: "",
                                        "hw-id"			: "",
                                        "mtu"			: "",
                                        "config"		: "",
                                        "ethernets"		: "",
                                        "disable"		: ""
                                    });

                                    if(columnData != null) {

                                        var data = columnData[comboValue];
                                        data.ethernets = columnData.ethernets;
                                        data.disables = columnData.disables;

                                        record.set(data);

                                        vmConstants.me.changeBondingData(record);
                                    }
                                }
                            });
                        });


                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }
    },

    deleteVMBonding: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 Bonding 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var viewBondingForm = Ext.getCmp("viewBondingForm");

                var sendData = {
                    "address"		: record.get("address"),
                    "mode"			: record.get("mode"),
                    "ethernets"		: record.get("ethernets")
                };


                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + record.get("ethName"),
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : viewBondingForm.up('panel').getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function(){

                                vmConstants.me.setBonding();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }

        });

    },

    setRouting: function() {
        var store;
        var form = Ext.getCmp("viewRoutingStaticForm");

        Ext.getCmp("comboRoutingType").setValue("");
        Ext.getCmp("comboRoutingType").setValue("static");

        form.getForm().reset();
    },

    changeRoutingMethod: function(comboValue) {

        if(comboValue == "static") {

            Ext.getCmp("comboRoutingType").up('panel').layout.setActiveItem(0);
            Ext.getCmp("comboRoutingType").up('toolbar').down('#addBtn').show();

            Ext.getCmp("viewRoutingStaticForm").down('#formSet').hide();

            this.setRoutingStaticData();

        } else {

            Ext.getCmp("comboRoutingType").up('toolbar').down('#addBtn').hide();

            Ext.getCmp("comboRoutingType").up('panel').layout.setActiveItem(1);

            this.setRoutingOspfData();
        }
    },

    setRoutingStaticData: function() {
        var form = Ext.getCmp("viewRoutingStaticForm");

        Ext.getStore("VmRoutingStaticStore").removeAll();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/routing/static',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : Ext.getCmp("viewRoutingStaticForm").up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var data = Ext.decode(response.responseText);
                    var gridData = [];
                    var nodeData;

                    if(data["route"]) {

                        Ext.each(data["route"], function(node) {

                            setNodeData(gridData, node, "route", "N/A");
                        });

                    }

                    if(data["interface-route"]) {

                        Ext.each(data["interface-route"], function(node) {

                            setNodeData(gridData, node, "interface-route", "N/A");
                        });

                    }

                    if(data["table"]) {

                        Ext.each(data["table"], function(table) {

                            if(table["route"]) {

                                Ext.each(table["route"], function(node) {

                                    setNodeData(gridData, node, "route", table["key_name"]);
                                });

                            }

                            if(table["interface-route"]) {

                                Ext.each(table["interface-route"], function(node) {

                                    setNodeData(gridData, node, "interface-route", table["key_name"]);
                                });

                            }

                        });

                    }


                    Ext.getStore("VmRoutingStaticStore").loadData(gridData, false);

                    vmConstants.me.renderNicComboBox([form.getForm().findField("routing_next_hop2")], form.up('panel').getEl());

                }

            }
        });


        function setNodeData(gridData, node, type, table) {

            if(node["next-hop"]) {

                Ext.each(node["next-hop"], function(nexthop) {

                    var nodeData = {
                        "routing_subnet":		node["key_name"],
                        "routing_type":			type,
                        "routing_table":		table,
                        "routing_disable":		false,
                        "routing_blackhole":	false
                    };


                    nodeData.routing_next_hop = nexthop["key_name"];
                    nodeData.routing_distance = nexthop["distance"];
                    if(nexthop["disable"]) {
                        nodeData.routing_disable  = nexthop["disable"];
                    }

                    gridData.push(nodeData);
                });

            }

            if(node["next-hop-interface"]) {

                Ext.each(node["next-hop-interface"], function(nexthop) {

                    var nodeData = {
                        "routing_subnet":		node["key_name"],
                        "routing_type":			type,
                        "routing_table":		table,
                        "routing_disable":		false,
                        "routing_blackhole":	false
                    };

                    nodeData.routing_next_hop = nexthop["key_name"];
                    nodeData.routing_distance = nexthop["distance"];
                    if(nexthop["disable"]) {
                        nodeData.routing_disable  = nexthop["disable"];
                    }

                    gridData.push(nodeData);
                });

            }

            if(node["blackhole"]) {

                var nodeData = {
                        "routing_subnet":		node["key_name"],
                        "routing_type":			type,
                        "routing_table":		table,
                        "routing_disable":		false,
                        "routing_blackhole":	false
                    };

                nodeData.routing_blackhole = true;
                nodeData.routing_distance = node["blackhole"]["distance"];

                gridData.push(nodeData);
            }

        }
    },

    setRoutingOspfData: function() {
        var viewRoutingOspfForm = Ext.getCmp("viewRoutingOspfForm");

        Ext.getStore("VmRoutingOspfStore").removeAll();
        Ext.getStore("VmRoutingAccessStore").removeAll();
        Ext.getStore("VmRoutingRediStore").removeAll();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/routing/ospf',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : viewRoutingOspfForm.up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var data = Ext.decode(response.responseText);

                    vmConstants.vmRoutingRecord = data;

                    viewRoutingOspfForm.getForm().setValues(data);

                    if(data["redist-list"]) {
                        Ext.getStore("VmRoutingRediStore").loadData(data["redist-list"], false);
                    }

                    if(data["access-list"]) {
                        Ext.getStore("VmRoutingAccessStore").loadData(data["access-list"], false);
                    }

                    if(data["areas"]) {
                        Ext.getStore("VmRoutingOspfStore").loadData(data["areas"], false);
                    }

                }

            }
        });

    },

    popVmRoutingWindow: function(method) {
            //VM Host 생성 팝업 호출
        var popWindow = Ext.create("widget.AddRoutingWindow");
        popWindow.show();

        var form = Ext.getCmp("addRoutingStaticForm");

        form.getForm().findField("routing_type").setValue("route");

        this.renderNicComboBox([form.getForm().findField("routing_next_hop2")], form.getEl());
    },

    createVmRouting: function() {
        var addRoutingStaticForm = Ext.getCmp("addRoutingStaticForm");
        var formData = addRoutingStaticForm.getForm().getFieldValues();

        if(addRoutingStaticForm.isValid()) {

            if(formData.routing_type == "route") {
                formData.routing_next_hop = formData.routing_next_hop1;
            } else {
                formData.routing_next_hop = formData.routing_next_hop2;
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/static",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addRoutingStaticForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addRoutingStaticForm.up('window').close();

                            vmConstants.me.setRoutingStaticData();
                            Ext.getCmp("viewRoutingStaticForm").down('#formSet').hide();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVmRoutingStatic: function() {
        var viewRoutingStaticForm = Ext.getCmp("viewRoutingStaticForm");
        var formData = viewRoutingStaticForm.getForm().getFieldValues();

        if(viewRoutingStaticForm.isValid()) {

            if(formData.routing_type == "route") {
                formData.routing_next_hop = formData.routing_next_hop1;
            } else {
                formData.routing_next_hop = formData.routing_next_hop2;
            }

            if(formData.routing_next_hop_before === formData.routing_next_hop) {
                delete formData.routing_next_hop_before;
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/static",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewRoutingStaticForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setRoutingStaticData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    deleteVmRoutingStatic: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 Routing 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var routingForm = Ext.getCmp("viewRoutingStaticForm");
                var is_last_in_table = false;

                if(record.get("routing_table") != "N/A") {

                    var tableCnt = 0;
                    Ext.getStore("VmRoutingStaticStore").each(function(rec) {
                        if(record.get("routing_table") == rec.get("routing_table")) {
                            tableCnt++;
                        }
                    });

                    if(tableCnt <= 1) {
                        is_last_in_table = true;
                    }
                }

                var sendData = {
                    "routing_subnet"		: record.get("routing_subnet"),
                    "routing_type"			: record.get("routing_type"),
                    "routing_table"			: (record.get("routing_table") == "N/A" ? "" : record.get("routing_table")),
                    "is_last_in_table"		: is_last_in_table
                };


                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/static",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : routingForm.getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setRoutingStaticData();
                                Ext.getCmp("viewRoutingStaticForm").down('#formSet').hide();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }

        });

    },

    popupVmRoutingOspfWindow: function() {
        var popWindow = Ext.create("widget.AddRoutingOspfWindow");
        popWindow.show();

    },

    popupVmRoutingAccessWindow: function() {
        var popWindow = Ext.create("widget.AddRoutingAccessWindow");
        popWindow.show();

    },

    popupVmRoutingRediWindow: function() {
        var popWindow = Ext.create("widget.AddRoutingRediWindow");
        popWindow.show();

    },

    saveVmRoutingOspf: function() {
        var viewRoutingOspfForm = Ext.getCmp("viewRoutingOspfForm");
        var formData = viewRoutingOspfForm.getForm().getFieldValues();

        if(viewRoutingOspfForm.isValid()) {

            var sendData = {};

            formData["auto-cost_reference-bandwidth"] = formData["auto-cost_reference-bandwidth"].toString();
            formData["default-metric"] = formData["default-metric"].toString();

            sendData.after = formData;

            var beforeData = vmConstants.vmRoutingRecord;
            sendData.before =  {
                "parameters_router-id"			: (beforeData["parameters_router-id"] == null ? "" : beforeData["parameters_router-id"]) ,
                "auto-cost_reference-bandwidth"	: (beforeData["auto-cost_reference-bandwidth"] == null ? "" : beforeData["auto-cost_reference-bandwidth"]),
                "default-metric"				: (beforeData["default-metric"] == null ? "" : beforeData["default-metric"])
            };

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewRoutingOspfForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setRoutingOspfData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    createVmRoutingOspf: function() {
        var addRoutingOspfForm = Ext.getCmp("addRoutingOspfForm");
        var formData = addRoutingOspfForm.getForm().getFieldValues();

        if(addRoutingOspfForm.isValid()) {

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/area",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addRoutingOspfForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addRoutingOspfForm.up('window').close();

                            vmConstants.me.setRoutingOspfData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    createVmRoutingAccess: function() {
        var addRoutingAccessForm = Ext.getCmp("addRoutingAccessForm");
        var formData = addRoutingAccessForm.getForm().getFieldValues();

        if(addRoutingAccessForm.isValid()) {

            formData["access-list"] = formData["access-list"].toString();

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/access",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addRoutingAccessForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addRoutingAccessForm.up('window').close();

                            vmConstants.me.setRoutingOspfData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    createVmRoutingRedi: function() {
        var addRoutingRediForm = Ext.getCmp("addRoutingRediForm");
        var formData = addRoutingRediForm.getForm().getFieldValues();

        if(addRoutingRediForm.isValid()) {

            formData["metric"] = formData["metric"].toString();

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/redist",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addRoutingRediForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addRoutingRediForm.up('window').close();

                            vmConstants.me.setRoutingOspfData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    deleteVmRoutingOspf: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 Routing Area 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var routingForm = Ext.getCmp("viewRoutingOspfForm");

                var sendData = {
                    "area"		: record.get("area"),
                    "network"	: record.get("network")
                };

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/area",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : routingForm.getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setRoutingOspfData();

                            });
                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }

        });

    },

    deleteVmRoutingAccess: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 Routing Access 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var routingForm = Ext.getCmp("viewRoutingOspfForm");

                var sendData = {
                    "access-list"	: record.get("access-list"),
                    "export"		: record.get("export")
                };

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/access",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : routingForm.getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setRoutingOspfData();

                            });
                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }

        });

    },

    deleteVmRoutingRedi: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 Routing Access 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var routingForm = Ext.getCmp("viewRoutingOspfForm");

                var sendData = {
                    "protocol"	: record.get("protocol")
                };

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/routing/ospf/redist",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : routingForm.getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setRoutingOspfData();

                            });
                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }

        });

    },

    renderNicCheckbox: function(component, msgTarget) {
        component.removeAll();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet',
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : msgTarget,
            success: function(response){

                if(response.status == 200) {

                    var data = Ext.decode(response.responseText);
                    var i_max = data.length;
                    var newCheckboxes = new Array();
                    for( i = 0; i < i_max; i++ ) {

                        var disabledFlag = true;
                        if(data[i]["bond-group"] == null || data[i]["bond-group"].length == 0) {
                            disabledFlag = false;
                        }

                        if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                            disabledFlag = true;
                        }

                        if(data[i].disable == true) {
                            disabledFlag = true;
                        }

                        component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: data[i].ethName, inputValue: data[i].ethName, disabled:disabledFlag }));

                    }
                }

            }
        });

    },

    activeNicCheckbox: function(component, msgTarget) {
        component.removeAll();

        if(vmConstants.vmNicRecords == null) {

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet',
                disableCaching : true,
                waitMsg: 'Loading...',
                waitMsgTarget : msgTarget,
                success: function(response){

                    if(response.status == 200) {

                        var data = Ext.decode(response.responseText);

                        vmConstants.vmNicRecords = data;

                        var i_max = data.length;
                        var newCheckboxes = new Array();
                        for( i = 0; i < i_max; i++ ) {

                            var disabledFlag = false;
                            var fieldName = data[i].ethName;
                            if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                                disabledFlag = true;
                                fieldName = "disableCheck";
                            }
                            if(data[i].disable == true) {
                                disabledFlag = true;
                                fieldName = "disableCheck";
                            }
                            component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));
                        }
                    }

                }
            });


        } else {

            var data = vmConstants.vmNicRecords;

            var i_max = data.length;
            var newCheckboxes = new Array();
            for( i = 0; i < i_max; i++ ) {

                var disabledFlag = false;
                var fieldName = data[i].ethName;
                if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                    disabledFlag = true;
                    fieldName = "disableCheck";
                }
                if(data[i].disable == true) {
                    disabledFlag = true;
                    fieldName = "disableCheck";
                }

                component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));
            }
        }

    },

    setNat: function() {

        var viewNatForm = Ext.getCmp("viewNatForm");

        viewNatForm.up('fieldset').down('#saveBtn').hide();
        viewNatForm.up('fieldset').hide();

        viewNatForm.getForm().reset();

        vmConstants.me.setVmNatRecords();
    },

    setVmNatRecords: function() {

        var viewNatForm = Ext.getCmp("viewNatForm");

        var gridStore = Ext.getStore("VmNatStore");
        gridStore.removeAll();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/nat',
            method : "GET",
            headers : {
                "Content-Type" : "application/json"
            },
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : viewNatForm.up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);
                    var gridData = [];

                    Ext.each(datas, function (data){

                        data.rulenum = data.rule;

                        if(data.isSource) {
                            data.ruletype = "source";
                        } else {
                            data.ruletype = "destination";
                        }

                        if(data["inbound-interface"]) {

                            data.ibnic = data["inbound-interface"];
                            data.dispNic = data["inbound-interface"]+"(in)";

                        }

                        if(data["outbound-interface"]) {

                            data.obnic = data["outbound-interface"];
                            data.dispNic = data["outbound-interface"]+"(out)";
                        }

                        if(data.source != null) {
                            data.srcaddr = data.source.address;
                            data.srcport = data.source.port;

                            var dispSrc = data.srcaddr;
                            if(data.srcport) {
                                dispSrc += (dispSrc ? ":" : "") + data.srcport;
                            }
                            data.dispSrc = dispSrc;

                        }


                        if(data.destination != null) {
                            data.destaddr = data.destination.address;
                            data.destport = data.destination.port;

                            var dispDest = data.destaddr;
                            if(data.destport) {
                                dispDest += (dispDest ? ":" : "") + data.destport;
                            }
                            data.dispDest = dispDest;
                        }

                        if(data.translation != null) {

                            if(data.translation.address == "masquerade") {
                                form.getForm().findField("masquerade").setValue(true);
                            } else {
                                data.transaddr = data.translation.address;
                                data.transport = data.translation.port;

                                var dispTrans = data.transaddr;
                                if(data.transport) {
                                    dispTrans += (dispTrans ? ":" : "") + data.transport;
                                }
                                data.dispTrans = dispTrans;
                            }

                        }

                    });

                    gridStore.loadData(datas, false);

                    vmConstants.me.renderNicComboBox([viewNatForm.getForm().findField("ibnic"), viewNatForm.getForm().findField("obnic")], viewNatForm.up('panel').getEl());

                }

            }
        });
    },

    changeNatData: function(record) {
        var form = Ext.getCmp("viewNatForm");
        form.getForm().reset();

        form.getForm().loadRecord(record);
        form.up('fieldset').down('#saveBtn').show();

        Ext.getCmp("displayNatRuleNum").setValue(record.get("rulenum"));
        Ext.getCmp("displayNatRuleType").setValue(record.get("ruletype"));

        form.up('fieldset').show();

        if(record.get("ruletype") == "source") {

            form.getForm().findField("ibnic").setDisabled(true);
            form.getForm().findField("obnic").setDisabled(false);

        } else {

            form.getForm().findField("ibnic").setDisabled(false);
            form.getForm().findField("obnic").setDisabled(true);

        }
    },

    renderNicComboBox: function(components, msgTarget, blankText) {

        var store;

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all',
            disableCaching : true,
            method : "GET",
            headers : {
                "Content-Type" : "application/json"
            },
            waitMsg: 'Loading...',
            waitMsgTarget : msgTarget,
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);

                    vmConstants.vmIfAllRecords = datas;

                    store = Ext.create('Ext.data.Store', {
                        model: 'spider.model.VmNicModel',
                        data: datas
                    });

                    Ext.each(components, function(component) {

                        component.getStore().removeAll();
                        component.bindStore(store);
                        if(blankText) {
                            store.insert(0, {ethName : blankText});
                            component.setValue(blankText);
                        }

                    });
                }

            }
        });


    },

    popVmNatWindow: function() {
        //VM Host 생성 팝업 호출
        var popWindow = Ext.create("widget.AddNatWindow");
        popWindow.show();

        Ext.getCmp("addNatForm").getForm().findField("ruletype").setValue("source");
    },

    createVMNat: function(button) {
        var addNatForm = Ext.getCmp("addNatForm");
        var formData = addNatForm.getForm().getFieldValues();

        if(addNatForm.isValid()) {

            if(formData.masquerade == false) {
                formData.masquerade = "";
            }

            if(formData.disable == false) {
                formData.disable = "";
            }

            if(formData.exclude == false) {
                formData.exclude = "";
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addNatForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addNatForm.up('window').close();

                            vmConstants.me.setNat();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVMNat: function(button) {
        var grid = Ext.getCmp("viewVmNatGrid"),
            record = grid.getSelectionModel().getSelection()[0];

        var viewNatForm = Ext.getCmp("viewNatForm");
        var formData = viewNatForm.getForm().getFieldValues();

        if(viewNatForm.isValid()) {

            if(formData.masquerade == false) {
                formData.masquerade = "";
            }

            if(formData.disable == false) {
                formData.disable = "";
            }

            if(formData.exclude == false) {
                formData.exclude = "";
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewNatForm.up('panel').getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setVmNatRecords();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }


    },

    deleteVMNat: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 NAT 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var viewNatForm = Ext.getCmp("viewNatForm");
                var formData = viewNatForm.getForm().getFieldValues();

                var sendData = {
                    "rulenum"		: record.get("rulenum"),
                    "ruletype"		: record.get("ruletype")
                };


                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : viewNatForm.up('panel').getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setNat();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }


        });
    },

    setDhcp: function() {

        Ext.getCmp("viewDhcpForm").getForm().reset();
        Ext.getCmp("viewDhcpForm").down('#saveBtn').hide();

        var viewDhcpNetworkForm = Ext.getCmp("viewDhcpNetworkForm");

        viewDhcpNetworkForm.down('#saveBtn').hide();
        viewDhcpNetworkForm.hide();

        viewDhcpNetworkForm.getForm().reset();

        Ext.getStore("VmDhcpMappingStore").removeAll();

        this.setDhcpNetworkData();

    },

    setDhcpNetworkData: function() {
        var store;
        var grobalForm = Ext.getCmp("viewDhcpForm");
        var networkForm = Ext.getCmp("viewDhcpNetworkForm");

        var gridStore = Ext.getStore("VmDhcpStore");
        gridStore.removeAll();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/dhcp',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            timeout : 3*60*1000,
            waitMsgTarget : grobalForm.up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var data = Ext.decode(response.responseText);

                    grobalForm.down('#saveBtn').show();

                    grobalForm.getForm().setValues(data);

                    if(data["dynamic-dns-update"] != null) {
                        grobalForm.getForm().findField("dynamic_dns_update").setValue(data["dynamic-dns-update"]["enable"]);
                    }

                    if(data["global-parameters"] != null) {
                        grobalForm.getForm().findField("parameters").setValue(data["global-parameters"].replace(/(?:\r,|\r|,)/g, '\n'));
                    }

                    if(data["shared-network-name"] != null) {

                        var recordData = data["shared-network-name"];

                        Ext.each(recordData, function (data){

                            if(data.authoritative != null && data.authoritative == "enable") {
                                data.authoritative = true;
                            } else {
                                data.authoritative = false;
                            }

                            data.shared_network_name = data.key_name;

                            if(data.subnet != null && data.subnet.length > 0) {
                                var subnet = data.subnet[0];

                                data.subnet_ipv4net = subnet.key_name;

                                if(subnet.start != null) {

                                    data.start_ip = subnet.start[0].key_name;
                                    data.stop_ip = subnet.start[0].stop;
                                }

                                data.default_router = subnet["default-router"];
                                data.dns_server = subnet["dns-server"];
                                data.domain_name = subnet["domain-name"];

                                if(subnet["static-mapping"] != null) {
                                    data.static_mapping = subnet["static-mapping"];
                                }
                            }

                        });

                        gridStore.loadData(recordData, false);

                    } else {
                        grobalForm.down('#saveBtn').hide();
                    }
                }

            }
        });

    },

    changeDhcpNetworkData: function(record) {

        var formCmp = Ext.getCmp("viewDhcpNetworkForm"),
            form = formCmp.getForm();

        form.reset();

        formCmp.down('#saveBtn').show();
        formCmp.down('#addBtn').show();

        formCmp.down('fieldset').setTitle(record.get("shared_network_name"));

        Ext.getCmp("displayDhcpNetworkName").setValue(record.get("shared_network_name"));

        form.loadRecord(record);

        formCmp.show();

        if(record.get("static_mapping")){

            var gridData = [];

            Ext.each(record.get("static_mapping"), function(mapping){
                gridData.push({
                    map_name : mapping.key_name,
                    map_ip : mapping["ip-address"],
                    map_mac : mapping["mac-address"]
                });

            });

            Ext.getStore("VmDhcpMappingStore").loadData(gridData, false);

        }

    },

    popVmDhcpWindow: function() {
        //VM Host 생성 팝업 호출
        var popWindow = Ext.create("widget.AddDhcpWindow");
        popWindow.show();

        Ext.getStore("addDhcpMappingStore").removeAll();

    },

    createVMDhcp: function(button) {
        var addDhcpForm = Ext.getCmp("addDhcpForm");
        var formData = addDhcpForm.getForm().getFieldValues();

        if(addDhcpForm.isValid()) {

            var store = Ext.getStore("addDhcpMappingStore");
            var sendData = {};
            if(store.getCount() > 0 ) {

                var validFlag = true;
                Ext.each(Ext.pluck(store.data.items, 'data'), function(item) {

                    if(item.map_name == "" || item.map_ip == "" || item.map_mac == "") {
                        validFlag = false;
                        return false;
                    }
                });

                if(validFlag === false) {
                    Ext.Msg.alert('Failure', "Static Mapping 설정시 Static Mapping 의 모든 정보를 입력하시기 바랍니다.");
                    return;
                }

                formData.static_mapping = Ext.pluck(store.data.items, 'data');
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/dhcp/sharednetwork",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addDhcpForm.getEl(),
                 jsonData: formData,
                 timeout : 3*60*1000,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addDhcpForm.up('window').close();

                            vmConstants.me.setDhcp();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVmDhcpGlobal: function() {
        var viewDhcpForm = Ext.getCmp("viewDhcpForm");
        var formData = viewDhcpForm.getForm().getFieldValues();

        if(viewDhcpForm.isValid()) {

            formData.parameters = formData.parameters.replace(/(?:\r\n|\r|\n)/g, ',');

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/dhcp/global",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewDhcpForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.');

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVmDhcpSharednet: function(button) {
        var viewDhcpNetworkForm = Ext.getCmp("viewDhcpNetworkForm");
        var formData = viewDhcpNetworkForm.getForm().getFieldValues();

        if(viewDhcpNetworkForm.isValid()) {

            var store = Ext.getStore("VmDhcpMappingStore");
            var sendData = {};
            if(store.getCount() > 0 ) {

                var validFlag = true;
                Ext.each(Ext.pluck(store.data.items, 'data'), function(item) {

                    if(item.map_name == "" || item.map_ip == "" || item.map_mac == "") {
                        validFlag = false;
                        return false;
                    }
                });

                if(validFlag === false) {
                    Ext.Msg.alert('Failure', "Static Mapping 설정시 Static Mapping 의 모든 정보를 입력하시기 바랍니다.");
                    return;
                }

                formData.static_mapping = Ext.pluck(store.data.items, 'data');
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/dhcp/sharednetwork",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewDhcpNetworkForm.up('panel').getEl(),
                 jsonData: formData,
                 timeout : 3*60*1000,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setDhcpNetworkData();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    deleteVmDhcpSharednet: function(record) {
        Ext.MessageBox.confirm('Confirm', '해당 DHCP 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var viewDhcpNetworkForm = Ext.getCmp("viewDhcpNetworkForm");

                var is_last = false;
                if(Ext.getStore("VmDhcpStore").getCount() < 2) {
                    is_last = true;
                }

                var sendData = {
                    "shared_network_name" : record.get("shared_network_name"),
                    "is_last" : is_last
                };

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/dhcp/sharednetwork",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : viewDhcpNetworkForm.up('panel').getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setDhcp();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }


        });
    },

    setHttpsSsh: function() {
        var store;
        var form = Ext.getCmp("viewHttpsSshForm");

        form.getForm().reset();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/remote',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : form.getEl(),
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);

                    var recordData = [];
                    Ext.each(datas, function (data){

                        if(data.service === "https") {

                            form.getForm().findField("httpsenable").setValue(true);
                            form.getForm().findField("httpsaddr").setValue(data["listen-address"]);

                        } else if(data.service === "ssh") {

                            form.getForm().findField("sshallow").setValue(data["allow-root"]);
                            form.getForm().findField("sshaddr").setValue(data["listen-address"]);
                            form.getForm().findField("sshport").setValue(data["port"]);

                        }

                    });

                }

            }
        });

    },

    saveHttpsSsh: function(button) {
        var viewHttpsSshForm = Ext.getCmp("viewHttpsSshForm");
        var formData = viewHttpsSshForm.getForm().getFieldValues();

        var sendData = {
              httpsenable : formData.httpsenable,
              httpsaddr : formData.httpsaddr
            };

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/remote",
            method: "PUT",
            headers : {
                "Content-Type" : "application/json"
            },
            waitMsg: 'Saving Data...',
            waitMsgTarget : viewHttpsSshForm.getEl(),
            jsonData: sendData,
            success: function (response) {

                if(response.status == 200) {

                    Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                        vmConstants.me.setHttpsSsh();

                    });

                }

            },
            failure: function (response) {
                Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
            }
        });


    },

    setSystem: function() {
        var globalform = Ext.getCmp("vmSystemGlobalForm");
        var loginform = Ext.getCmp("vmSystemLoginForm");

        globalform.getForm().reset();
        loginform.getForm().reset();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/system',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : globalform.up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);

                    if(datas.length > 0) {

                        Ext.each(datas, function (data){

                            if(data.category === "host-name") {
                                globalform.getForm().findField("hostname").setValue(data["host-name"]);
                            }

                            if(data.category === "time-zone") {
                                globalform.getForm().findField("timezone").setValue(data["time-zone"]);
                            }

                            if(data.category === "login") {

                                var store = Ext.create('Ext.data.Store', {
                                    fields : ["authentication", "key_name", "level"],
                                    data: data.user
                                });

                                loginform.getForm().findField("username").bindStore(store);
                                loginform.getForm().findField("username").setValue(data.user[0].key_name);
                            }
                        });
                    }

                }

            }
        });

    },

    changeSystemUserName: function(field, newValue) {
        var store = field.getStore();
        var form = field.up('form').getForm();
        var record = store.findRecord("key_name", newValue);

        form.findField("level").setValue(record.get("level"));

        var auth = record.get("authentication");

        if(auth) {

            var keys = auth["public-keys"];

            if(keys) {

                form.findField("key_id").setValue(keys[0].key_name);
                form.findField("key_type").setValue(keys[0].type);
                form.findField("key_value").setValue(keys[0].key);

            }
        }

    },

    saveVmSystemGrobal: function() {

        var vmSystemGlobalForm = Ext.getCmp("vmSystemGlobalForm");

        if(vmSystemGlobalForm.isValid()) {

            var formData = vmSystemGlobalForm.getForm().getFieldValues();
            formData.systemtype = "global";

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/system",
                method: "PUT",
                headers : {
                    "Content-Type" : "application/json"
                },
                waitMsg: 'Saving Data...',
                waitMsgTarget : vmSystemGlobalForm.up('panel').getEl(),
                jsonData: formData,
                success: function (response) {

                    if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setSystem();

                        });

                    }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
            });

        }
    },

    saveVmSystemLogin: function() {

        var vmSystemLoginForm = Ext.getCmp("vmSystemLoginForm");

        if(vmSystemLoginForm.isValid()) {

            var formData = vmSystemLoginForm.getForm().getFieldValues();
            formData.systemtype = "login";

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/system",
                method: "PUT",
                headers : {
                    "Content-Type" : "application/json"
                },
                waitMsg: 'Saving Data...',
                waitMsgTarget : vmSystemLoginForm.up('panel').getEl(),
                jsonData: formData,
                success: function (response) {

                    if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setSystem();

                        });

                    }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
            });

        }
    },

    setFirewall: function() {

        var viewFirewallForm = Ext.getCmp("viewFirewallForm");

        viewFirewallForm.up('fieldset').down('#saveBtn').hide();
        viewFirewallForm.up('fieldset').hide();

        viewFirewallForm.getForm().reset();

        this.setVmFirewallRecords();

    },

    setVmFirewallRecords: function() {

        var gridStore = Ext.getStore("VmFirewallStore");
        gridStore.removeAll();

        var comboStore = Ext.getStore("ComboVmFirewallNameStore");
        comboStore.removeAll();

        var form = Ext.getCmp("viewFirewallForm");

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/firewall/all',
            method : "GET",
            disableCaching : true,
            waitMsg: 'Loading...',
            timeout : 3*60*1000,
            waitMsgTarget : form.up('panel').getEl(),
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);
                    var gridData = [];
                    var comboData = [];

                    Ext.each(datas, function(data) {

                        if(data.rules != null && data.rules.length > 0) {

                            Ext.each(data.rules, function(rule) {
                                rule.ethernet = data.ethernet;
                                rule.inout = data.inout;
                                rule.name = data.name;

                                gridData.push(rule);
                            });
                        } else {

                            data.source_address = " ";
                            data.source_port = " ";
                            data.destination_address = " ";
                            data.destination_port = " ";
                            data.action = " ";
                            data.protocol = " ";
                            data["source_mac-address"] = " ";

                            gridData.push(data);
                        }

                        comboData.push(data);
                    });

                    gridStore.loadData(gridData, false);
                    comboStore.loadData(comboData, false);

                    vmConstants.me.renderNicComboBox([form.getForm().findField("ethernet")], form.up('panel').getEl(), "해당없음");
                }

            }
        });
    },

    changeFirewallData: function(record) {
        var data;
        var form = Ext.getCmp("viewFirewallForm");

        form.up('fieldset').down('#saveBtn').show();
        form.getForm().reset();

        Ext.getCmp("displayFirewallName").setValue(record.get("name"));
        Ext.getCmp("displayFirewallRuleName").setValue(record.get("rule"));

        form.getForm().loadRecord(record);

        if(record.get("source_address") != null && record.get("source_address").indexOf("!") === 0) {

            form.getForm().findField("source_address").setValue(record.get("source_address").replace("!",""));
            form.getForm().findField("source_address").nextNode('checkboxfield').setValue(true);

        }

        if(record.get("destination_address") != null && record.get("destination_address").indexOf("!") === 0) {

            form.getForm().findField("destination_address").setValue(record.get("destination_address").replace("!",""));
            form.getForm().findField("destination_address").nextNode('checkboxfield').setValue(true);

        }

        if(record.get("source_port") != null && record.get("source_port").indexOf("!") === 0) {

            form.getForm().findField("source_port").setValue(record.get("source_port").replace("!",""));
            form.getForm().findField("source_port").nextNode('checkboxfield').setValue(true);

        }

        if(record.get("destination_port") != null && record.get("destination_port").indexOf("!") === 0) {

            form.getForm().findField("destination_port").setValue(record.get("destination_port").replace("!",""));
            form.getForm().findField("destination_port").nextNode('checkboxfield').setValue(true);

        }

        if(record.get("protocol") != null && record.get("protocol").indexOf("!") === 0) {

            form.getForm().findField("protocol").setValue(record.get("protocol").replace("!",""));
            form.getForm().findField("protocol").nextNode('checkboxfield').setValue(true);

        }

        if(record.get("source_mac-address") != null && record.get("source_mac-address").indexOf("!") === 0) {

            form.getForm().findField("source_mac-address").setValue(record.get("source_mac-address").replace("!",""));
            form.getForm().findField("source_mac-address").nextNode('checkboxfield').setValue(true);

        }

        form.up('fieldset').show();


    },

    popVmFirewallWindow: function() {
        //VM Host 생성 팝업 호출
        var popWindow = Ext.create("widget.AddFirewallWindow");
        popWindow.show();

        var component = Ext.getCmp("addFirewallForm");
        var components = [component.getForm().findField("ethernet")];

        component.getForm().findField("name").bindStore(Ext.getStore("ComboVmFirewallNameStore"));

        vmConstants.me.renderNicComboBox(components, component.getEl(), "해당없음");
    },

    createVMFirewall: function(button) {
        var addFirewallForm = Ext.getCmp("addFirewallForm");
        var formData = addFirewallForm.getForm().getFieldValues();

        if(addFirewallForm.isValid()) {

            if(formData.ethernet === "해당없음") {
                formData.ethernet = "";
            }

            if(formData.ethernet != "" && formData.inout == null) {

                Ext.Msg.alert('Failure', "NIC가 선택된 경우 동작위치는 필수로 입력되어야 합니다.");
                return;
            }

            if(formData.source_address == "" &&
                  formData.destination_address == "" &&
                  formData.source_port == "" &&
                  formData.destination_port == "" &&
                  formData.protocol == "" ) {

                Ext.Msg.alert('Failure', "Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.");
                return;

            }

            var chkField = addFirewallForm.getForm().findField("source_address").nextNode('checkboxfield');
            if(formData.source_address !== "" && chkField.getValue() === true) {
                formData.source_address = "!" + formData.source_address;
            }
            delete formData[chkField.getName()];

            var chkField = addFirewallForm.getForm().findField("destination_address").nextNode('checkboxfield');
            if(formData.destination_address !== "" && chkField.getValue() === true) {
                formData.destination_address = "!" + formData.destination_address;
            }
            delete formData[chkField.getName()];

            var chkField = addFirewallForm.getForm().findField("source_port").nextNode('checkboxfield');
            if(formData.source_port !== "" && chkField.getValue() === true) {
                formData.source_port = "!" + formData.source_port;
            }
            delete formData[chkField.getName()];

            var chkField = addFirewallForm.getForm().findField("destination_port").nextNode('checkboxfield');
            if(formData.destination_port !== "" && chkField.getValue() === true) {
                formData.destination_port = "!" + formData.destination_port;
            }
            delete formData[chkField.getName()];

            var chkField = addFirewallForm.getForm().findField("protocol").nextNode('checkboxfield');
            if(formData.protocol !== "" && chkField.getValue() === true) {
                formData.protocol = "!" + formData.protocol;
            }
            delete formData[chkField.getName()];

            var chkField = addFirewallForm.getForm().findField("source_mac-address").nextNode('checkboxfield');
            if(formData["source_mac-address"] !== "" && chkField.getValue() === true) {
                formData["source_mac-address"] = "!" + formData["source_mac-address"];
            }
            delete formData[chkField.getName()];

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/firewall/" + formData.name,
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addFirewallForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addFirewallForm.up('window').close();

                            vmConstants.me.setFirewall();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    saveVMFirewall: function(button) {

        var viewFirewallForm = Ext.getCmp("viewFirewallForm");
        var formData = viewFirewallForm.getForm().getFieldValues();

        if(viewFirewallForm.isValid()) {

            if(formData.ethernet === "해당없음") {
                formData.ethernet = "";
            }

            if(formData.ethernet != "" && formData.inout == null) {

                Ext.Msg.alert('Failure', "NIC가 선택된 경우 동작위치는 필수로 입력되어야 합니다.");
                return;
            }

            if(formData.source_address == "" &&
                  formData.destination_address == "" &&
                  formData.source_port == "" &&
                  formData.destination_port == "" &&
                  formData.protocol == "" ) {

                Ext.Msg.alert('Failure', "Source Address, Destination Address, Source Port, Destination Port, Protocol 중 <br/>한가지 이상이 필수로 입력되어야 합니다.");
                return;

            }

            var chkField = viewFirewallForm.getForm().findField("source_address").nextNode('checkboxfield');
            if(formData.source_address !== "" && chkField.getValue() === true) {
                formData.source_address = "!" + formData.source_address;
            }
            delete formData[chkField.getName()];

            var chkField = viewFirewallForm.getForm().findField("destination_address").nextNode('checkboxfield');
            if(formData.destination_address !== "" && chkField.getValue() === true) {
                formData.destination_address = "!" + formData.destination_address;
            }
            delete formData[chkField.getName()];

            var chkField = viewFirewallForm.getForm().findField("source_port").nextNode('checkboxfield');
            if(formData.source_port !== "" && chkField.getValue() === true) {
                formData.source_port = "!" + formData.source_port;
            }
            delete formData[chkField.getName()];

            var chkField = viewFirewallForm.getForm().findField("destination_port").nextNode('checkboxfield');
            if(formData.destination_port !== "" && chkField.getValue() === true) {
                formData.destination_port = "!" + formData.destination_port;
            }
            delete formData[chkField.getName()];

            var chkField = viewFirewallForm.getForm().findField("protocol").nextNode('checkboxfield');
            if(formData.protocol !== "" && chkField.getValue() === true) {
                formData.protocol = "!" + formData.protocol;
            }
            delete formData[chkField.getName()];

            var chkField = viewFirewallForm.getForm().findField("source_mac-address").nextNode('checkboxfield');
            if(formData["source_mac-address"] !== "" && chkField.getValue() === true) {
                formData["source_mac-address"] = "!" + formData["source_mac-address"];
            }
            delete formData[chkField.getName()];

            var sendData = {};
            sendData.after = formData;

            sendData.before = {};

            var grid = Ext.getCmp("viewVmFirewallGrid"),
            record = grid.getSelectionModel().getSelection()[0];

            sendData.before.action					= (record.get("action") == null ? "" : record.get("action"));
            sendData.before.destination_address		= (record.get("destination_address") == null ? "" : record.get("destination_address"));
            sendData.before.destination_port		= (record.get("destination_port") == null ? "" : record.get("destination_port"));
            sendData.before.ethernet				= (record.get("ethernet") == null ? "" : record.get("ethernet"));
            sendData.before.inout					= (record.get("inout") == null ? "" : record.get("inout"));
            sendData.before.name					= (record.get("name") == null ? "" : record.get("name"));
            sendData.before.protocol				= (record.get("protocol") == null ? "" : record.get("protocol"));
            sendData.before.rule					= (record.get("rule") == null ? "" : record.get("rule"));
            sendData.before["source_mac-address"]	= (record.get("source_mac-address") == null ? "" : record.get("source_mac-address"));
            sendData.before.source_address			= (record.get("source_address")== null ? "" : record.get("source_address"));
            sendData.before.source_port				= (record.get("source_port") == null ? "" : record.get("source_port"));


            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/firewall/" + formData.name,
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewFirewallForm.up('panel').getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            vmConstants.me.setVmFirewallRecords();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }

    },

    deleteVMFirewall: function(record) {

        Ext.MessageBox.confirm('Confirm', '해당 Firewall 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var viewFirewallForm = Ext.getCmp("viewFirewallForm");
                var formData = viewFirewallForm.getForm().getFieldValues();

                var sendData = {rule : record.get("rule"),
                                ethernet : record.get("ethernet")};

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/firewall/" + record.get("name"),
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : viewFirewallForm.up('panel').getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                vmConstants.me.setFirewall();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                    }
                });

            }


        });
    },

    setCli: function() {

        var center = Ext.getCmp("lnbLocationCombo").getValue();
        var checkTreeData = [];

        Ext.each(menuConstants.hostRecord, function(host, index) {

            if(host.location == center) {

                host.id = host._id;
                host.text = host.name;
                host.icon = 'resources/images/icons/server.png';
                host.type = 'vmhost';
                host.expanded = true;

                var vmList = [];
                Ext.each(menuConstants.vmRecord, function(vm) {

                    if(host._id == vm.vmhost) {

                        vm.id = vm._id;
                        vm.text = vm.vmname;
                        vm.icon = 'resources/images/icons/host.png';
                        vm.type = 'vm';
                        vm.leaf = true;

                        if(vmConstants.selectRecord.get("id") === vm.id) {
                            vm.checked = true;
                        } else {
                            vm.checked = false;
                        }

                        if(vm.interim === true) {
                            vm.cls = "node-red";
                            delete vm.checked;
                        }

                        vmList.push(vm);
                    }
                });

                if(vmList.length > 0) {

                    host.leaf = false;
                    host.children = vmList;

                } else {

                    host.leaf = true;

                }

                checkTreeData.push(host);

            }

        });

        var cliTreeStore = Ext.create('Ext.data.TreeStore', {
            storeId: 'cliTreeStore',
            model: 'spider.model.VmHostModel',
            root: {
                expanded: true,
                text: 'Server List',
                icon : '',
                type : 'root',
                children: checkTreeData
            }
        });

        Ext.getCmp("listCheckMenuPanel").bindStore(cliTreeStore);


    },

    executeCli: function() {
        var cliForm = Ext.getCmp("cliSubmitForm");

        var vmRecords = Ext.getCmp("listCheckMenuPanel").getView().getChecked();

        if(vmRecords.length == 0) {

            Ext.Msg.alert('Failure', "VM 선택 후 명령을 실행하시기 바랍니다.");
            return;

        }

        if(cliForm.isValid()) {

            var vms = [];
            Ext.each(vmRecords, function(record){
                vms.push(record.get("id"));
            });

            var sendData = {vms : vms,
                            commands : cliForm.getForm().findField("commands").getValue()
                           };

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/cli",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : cliForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        cliForm.getForm().findField("results").setValue(response.responseText);

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                }
             });

        }
    }

});
