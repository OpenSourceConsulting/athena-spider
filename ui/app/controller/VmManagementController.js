/*
 * File: app/controller/VmManagementController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.VmManagementController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerPanel'
        }
    ],

    onVmListCycleBtnClick: function(item, e, eOpts) {
        Ext.getCmp("vmListCycleBtn").setText(item.text);

        this.getInstanceDashboard(item.code);
    },

    onNetworkInstanceTabPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        //if(newCard.title)
        if(newCard.title === "Instance Dashboard") {

            this.setInstanceDashboard();

        } else if(newCard.title === "NIC") {

            this.setNic();

        } else if(newCard.title === "Bonding") {

            this.setBonding();

        } else if(newCard.title === "NAT") {

            this.setNat();
        }


        if(oldCard.title == "Instance Dashboard") {
            clearInterval(GlobalData.intervalId2);
        }

        //this.changeNetworkInstanceTab()
    },

    onComboNicNameChange: function(field, newValue, oldValue, eOpts) {

        if(newValue === '') {

            field.up('toolbar').down('button').hide();

        } else {

            var form = Ext.getCmp("viewNicForm").getForm();
            form.reset();


            var store = field.getStore();
            var record = store.findRecord("ethName", newValue);

            Ext.getCmp("viewNicForm").getForm().loadRecord(record);

            field.up('toolbar').down('button').show();

            //VM의 Mgr Address 와 NIC의 IP Address 가 같을 경우 수정 불가능
            if(record.get("ipaddr") == vmConstants.selectRecord.get("mgraddr")) {
                field.up('toolbar').down('button').hide();
            }

            var readOnlyFlag = false;
            if(record.get("address") == "dhcp") {
                readOnlyFlag = true;
            }


            Ext.getCmp("checkNicDhcp").setValue(readOnlyFlag);

            if(record.get("disable") == true) {
                Ext.getCmp("checkNicDisable").setValue(false);
            } else {
                Ext.getCmp("checkNicDisable").setValue(true);
            }

            form.findField("ipaddr").setReadOnly(readOnlyFlag);
            form.findField("ipv6_address").setReadOnly(readOnlyFlag);

        }

    },

    onComboBondingNameChange: function(field, newValue, oldValue, eOpts) {

        if(newValue !== '') {

            var form = Ext.getCmp("viewBondingForm");
            form.getForm().reset();

            form.down('#saveBtn').show();
            form.down('#deleteBtn').show();

            var store = field.getStore();
            var record = store.findRecord("ethName", newValue);

            form.getForm().loadRecord(record);

            Ext.get("viewBondingForm").select('.saveBtn').show();
            Ext.get("viewBondingForm").select('.deleteBtn').show();

            var dhcpFlag = false;
            if(record.get("address") == "dhcp") {
                dhcpFlag = true;
            }
            Ext.getCmp("checkBondigDhcp").setValue(dhcpFlag);

            if(record.get("disable") == true) {
                Ext.getCmp("checkBondingDisable").setValue(false);
            } else {
                Ext.getCmp("checkBondingDisable").setValue(true);
            }

            var nics = record.get("ethernets");
            var disables = record.get("disables");

            var checks = form.down('#bondingNICGroup').getBoxes();
            Ext.each(checks, function (checkBox) {

                var disableFlag = false;

                Ext.each(disables, function(disable) {
                    if(checkBox.getName() == disable) {
                        disableFlag = true;
                    }
                });

                if(checkBox.getName() == "disableCheck") {
                    disableFlag = true;
                }

                checkBox.setDisabled(disableFlag);

                Ext.each(nics, function(nic) {
                    if(checkBox.getName() == nic) {
                        checkBox.setValue(true);
                    }
                });

            });


        } else {

            var form = Ext.getCmp("viewBondingForm");
            form.getForm().reset();

            form.down('#saveBtn').hide();
            form.down('#deleteBtn').hide();

        }

    },

    onComboRuleNameChange: function(field, newValue, oldValue, eOpts) {

        if(newValue !== '') {

            var form = Ext.getCmp("viewNatForm");
            form.getForm().reset();

            form.down('#saveBtn').show();
            form.down('#deleteBtn').show();

            this.changeNatData(newValue);

        } else {

            var form = Ext.getCmp("viewNatForm");
            form.getForm().reset();

            form.down('#saveBtn').hide();
            form.down('#deleteBtn').hide();

        }

    },

    initVmManagement: function(record, tabIndex) {
        var vmDetailTab = Ext.getCmp("networkInstanceTabPanel");

        if(record == null) {

            Ext.getCmp("mgmtVmHostName").setValue("");
            Ext.getCmp("mgmtVmName").setValue("");

            Ext.getCmp("networkInstanceTabPanel").setActiveTab(0);

            return;
        }

        if(record.get("id") !== vmConstants.selectVmId) {

            vmConstants.vmNicRecords = null;
            vmConstants.vmNatRecords = null;

            vmConstants.selectRecord = record;
            vmConstants.selectVmId = record.get("id");

            Ext.getCmp("mgmtVmHostName").setValue(record.get("vmhostName"));
            Ext.getCmp("mgmtVmName").setValue(record.get("text"));
            Ext.getCmp("mgmtVmState").setValue("");

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/vm/' + record.get("vmhost") + "/" + record.get("text") + "/status",
                method : 'GET',
                disableCaching : true,
                success: function(response){

                    var data = Ext.JSON.decode(response.responseText);

                    if(data.length > 0) {
                        Ext.getCmp("mgmtVmState").setValue(data[0].state.toLowerCase());

                    }

                    if(data[0].state.toLowerCase() == 'running') {
                        Ext.getCmp('startVmBtn').setDisabled(true);
                        Ext.getCmp('stopVmBtn').setDisabled(false);
                    } else {
                        Ext.getCmp('startVmBtn').setDisabled(false);
                        Ext.getCmp('stopVmBtn').setDisabled(true);
                    }


                }
            });

            vmDetailTab.setActiveTab(11); //blank tab
        }

        if(tabIndex) {

            vmDetailTab.setActiveTab(tabIndex);

        } else {

            if(vmDetailTab.getActiveTab() === vmDetailTab.items.getAt(0)) {

                this.setInstanceDashboard();

            } else {

                vmDetailTab.setActiveTab(0);

            }

        }
    },

    init: function(application) {
                var vmMgmt = this;

                //VM Menu Constants
                Ext.define('vmConstants', {
                    singleton: true,
                    me : vmMgmt,

                    selectVmId : null,
                    selectRecord : null,

                    vmCombo : null,

                    initComboNic : false,
                    initComboBonding : false,
                    vmNicRecords : null,
                    vmNatRecords : null

                });

        this.control({
            "#vmListCycleBtn menuitem": {
                click: this.onVmListCycleBtnClick
            },
            "#networkInstanceTabPanel": {
                tabchange: this.onNetworkInstanceTabPanelTabChange
            },
            "#comboNicName": {
                change: this.onComboNicNameChange
            },
            "#comboBondingName": {
                change: this.onComboBondingNameChange
            },
            "#comboRuleName": {
                change: this.onComboRuleNameChange
            }
        });
    },

    getUtilzation: function(index) {

        // Case 3
        var currentDate = new Date();

        // milli second 값을 지운다.
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());

        // chart에 표시될 x축 개수
        var length = 10;

        // x축의 시간 차(초)
        // length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.
        // length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.
        var step = 1;

        // CPU, Memory, Network Chart를 위한 변수 설정
        var cpuChart, memoryChart, networkChart;
        var chartData = [];

        //var store = Ext.getStore('ChartDataStore');
        var store = Ext.create('Ext.data.Store', {
            fields: ['date', 'cpu', 'memory', 'network']
        });
        /*
        Ext.ComponentManager.unregister(Ext.getCmp('cpuChart'));
        Ext.ComponentManager.unregister(Ext.getCmp('memoryChart'));
        Ext.ComponentManager.unregister(Ext.getCmp('networkChart'));

        // CPU Chart 생성 후 cpuPanel에 draw 한다.
        var cpuChartItem = Ext.create('Ext.chart.Chart', {
            width: 250,
            height: 170,
            style: 'background:#fff',
            id: 'cpuChart',
            store: store,
            shadow: true,
            animate: true,
            //margins: '15 0 0 0',
            legend: {
                visible: false,
                position: 'bottom'
            },
            axes: [{
                type: 'Numeric',
                minimum: 0,
                maximum: 100,
                position: 'left',
                grid: {
                    odd: {
                        fill: '#dedede',
                        stroke: '#ddd',
                        'stroke-width': 0.5
                    }
                }
            }, {
                type: 'Time',
                position: 'bottom',
                fields: 'date',
                dateFormat: 'H:i:s',
                title: 'AVG CPU Utilization',
                constrain: true,
                fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),
                toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),
                grid: true,
                step: [
                    's',
                    step
                ],
                label: {
                    rotate: {
                        degrees: 315
                    }
                }
            }],
            series: [{
                type: 'line',
                smooth: false,
                fill: true,
                axis: ['left', 'bottom'],
                xField: 'date',
                yField: 'cpu',
                title: 'AVG CPU Utilization',
                label: {
                    display: '',
                    field: 'cpu',
                    renderer: function(v) { return v >> 0; },
                    'text-anchor': 'middle'
                },
                markerConfig: {
                    radius: 2,
                    size: 2
                }
            }]
        });

        // Memory Chart 생성 후 memoryPanel에 draw 한다.
        var memoryChartItem = Ext.create('Ext.chart.Chart', {
            width: 250,
            height: 170,
            style: 'background:#fff',
            id: 'memoryChart',
            store: store,
            shadow: true,
            animate: true,
            //margins: '15 0 0 0',
            legend: {
                visible: false,
                position: 'bottom'
            },
            axes: [{
                type: 'Numeric',
                minimum: 0,
                maximum: 100,
                position: 'left',
                grid: {
                    odd: {
                        fill: '#dedede',
                        stroke: '#ddd',
                        'stroke-width': 0.5
                    }
                }
            }, {
                type: 'Time',
                position: 'bottom',
                fields: 'date',
                dateFormat: 'H:i:s',
                title: 'AVG Memory Utilization',
                constrain: true,
                fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),
                toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),
                grid: true,
                step: [
                    's',
                    step
                ],
                label: {
                    rotate: {
                        degrees: 315
                    }
                }
            }],
            series: [{
                type: 'line',
                smooth: false,
                fill: true,
                axis: ['left', 'bottom'],
                xField: 'date',
                yField: 'memory',
                title: 'AVG Memory Utilization',
                label: {
                    display: '',
                    field: 'memory',
                    renderer: function(v) { return v >> 0; },
                    'text-anchor': 'middle'
                },
                markerConfig: {
                    radius: 2,
                    size: 2
                }
            }]
        });

        // Network Chart 생성 후 networkPanel에 draw 한다.
        var networkChartItem = Ext.create('Ext.chart.Chart', {
            width: 250,
            height: 170,
            style: 'background:#fff',
            id: 'networkChart',
            store: store,
            shadow: true,
            animate: true,
            //margins: '15 0 0 0',
            legend: {
                visible: false,
                position: 'bottom'
            },
            axes: [{
                type: 'Numeric',
                minimum: 0,
                maximum: 100,
                position: 'left',
                grid: {
                    odd: {
                        fill: '#dedede',
                        stroke: '#ddd',
                        'stroke-width': 0.5
                    }
                }
            }, {
                type: 'Time',
                position: 'bottom',
                fields: 'date',
                dateFormat: 'H:i:s',
                title: 'AVG Network Utilization',
                constrain: true,
                fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),
                toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),
                grid: true,
                step: [
                    's',
                    step
                ],
                label: {
                    rotate: {
                        degrees: 315
                    }
                }
            }],
            series: [{
                type: 'line',
                smooth: false,
                fill: true,
                axis: ['left', 'bottom'],
                xField: 'date',
                yField: 'network',
                title: 'AVG Network Utilization',
                label: {
                    display: '',
                    field: 'network',
                    renderer: function(v) { return v >> 0; },
                    'text-anchor': 'middle'
                },
                markerConfig: {
                    radius: 2,
                    size: 2
                }
            }]
        });

        Ext.getCmp('cpuChartPanel').removeAll();
        Ext.getCmp('memoryChartPanel').removeAll();
        Ext.getCmp('networkChartPanel').removeAll();

        Ext.getCmp('cpuChartPanel').add(cpuChartItem);
        Ext.getCmp('memoryChartPanel').add(memoryChartItem);
        Ext.getCmp('networkChartPanel').add(networkChartItem);
        */
        cpuChart = Ext.getCmp('cpuChart');
        memoryChart = Ext.getCmp('memoryChart');
        networkChart = Ext.getCmp('networkChart');

        // Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.
        clearInterval(GlobalData.intervalId1);
        GlobalData.intervalId1 = setInterval(function() {
            loadStat();
        }, step * 1000);

        // Utilization 상태 정보를 조회하기 위한 function
        loadStat = function() {
            var last = false, date = new Date();
            chartData = chartData.slice();

            last = chartData[chartData.length -1];

            chartData.push({
                date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),
                cpu: Math.min(100, Math.max(last? last.cpu + (Math.random() - 0.5) * 10 : 5, 5)),
                memory: Math.min(100, Math.max(last? last.memory + (Math.random() - 0.5) * 25 : 40, 40)),
                network: Math.min(100, Math.max(last? last.network + (Math.random() - 0.5) * 15 : 20, 20))
            });

            if (chartData.length > length + 1) {
                chartData.splice(0, 1);
            }

            cpuAxis = cpuChart.axes.get(1);
            memoryAxis = memoryChart.axes.get(1);
            networkAxis = networkChart.axes.get(1);

            var toDate = cpuAxis.toDate,
                lastDate = chartData[chartData.length - 1].date;

            if (+toDate < +lastDate) {
                cpuAxis.fromDate = chartData[0].date;
                cpuAxis.toDate = chartData[chartData.length -1].date;
                memoryAxis.fromDate = chartData[0].date;
                memoryAxis.toDate = chartData[chartData.length -1].date;
                networkAxis.fromDate = chartData[0].date;
                networkAxis.toDate = chartData[chartData.length -1].date;

                cpuChart.markerIndex = 1;
                networkChart.markerIndex = 1;
                memoryChart.markerIndex = 1;
            } else {
                cpuAxis.fromDate = chartData[0].date;
                cpuAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));
                memoryAxis.fromDate = chartData[0].date;
                memoryAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));
                networkAxis.fromDate = chartData[0].date;
                networkAxis.toDate = Ext.Date.add(chartData[0].date, Ext.Date.SECOND, (length * step));
            }

            store.loadData(chartData);
        };
    },

    getInstanceDashboard: function(no) {

        var vmStore = Ext.getStore("HostListStore");
        var r = vmStore.findRecord("no", no);
        var idx = vmStore.indexOf(r);

        //console.log("Host Index : " + idx + ", Instance Index : " + index);

        //Ext.getCmp('instanceDashboardBtn').fireEvent('click');

        var data = Ext.getStore('HostListStore').proxy.data[idx].instances[0];

        var gridStore = Ext.create('Ext.data.Store', {
            fields: ['name', 'description', 'ip', 'status', 'in', 'out'],
            data: data.interfaces
        });

        Ext.getCmp('cpuBar').updateProgress(data.usage.cpu.percentage / 100, data.usage.cpu.percentage + "%");
        Ext.getCmp('memoryBar').updateProgress(data.usage.memory.percentage / 100, data.usage.memory.percentage + "% of " + data.usage.memory.total);
        Ext.getCmp('diskBar').updateProgress(data.usage.disk.percentage / 100, data.usage.disk.percentage + "% of " + data.usage.disk.total);

        Ext.getCmp('domainNameLabel').update(data.information.domain);
        Ext.getCmp('dnsServersLabel').update(data.information.dns);
        Ext.getCmp('bootViaLabel').update(data.information.boot);
        Ext.getCmp('imagesLabel').update(data.information.images);
        Ext.getCmp('entitlementLabel').update(data.information.entitlement);

        Ext.getCmp('interfacesGridPanel').reconfigure(gridStore, gridStore.fields);

        Ext.getCmp('interfacesCombo').bindStore(gridStore);
        Ext.getCmp('interfacesCombo').setValue(gridStore.proxy.data[0].name);
        Ext.getCmp('interfacesCombo').fireEvent('select');

        var cpu = data.usage.cpu.percentage,
            memory = data.usage.memory.percentage,
            disk = data.usage.disk.percentage;

        //Resource Usage를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.
        clearInterval(GlobalData.intervalId2);
        GlobalData.intervalId2 = setInterval(function() {
            loadResourceUsage();
        }, 2000);

        loadResourceUsage = function() {
            cpu = Math.min(100, Math.max(+cpu + (Math.random() - 0.5), 0));
            memory = Math.min(100, Math.max(+memory + (Math.random() - 0.5) * 2, 0));
            disk = Math.min(100, Math.max(+disk + (Math.random() - 0.5) / 2, 0));

            Ext.getCmp('cpuBar').updateProgress(cpu / 100, cpu.toFixed(2) + "%");
            Ext.getCmp('memoryBar').updateProgress(memory / 100, memory.toFixed(2) + "% of " + data.usage.memory.total);
            Ext.getCmp('diskBar').updateProgress(disk / 100, disk.toFixed(2) + "% of " + data.usage.disk.total);

        };

        this.interfacesSelect(0);
    },

    interfacesSelect: function(index) {
        var currentDate = new Date();

        // milli second 값을 지운다.
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());

        // chart에 표시될 x축 개수
        var length = 60;

        // x축의 시간 차(초)
        // length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.
        // length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.
        var step = 1;

        var interfaceChart;
        var ifChartData = [];

        var ifChartStore = Ext.create('Ext.data.Store', {
            fields: ['date', 'cur_in', 'cur_out']
        });

        Ext.ComponentManager.unregister(Ext.getCmp('interfaceChart'));

        var curIn = 0, curOut = 0, avgIn = 0, avgOut = 0, peakIn = 0, peakOut = 0;
        var cnt = 0;

        var curInLabel = Ext.getCmp('curInLabel'),
            curOutLabel = Ext.getCmp('curOutLabel'),
            avgInLabel = Ext.getCmp('avgInLabel'),
            avgOutLabel = Ext.getCmp('avgOutLabel'),
            peakInLabel = Ext.getCmp('peakInLabel'),
            peakOutLabel = Ext.getCmp('peakOutLabel');

        // interfaceChart 생성 후 ifChartPanel에 draw 한다.
        var interfaceChartItem = Ext.create('Ext.chart.Chart', {
            width: 250,
            height: 400,
            style: 'background:#fff',
            id: 'interfaceChart',
            store: ifChartStore,
            shadow: true,
            animate: true,
            //margins: '15 0 0 0',
            //autoSize: true, // true로 변경하면 Error: Invalid value for <svg> attribute width="-Infinity" 에러 발생
            //insetPadding: 20,
            legend: {
                visible: true,
                position: 'bottom'
            },
            axes: [{
                type: 'Numeric',
                //minimum: 0,
                //maximum: 100,
                position: 'left',
                title: 'Usage (kbps)',
                grid: {
                    odd: {
                        fill: '#dedede',
                        stroke: '#ddd',
                        'stroke-width': 0.5
                    }
                }
            }, {
                type: 'Time',
                position: 'bottom',
                fields: 'date',
                dateFormat: 'H:i:s',
                constrain: true,
                fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),
                toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),
                grid: true,
                step: [
                    's',
                    step
                ],
                label: {
                    rotate: {
                        degrees: 315
                    }
                }
            }],
            series: [{
                type: 'line',
                smooth: false,
                fill: false,
                axis: ['left', 'bottom'],
                xField: 'date',
                yField: 'cur_in',
                title: 'Network In',
                label: {
                    display: 'none',
                    field: 'cur_in',
                    renderer: function(v) { return v >> 0; },
                    'text-anchor': 'middle'
                },
                markerConfig: {
                    radius: 3,
                    size: 3
                }
            },{
                type: 'line',
                smooth: false,
                fill: false,
                axis: ['left', 'bottom'],
                xField: 'date',
                yField: 'cur_out',
                title: 'Network Out',
                label: {
                    display: 'none',
                    field: 'cur_out',
                    renderer: function(v) { return v >> 0; },
                    'text-anchor': 'middle'
                },
                markerConfig: {
                    radius: 3,
                    size: 3
                }
            }]
        });

        Ext.getCmp('ifChartPanel').removeAll();
        Ext.getCmp('ifChartPanel').add(interfaceChartItem);

        interfaceChart = Ext.getCmp('interfaceChart');

        // Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.
        clearInterval(GlobalData.intervalId3);
        GlobalData.intervalId3 = setInterval(function() {
            loadNetworkRealtime();
        }, step * 2000);

        // 실시간 네트워크 인터페이스 상태 정보를 조회하기 위한 function
        loadNetworkRealtime = function() {
            var last = false, date = new Date();
            ifChartData = ifChartData.slice();

            last = ifChartData[ifChartData.length -1];

            curIn = Math.min(200, Math.max(last? last.cur_in + ((Math.random() - 0.5) * 2345) / 1000 : 15.27, 1.52));
            curOut = Math.min(200, Math.max(last? last.cur_out + ((Math.random() - 0.5) * 1234) / 1000 : 8.96, 1.52));

            ifChartData.push({
                date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),
                cur_in: curIn,
                cur_out: curOut
            });

            if (ifChartData.length > length + 1) {
                ifChartData.splice(0, 1);
            }

            ifAxis = interfaceChart.axes.get(1);

            var toDate = ifAxis.toDate,
                lastDate = ifChartData[ifChartData.length - 1].date;

            if (+toDate < +lastDate) {
                ifAxis.fromDate = ifChartData[0].date;
                ifAxis.toDate = ifChartData[ifChartData.length -1].date;

                interfaceChart.markerIndex = 1;
            } else {
                ifAxis.fromDate = ifChartData[0].date;
                ifAxis.toDate = Ext.Date.add(ifChartData[0].date, Ext.Date.SECOND, (length * step));
            }

            if (peakIn < curIn) {
                peakIn = curIn;
            }
            if (peakOut < curOut) {
                peakOut = curOut;
            }

            if (cnt === 0) {
                avgIn = curIn;
                avgOut = curOut;
            } else {
                if (cnt > 1000000) {
                    cnt = 1000000;
                }
                avgIn = ((avgIn * cnt) + curIn) / (cnt + 1);
                avgOut = ((avgOut * cnt) + curOut) / (cnt + 1);
            }

            cnt++;

            curInLabel.setText(curIn.toFixed(2) + " kbps");
            curOutLabel.setText(curOut.toFixed(2) + " kbps");
            avgInLabel.setText(avgIn.toFixed(2) + " kbps");
            avgOutLabel.setText(avgOut.toFixed(2) + " kbps");
            peakInLabel.setText(peakIn.toFixed(2) + " kbps");
            peakOutLabel.setText(peakOut.toFixed(2) + " kbps");

            ifChartStore.loadData(ifChartData);
        };
    },

    setInstanceDashboard: function() {

        this.setInstanceDashboardChart();


        var viewVmForm = Ext.getCmp("viewVmForm");

        viewVmForm.getForm().reset();
        viewVmForm.getForm().waitMsgTarget = viewVmForm.getEl();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/vm/' +vmConstants.selectRecord.get("id") + '?detail=true',
            method : 'GET',
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : viewVmForm.getEl(),
            success: function(response){

                var data = Ext.JSON.decode(response.responseText);

                if(data.length > 0) {

                    var vmData = data[0];
                    var form = viewVmForm.getForm();

                    form.setValues(vmData);

                    var gridData = [];
                    var interfaceKey = Object.keys(vmData.interfaces);

                    Ext.each(interfaceKey, function(nic) {
                        gridData.push({
                            name : nic,
                            ipaddr : vmData.interfaces[nic].ipaddr,
                            macaddr : vmData.interfaces[nic].macaddr
                        });

                    });

                    gridData.reverse();

                    Ext.getStore("VmInterfaceStore").loadData(gridData, false);


                }
            }
        });

    },

    setInstanceDashboardChart: function() {
        var centerContainer = this.getCenterContainer();
        var vmDetailTab = Ext.getCmp("networkInstanceTabPanel");

        if (centerContainer.layout.getActiveItem().itemId !== "VmManagementPanel") {
            return;
        } else if(vmDetailTab.getActiveTab() !== vmDetailTab.items.getAt(0)) {
            return;
        }


        //CPU
        Ext.Ajax.request({
            url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414488656.039&target='
                    + vmConstants.selectRecord.get("id") + '.cpu.0.cpu.user.value&from=-1minutes&format=json',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);

                if(columnData.length > 0) {
                    var data = columnData[0];

                    // Get the quality field from record
                    // Update chart with data
                    var chartList = [];
                    Ext.each(data.datapoints, function (chartData, aaa) {
                        var chartCol = {};
                        chartCol.cpu = chartData.value;
                        chartCol.date = new Date(chartData.date*1000);

                        chartList.push(chartCol);
                    });

                    //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);

                    Ext.getStore('VmCpuChartStore').loadData(chartList, false);
                }
            }
        });

        //Memory
        Ext.Ajax.request({
            url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414489011.422&target='
                    + vmConstants.selectRecord.get("id") + '.memory.memory.free.value&from=-1minutes&format=json',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);
                if(columnData.length > 0) {

                    var data = columnData[0];

                    // Get the quality field from record
                    // Update chart with data
                    var chartList = [];
                    Ext.each(data.datapoints, function (chartData) {
                        var chartCol = {};
                        chartCol.memory = chartData.value;
                        chartCol.date = new Date(chartData.date*1000);
                        chartList.push(chartCol);
                    });

                    //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);

                    Ext.getStore('VmMemoryChartStore').loadData(chartList, false);
                }
            }
        });

        //Network
        Ext.Ajax.request({
            url: GLOBAL.graphiteUrlPrefix + 'render/?_salt=1414489467.473&target='
                    + vmConstants.selectRecord.get("id") + '.interface.if_packets.eth0.tx&from=-1minutes&format=json',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);

                if(columnData.length > 0) {

                    var data = columnData[0];

                    // Get the quality field from record
                    // Update chart with data
                    var chartList = [];
                    Ext.each(data.datapoints, function (chartData) {
                        var chartCol = {};
                        chartCol.network = chartData.value;
                        chartCol.date = new Date(chartData.date*1000);
                        chartList.push(chartCol);
                    });

                    //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);

                    Ext.getStore('VmNetworkChartStore').loadData(chartList, false);
                }
            }
        });



        // Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.

        setTimeout(function() {

            vmConstants.me.setInstanceDashboardChart();

        }, 5000);

    },

    setNic: function() {
        Ext.getCmp("comboNicName").setValue("");
        Ext.getCmp("comboNicName").up('toolbar').down('button').hide();

        Ext.getCmp("viewNicForm").getForm().reset();

        var comboStore = Ext.getStore("VmNicStore");
        comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet';

        if(vmConstants.initComboNic) {
            comboStore.removeAll();
            comboStore.load();

        }
    },

    saveNic: function(button) {

        var combo = Ext.getCmp("comboNicName"),
            comboValue = combo.getValue(),
            store = combo.getStore(),
            record = store.findRecord("ethName", comboValue);

        var viewNicForm = Ext.getCmp("viewNicForm");
        var formData = viewNicForm.getForm().getFieldValues();

        if(viewNicForm.isValid()) {

            if(formData.ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "NIC의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var sendData = {};
            //sendData.after = viewNicForm.getForm().getFieldValues();

            sendData.after = formData;
            sendData.after.disable = (!Ext.getCmp("checkNicDisable").getValue());
            if(Ext.getCmp("checkNicDhcp").getValue() == true) {
                sendData.after.address = "dhcp";
            }

            sendData.before = {
                "address"		: (record.get("address") == null ? "" : record.get("address")),
                "ipaddr"		: (record.get("ipaddr") == null ? "" : record.get("ipaddr")),
                "ipv6_address"	: (record.get("ipv6_address") == null ? "" : record.get("ipv6_address")),
                "duplex"		: (record.get("duplex") == null ? "" : record.get("duplex")),
                "hw-id"			: (record.get("hw-id") == null ? "" : record.get("hw-id")),
                "speed"			: (record.get("speed") == null ? "" : record.get("speed")),
                "mtu"			: (record.get("mtu") == null ? "" : record.get("mtu")),
                "config"		: (record.get("config") == null ? "" : record.get("config")),
                "ethName"		: (record.get("ethName") == null ? "" : record.get("ethName")),
                "smp_affinity"	: (record.get("smp_affinity") == null ? "" : record.get("smp_affinity")),
                "disable"		: (record.get("disable") == null ? "" : record.get("disable"))
            };

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/if/" + comboValue,
                method: "PUT",
                headers : {
                    "Content-Type" : "application/json"
                },
                waitMsg: 'Saving Data...',
                jsonData: sendData,
                success: function (response) {

                    if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            Ext.Ajax.request({
                                url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/' + comboValue,
                                waitMsg: 'Loading...',
                                disableCaching : true,
                                success: function(response){

                                    var columnData = Ext.decode(response.responseText);
                                    if(columnData.length > 0) {

                                        var data = columnData[0];

                                        record.set("duplex", data.duplex);
                                        record.set("speed", data.speed);

                                        Ext.getCmp("viewNicForm").getForm().loadRecord(record);
                                    }
                                }
                            });
                        });

                    }
                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
            });

        }

    },

    setBonding: function() {
        Ext.getCmp("comboBondingName").setValue("");

        Ext.getCmp("viewBondingForm").getForm().reset();

        var comboStore = Ext.getStore("VmBondingStore");
        comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/bonding/all';

        if(vmConstants.initComboBonding) {
            comboStore.removeAll();
            comboStore.load();

        }
    },

    popVmBondingWindow: function() {
        //VM Host 생성 팝업 호출

        var popWindow = Ext.create("widget.AddBondingWindow");
        popWindow.show();
    },

    createVMBonding: function(button) {
        var addBondingForm = Ext.getCmp("addBondingForm");
        var formData = addBondingForm.getForm().getFieldValues();

        if(addBondingForm.isValid()) {

            var checks = addBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            var sendData = {};

            sendData.address = formData.address;
            sendData.mode = formData.mode;
            sendData.ethernets = ethernets;

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + formData.bondid,
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addBondingForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.');

                        var comboStore = Ext.getStore("VmBondingStore");
                        comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/bonding/all';
                        comboStore.removeAll();
                        comboStore.load();

                        addBondingForm.up('window').close();

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
             });

        }

    },

    saveVMBonding: function(button) {

        var combo = Ext.getCmp("comboBondingName"),
            comboValue = combo.getValue(),
            store = combo.getStore(),
            record = store.findRecord("ethName", comboValue);

        var viewBondingForm = Ext.getCmp("viewBondingForm");
        var formData = viewBondingForm.getForm().getFieldValues();

        if(viewBondingForm.isValid()) {

            var checks = viewBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            checks = viewBondingForm.down('#bondingNICGroup').getBoxes();
            Ext.each(checks, function (checkBox) {
                delete formData[checkBox.getName()];
            });

            var sendData = {};

            formData.ethernets = ethernets;

            sendData.after = formData;
            sendData.after.disable = (!Ext.getCmp("checkBondingDisable").getValue());

            sendData.before = {
                "address"		: (record.get("address") == null ? "" : record.get("address")),
                "ipv6_address"	: (record.get("ipv6_address") == null ? "" : record.get("ipv6_address")),
                "mode"			: (record.get("mode") == null ? "" : record.get("mode")),
                "hw-id"			: (record.get("hw-id") == null ? "" : record.get("hw-id")),
                "mtu"			: (record.get("mtu") == null ? "" : record.get("mtu")),
                "config"		: (record.get("config") == null ? "" : record.get("config")),
                "ethernets"		: (record.get("ethernets") == null ? "" : record.get("ethernets")),
                "disable"		: (record.get("disable") == null ? "" : record.get("disable"))
            };

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + comboValue,
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewBondingForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            combo.setValue("");
                            Ext.Ajax.request({
                                url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + comboValue,
                                method: "GET",
                                waitMsg: 'Loading...',
                                disableCaching : true,
                                success: function(response){

                                    var columnData = Ext.decode(response.responseText);

                                    if(columnData != null) {

                                        var data = columnData[comboValue];
                                        data.ethernets = columnData.ethernets;
                                        data.disables = columnData.disables;

                                        record.set(data);
                                        combo.setValue(comboValue);
                                    }
                                }
                            });
                        });


                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
             });

        }
    },

    deleteVMBonding: function(button) {
        Ext.MessageBox.confirm('Confirm', '해당 Bonding 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var combo = Ext.getCmp("comboBondingName"),
                    comboValue = combo.getValue(),
                    store = combo.getStore(),
                    record = store.findRecord("ethName", comboValue);

                var viewBondingForm = Ext.getCmp("viewBondingForm");

                if(viewBondingForm.isValid()) {

                    var sendData = {
                        "address"		: record.get("address"),
                        "mode"			: record.get("mode"),
                        "ethernets"		: record.get("ethernets")
                    };


                    Ext.Ajax.request({
                         url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/bonding/" + record.get("ethName"),
                         method: "DELETE",
                         headers : {
                             "Content-Type" : "application/json"
                         },
                         waitMsg: 'Delete Data...',
                         waitMsgTarget : viewBondingForm.getEl(),
                         jsonData: sendData,
                         success: function (response) {

                             if(response.status == 200) {

                                Ext.Msg.alert('Success', '삭제가 완료되었습니다.');

                                var comboStore = Ext.getStore("VmBondingStore");
                                comboStore.getProxy().url = GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/bonding/all';
                                comboStore.remove(record);

                                Ext.getCmp("comboBondingName").setValue("");


                             }

                        },
                        failure: function (response) {
                            Ext.Msg.alert('Failure', response.responseText);
                        }
                     });

                }
            }

        });

    },

    renderNicCheckbox: function(component, msgTarget) {

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet',
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : msgTarget,
            success: function(response){

                if(response.status == 200) {

                    var data = Ext.decode(response.responseText);
                    var i_max = data.length;
                    var newCheckboxes = new Array();
                    for( i = 0; i < i_max; i++ ) {

                        var disabledFlag = true;
                        if(data[i]["bond-group"] == null || data[i]["bond-group"].length == 0) {
                            disabledFlag = false;
                        }

                        if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                            disabledFlag = true;
                        }

                        component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: data[i].ethName, inputValue: data[i].ethName, disabled:disabledFlag }));

                    }
                }

            }
        });

    },

    activeNicCheckbox: function(component, msgTarget) {
        component.removeAll();

        if(vmConstants.vmNicRecords == null) {

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet',
                disableCaching : true,
                waitMsg: 'Loading...',
                waitMsgTarget : msgTarget,
                success: function(response){

                    if(response.status == 200) {

                        var data = Ext.decode(response.responseText);

                        vmConstants.vmNicRecords = data;

                        var i_max = data.length;
                        var newCheckboxes = new Array();
                        for( i = 0; i < i_max; i++ ) {

                            var disabledFlag = false;
                            var fieldName = data[i].ethName;
                            if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                                disabledFlag = true;
                                fieldName = "disableCheck";
                            }
                            component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));
                        }
                    }

                }
            });


        } else {

            var data = vmConstants.vmNicRecords;

            var i_max = data.length;
            var newCheckboxes = new Array();
            for( i = 0; i < i_max; i++ ) {

                var disabledFlag = false;
                var fieldName = data[i].ethName;
                if(data[i].ipaddr == vmConstants.selectRecord.get("mgraddr")) {
                    disabledFlag = true;
                    fieldName = "disableCheck";
                }

                component.add(new Ext.form.Checkbox({ boxLabel: data[i].ethName, name: fieldName, inputValue: data[i].ethName }));
            }
        }

    },

    setNat: function() {
        var store;
        var form = Ext.getCmp("viewNatForm");

        Ext.getCmp("comboRuleName").setValue("");
        form.getForm().reset();

        if(vmConstants.vmNatRecords == null) {

            this.setVmNatRecords();

        } else {

            var datas = vmConstants.vmNatRecords;

            var recordData = [];
            Ext.each(datas, function (record){

                var addFlag = true;

                Ext.each(recordData, function(rData) {

                    if(record.rule === rData.rule) {

                        rData.ruleTypes.push(record.isSource);

                        addFlag = false;
                        return false;
                    }
                });

                if(addFlag) {

                    record.ruleTypes = [];
                    record.ruleTypes.push(record.isSource);
                    recordData.push(record);

                }

            });

            store = Ext.create('Ext.data.Store', {
                model: 'spider.model.VmNatModel',
                data: recordData
            });

            Ext.getCmp("comboRuleName").bindStore(store);

        }

        this.renderNicComboBox([form.getForm().findField("ibnic"), form.getForm().findField("obnic")], form.getEl());
    },

    setVmNatRecords: function(comboValue, radioValue) {
        var store;
        var form = Ext.getCmp("viewNatForm");

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'nfv/' +vmConstants.selectRecord.get("id") + '/nat',
            disableCaching : true,
            waitMsg: 'Loading...',
            waitMsgTarget : form.getEl(),
            success: function(response){

                if(response.status == 200) {

                    var datas = Ext.decode(response.responseText);

                    vmConstants.vmNatRecords = datas;

                    var recordData = [];
                    Ext.each(datas, function (record){

                        var addFlag = true;

                        Ext.each(recordData, function(rData) {

                            if(record.rule === rData.rule) {

                                rData.ruleTypes.push(record.isSource);

                                addFlag = false;
                                return false;
                            }
                        });

                        if(addFlag) {

                            record.ruleTypes = [];
                            record.ruleTypes.push(record.isSource);
                            recordData.push(record);

                        }

                    });

                    store = Ext.create('Ext.data.Store', {
                        model: 'spider.model.VmNatModel',
                        data: recordData
                    });

                    Ext.getCmp("comboRuleName").bindStore(store);

                    if(comboValue != null) {

                        vmConstants.me.changeNatData(comboValue, radioValue);

                    }
                }

            }
        });


    },

    changeNatData: function(comboValue, radioValue) {
        var data;
        var form = Ext.getCmp("viewNatForm");

        if(comboValue == null || comboValue == "") {
            return;
        }

        if(radioValue == null) {

            var isSource = false;
            var isDestination = false;
            Ext.each(vmConstants.vmNatRecords, function(record) {
                if(record.rule === comboValue) {

                    if(record.isSource) {
                        isSource = true;

                        data = record;

                    } else {
                        isDestination = true;

                        if(isSource == false) {
                            data = record;
                        }
                    }
                }
            });

            Ext.getCmp("natRuleSource").setDisabled(!isSource);
            Ext.getCmp("natRuleDestination").setDisabled(!isDestination);

            if(isSource) {
                Ext.getCmp("natRuleSource").setValue(true);

            } else {
                Ext.getCmp("natRuleDestination").setValue(true);

            }


        } else {

            var isSource = (radioValue == "source" ? true : false);
            Ext.each(vmConstants.vmNatRecords, function(record) {

                if(record.rule === comboValue && record.isSource === isSource) {
                    data = record;
                }
            });

            form.getForm().reset();

        }

        form.getForm().setValues(data);

        form.getForm().findField("rulenum").setValue(data.rule);

        if(data.isSource) {

            form.getForm().findField("ruletype").setValue("source");
            form.getForm().findField("ibnic").setDisabled(true);
            form.getForm().findField("obnic").setDisabled(false);

        } else {

            form.getForm().findField("ruletype").setValue("destination");
            form.getForm().findField("ibnic").setDisabled(false);
            form.getForm().findField("obnic").setDisabled(true);

        }

        form.getForm().findField("ibnic").setValue(data["inbound-interface"]);
        form.getForm().findField("obnic").setValue(data["outbound-interface"]);

        if(data.source != null) {
            form.getForm().findField("srcaddr").setValue(data.source.address);
            form.getForm().findField("srcport").setValue(data.source.port);
        }

        if(data.destination != null) {
            form.getForm().findField("destaddr").setValue(data.destination.address);
            form.getForm().findField("destport").setValue(data.destination.port);
        }

        if(data.translation != null) {

            if(data.translation.address == "masquerade") {
                form.getForm().findField("masquerade").setValue(true);
            } else {
                form.getForm().findField("transaddr").setValue(data.translation.address);
                form.getForm().findField("transport").setValue(data.translation.port);
            }

        }

    },

    renderNicComboBox: function(components, msgTarget) {

        var store;

        if(vmConstants.vmNicRecords == null) {

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/nfv/' +vmConstants.selectRecord.get("id") + '/if/_all?filter=ethernet',
                disableCaching : true,
                waitMsg: 'Loading...',
                waitMsgTarget : msgTarget,
                success: function(response){

                    if(response.status == 200) {

                        var datas = Ext.decode(response.responseText);

                        vmConstants.vmNicRecords = datas;

                        store = Ext.create('Ext.data.Store', {
                            model: 'spider.model.VmNicModel',
                            data: datas
                        });

                        Ext.each(components, function(component) {

                            component.bindStore(store);
                        });
                    }

                }
            });


        } else {

            var datas = vmConstants.vmNicRecords;

            store = Ext.create('Ext.data.Store', {
                model: 'spider.model.VmNicModel',
                data: datas
            });

            Ext.each(components, function(component) {

                component.bindStore(store);
            });
        }

    },

    popVmNatWindow: function() {
        //VM Host 생성 팝업 호출
        var popWindow = Ext.create("widget.AddNatWindow");
        popWindow.show();

        Ext.getCmp("addNatForm").getForm().findField("ruletype").setValue("source");
    },

    createVMNat: function(button) {
        var addNatForm = Ext.getCmp("addNatForm");
        var formData = addNatForm.getForm().getFieldValues();

        if(addNatForm.isValid()) {
        /*
            var checks = addBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            var sendData = {};

            sendData.address = formData.address;
            sendData.mode = formData.mode;
            sendData.ethernets = ethernets;
        */
            if(formData.masquerade == false) {
                formData.masquerade = "";
            }

            if(formData.disable == false) {
                formData.disable = "";
            }

            if(formData.exclude == false) {
                formData.exclude = "";
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addNatForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '등록이 완료되었습니다.', function (){

                            addNatForm.up('window').close();

                            Ext.getCmp("comboRuleName").setValue("");
                            vmConstants.me.setVmNatRecords();

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
             });

        }

    },

    saveVMNat: function(button) {
        var viewNatForm = Ext.getCmp("viewNatForm");
        var formData = viewNatForm.getForm().getFieldValues();

        if(viewNatForm.isValid()) {
        /*
            var checks = addBondingForm.down('#bondingNICGroup').getChecked();

            if(checks.length < 2) {
                Ext.Msg.alert('Failure', "NIC는 두개 이상 체크하셔야 합니다.");
                return;
            }

            if(formData.address == vmConstants.selectRecord.get("mgraddr")) {
                Ext.Msg.alert('Failure', "Bonding의 IP 주소는 VM의 IP 주소와 동일하지 않도록 설정하셔야 합니다.");
                return;
            }

            var ethernets = [];
            Ext.each(checks, function(checkBox){
                ethernets.push(checkBox.getName());
            });

            var sendData = {};

            sendData.address = formData.address;
            sendData.mode = formData.mode;
            sendData.ethernets = ethernets;
        */

            if(formData.masquerade == false) {
                formData.masquerade = "";
            }

            if(formData.disable == false) {
                formData.disable = "";
            }

            if(formData.exclude == false) {
                formData.exclude = "";
            }

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                 method: "PUT",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : viewNatForm.getEl(),
                 jsonData: formData,
                 success: function (response) {

                     if(response.status == 200) {

                        Ext.Msg.alert('Success', '저장이 완료되었습니다.', function (){

                            viewNatForm.getForm().reset();
                            vmConstants.me.setVmNatRecords(formData.rulenum, formData.ruletype);

                        });

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
             });

        }

    },

    deleteVMNat: function(button) {
        Ext.MessageBox.confirm('Confirm', '해당 NAT 정보를 삭제하시겠습니까?', function(btn){

            if(btn == "yes"){

                var viewNatForm = Ext.getCmp("viewNatForm");
                var formData = viewNatForm.getForm().getFieldValues();

                var sendData = {
                    "rulenum"		: formData.rulenum,
                    "ruletype"		: formData.ruletype
                };


                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "nfv/" + vmConstants.selectRecord.get("id") + "/nat",
                    method: "DELETE",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    waitMsg: 'Delete Data...',
                    waitMsgTarget : viewNatForm.getEl(),
                    jsonData: sendData,
                    success: function (response) {

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.', function (){

                                Ext.getCmp("comboRuleName").setValue("");
                                viewNatForm.getForm().reset();
                                vmConstants.me.setVmNatRecords();

                            });

                        }

                    },
                    failure: function (response) {
                        Ext.Msg.alert('Failure', response.responseText);
                    }
                });

            }


        });
    }

});
