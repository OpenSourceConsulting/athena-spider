/*
 * File: app/controller/LoginController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.LoginController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'userId',
            selector: '#userId'
        },
        {
            ref: 'password',
            selector: '#password'
        },
        {
            ref: 'loginBtn',
            selector: '#loginBtn'
        }
    ],

    onIntroPanelActivate: function(component, eOpts) {
        //Login Session Check
        var sessionInfo = Ext.getStore('SessionStore');
        sessionInfo.load();

        if(null != sessionInfo.getAt(0)){
            this.successfulLogin(sessionInfo.getAt(0), "model");

        } else {

            // Create new login form window
            var login = Ext.create("widget.LoginWindow");

            // Show window
            login.show();

            this.getUserId().focus();

        }

    },

    doLogin: function(button, e, eOpts) {

        var form = Ext.getCmp("loginForm"),			// Login form
            formWindow = Ext.getCmp('LoginWindow'),	// Login form window
            values = form.getValues();				// Form values

        var me = this;

        var userId = this.getUserId(),
            password = this.getPassword();

        var userIdVal = userId.getValue(),
            passwordVal = password.getValue();

        // Success
        var successCallback = function(resp, ops) {

            if(resp.status == 200) {
                me.successfulLogin(Ext.decode(resp.responseText), "json");
            } else {
                failureCallback(resp, ops);
            }

        };

        // Failure
        var failureCallback = function(resp, ops) {

            // Show login failure error
            Ext.Msg.alert({
                title: "Login Failure",
                msg: "로그인에 실패하였습니다.",
                buttons: Ext.Msg.OK,
                fn: function(choice) {
                    password.setValue("");
                    password.focus();
                },
                icon: Ext.Msg.ERROR
            });
        };

        if (userIdVal === "") {

            // username must not be null.
            Ext.Msg.show({
                title: "Message",
                msg: "사용자아이디를 입력해주세요.",
                buttons: Ext.Msg.OK,
                fn: function(choice) {
                    userId.focus();
                },
                icon: Ext.Msg.WARNING
            });
        } else if (passwordVal === "") {

            // password must not be null.
            Ext.Msg.show({
                title: "Message",
                msg: "비밀번호를 입력해주세요.",
                buttons: Ext.Msg.OK,
                fn: function(choice) {
                    password.focus();
                },
                icon: Ext.Msg.WARNING
            });
        } else {

            //TODO: Login using server-side authentication service
            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + "user/login",
                method: "POST",
                headers : {
                    "Content-Type" : "application/json"
                },
                jsonData: form.getForm().getFieldValues(),
                success: successCallback,
                failure: failureCallback
            });

        }

    },

    onUserIdSpecialkey: function(field, e, eOpts) {

        if (e.getKey() == e.ENTER) {
            this.doLogin();
        }
    },

    onPasswordSpecialkey: function(field, e, eOpts) {

        if (e.getKey() == e.ENTER) {
            this.doLogin();
        }
    },

    successfulLogin: function(session, opt) {

        //Login Session 설정
        var me = this;
        this.session = session;

        var sessionInfo = Ext.getStore('SessionStore');
        sessionInfo.removeAll();
        sessionInfo.sync();

        var newRecord;
        if(opt == 'json') {

            newRecord = new spider.model.SessionModel({
                userId		: this.session.userId,
                userName	: this.session.userName,
                email		: this.session.email
            });

        } else {

            newRecord = new spider.model.SessionModel({
                userId		: this.session.get("userId"),
                userName	: this.session.get("userName"),
                email		: this.session.get("email")
            });

        }

        sessionInfo.add(newRecord);
        sessionInfo.sync();

        // Close window
        var loginWindow = Ext.getCmp('LoginWindow');
        if(loginWindow != null) {
            Ext.getCmp('LoginWindow').destroy();
        }

        //Main Layout 설정
        Ext.getCmp("AthenaSpider").layout.setActiveItem(1);
        Ext.getCmp("loginUserName").setText(newRecord.get("userName"));

        Ext.getCmp("logoutLabel").getEl().on('click',function(){
            me.doLogout();
        });
    },

    doLogout: function() {
        var sessionInfo = Ext.getStore('SessionStore');
        sessionInfo.removeAll();
        sessionInfo.sync();

        window.location.reload();
    },

    init: function(application) {
                var login = this;

                //Login Constants
                Ext.define('loginConstants', {
                    singleton: true,
                    me : login
                });

        this.control({
            "#introPanel": {
                activate: this.onIntroPanelActivate
            },
            "#loginBtn": {
                click: this.doLogin
            },
            "#userId": {
                specialkey: this.onUserIdSpecialkey
            },
            "#password": {
                specialkey: this.onPasswordSpecialkey
            }
        });
    }

});
