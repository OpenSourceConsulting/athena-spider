/*
 * File: app/controller/DashboardController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.DashboardController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerPanel'
        }
    ],

    init: function(application) {
        var dashBoard = this;

        //Dashboard Menu Constants
        Ext.define('dashboardConstants', {
            singleton: true,
            me : dashBoard,

            renderInterval : null,
            centerInterval : null
        });
    },

    renderDashboard: function() {
        var centerContainer = this.getCenterContainer();
        var dashboardPanel = Ext.getCmp("DashboardPanel");

        if (centerContainer.layout.getActiveItem().itemId !== "DashboardPanel") {
            return;
        }

        Ext.getCmp("DashBoardLeftPanel").removeAll();
        Ext.getCmp("DashBoardRightPanel").removeAll();

        Ext.each(Ext.getCmp("listMenuPanel").store.getRootNode().childNodes, function(record, idx){

            var memory = 0,
            network = 0;

            var nodePanel = Ext.getCmp("DashBoardNodePanel").cloneConfig({itemId : "DashBoardNodePanel"+idx});

            nodePanel.down('#VmHostName').setText(record.get('text'));

            //VM 정보
            var vms = nodePanel.down('#vmNamePanel').items.items;
            var vmCpus = nodePanel.down('#vmCpuPanel').items.items;
            var vmMemorys = nodePanel.down('#vmMemPanel').items.items;
            var vmDisks = nodePanel.down('#vmNetPanel').items.items;

            //CPU
            Ext.Ajax.request({
                url : GLOBAL.apiUrlPrefix + 'mon/graphite/hostcpu/' + record.get('id'),
                disableCaching : true,
                failMsg : false,
                success: function(response){

                    var cpu = Ext.decode(response.responseText);


                    nodePanel.down('#cpuBar').updateProgress(cpu / 100, cpu.toFixed(2) + "%");
                    if(cpu <= 50) {
                        nodePanel.down('#VmHostStat').setText('<center><img src="resources/images/icons/status_01.png" width="36" height="36" border="0"></center>', false);
                    } else if(cpu <= 70) {
                        nodePanel.down('#VmHostStat').setText('<center><img src="resources/images/icons/status_02.png" width="36" height="36" border="0"></center>', false);
                    } else {
                        nodePanel.down('#VmHostStat').setText('<center><img src="resources/images/icons/status_03.png" width="36" height="36" border="0"></center>', false);
                    }

                }
            });

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/graphite/vmhostcpu/' + record.get('id'),
                method : "GET",
                disableCaching : true,
                success: function(cpuResponse){

                    if(cpuResponse.status == 200) {

                        var cpuData = Ext.JSON.decode(cpuResponse.responseText);

                        Ext.Ajax.request({
                            url: GLOBAL.apiUrlPrefix + 'mon/graphite/vmhostmem/' + record.get('id'),
                            method : "GET",
                            disableCaching : true,
                            success: function(memResponse){

                                if(memResponse.status == 200) {

                                    var memData = Ext.JSON.decode(memResponse.responseText);

                                    Ext.Ajax.request({
                                        url: GLOBAL.apiUrlPrefix + 'mon/graphite/vmhostnet/' + record.get('id'),
                                        method : "GET",
                                        disableCaching : true,
                                        success: function(netResponse){

                                            if(netResponse.status == 200) {

                                                var netData = Ext.JSON.decode(netResponse.responseText);

                                                var vmKey = Object.keys(cpuData);

                                                if(vmKey.length > 0) {

                                                    Ext.each(vmKey, function(vmId, vIdx) {

                                                        if(vIdx < 4) {
                                                            vms[vIdx+1].setText(cpuData[vmId].vmname);
                                                            vmCpus[vIdx+1].setText(cpuData[vmId].value.toFixed(0) + "%");
                                                            vmMemorys[vIdx+1].setText((memData[vmId].value/1024/1024).toFixed(2) + "MB");
                                                            vmDisks[vIdx+1].setText(netData[vmId].value.toFixed(0) + "%");
                                                        }
                                                        memory += parseFloat(memData[vmId].value);
                                                        network += parseFloat(netData[vmId].value);

                                                    });

                                                    network = network / vmKey.length;

                                                } else {
                                                    memory = 0; network = 0;

                                                }

                                                nodePanel.down('#memoryBar').updateProgress(memory / record.get("maxmem"), (memory/1024/1024).toFixed(2) + "MB");
                                                nodePanel.down('#networkBar').updateProgress(network / 100, network.toFixed(2) + "%");

                                            }
                                        }
                                    });

                                }
                            }
                        });

                    }
                }
            });


            //node add
            if(idx%2 === 0) {
                Ext.getCmp("DashBoardLeftPanel").add(nodePanel);
            } else {
                Ext.getCmp("DashBoardRightPanel").add(nodePanel);
            }

            nodePanel.show();
            nodePanel.body.on('click', function(e) {
                vmHostConstants.me.popVMHostInfoWindow(record);
            });

        });

        Ext.getBody().unmask();

    },

    setCenterStat: function() {

        var center = Ext.getCmp("lnbLocationCombo").getValue();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/graphite/center/' + (center == "대전" ? 0 : 1),
            method : "GET",
            disableCaching : true,
            success: function(netResponse){

                if(netResponse.status == 200) {

                    var cpu = netResponse.responseText;

                    if(cpu <= 50) {
                        Ext.getCmp('locationStat').setText('<center><img src="resources/images/icons/status_01.png" width="36" height="36" border="0"></center>', false);
                    } else if(cpu <= 70) {
                        Ext.getCmp('locationStat').setText('<center><img src="resources/images/icons/status_02.png" width="36" height="36" border="0"></center>', false);
                    } else {
                        Ext.getCmp('locationStat').setText('<center><img src="resources/images/icons/status_03.png" width="36" height="36" border="0"></center>', false);
                    }

                }
            }
        });
    }

});
