/*
 * File: app/controller/VmHostController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.VmHostController', {
    extend: 'Ext.app.Controller',

    onListMenuPanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {

        if(record.get("type") === 'vm') {

            var position = e.getXY();
            e.stopEvent();

            vmHostConstants.actionRecord = record;

            Ext.Ajax.request({
                url: GLOBAL.apiUrlPrefix + 'mon/vm/' + record.get("vmhost") + "/" + record.get("text") + "/status",
                method : 'GET',
                disableCaching : true,
                success: function(response){

                    var data = Ext.JSON.decode(response.responseText);

                    if(data.length === 0 || data[0].state.toLowerCase() === "running") {
                        vmHostConstants.contextMenu.items.items[6].setDisabled(true);
                    } else {
                        vmHostConstants.contextMenu.items.items[6].setDisabled(false);
                    }

                    vmHostConstants.contextMenu.showAt(position);

                },
                failure: function (response) {

                    vmHostConstants.contextMenu.items.items[6].setDisabled(true);
                    vmHostConstants.contextMenu.showAt(position);

                }
            });


        } else {
            e.stopEvent();
        }
    },

    onListMenuPanelItemClick: function(dataview, record, item, index, e, eOpts) {
        if(record.get("type") === 'vmhost') {
            this.popVMHostInfoWindow(record);
        } else {
            menuConstants.me.viewManagementMenu(record);
        }
    },

    init: function(application) {
                var vmHostTree = this;

                var vmHostContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'NIC 관리',
                        handler: function() {
                            alert('NIC 관리');
                        }
                    },
                    { text: '라우팅',
                        handler: function() {
                            alert('라우팅');
                        }
                    },
                    { text: '파이어월',
                        handler: function() {
                            alert('파이어월');
                        }
                    },
                    { text: 'NAT 관리',
                        handler: function() {
                            alert('NAT 관리');
                        }
                    },
                    {
                        xtype: 'menuseparator'
                    },
                    { text: 'VM 시작/중단',
                        handler: function() {
                            alert('VM 시작/중단');
                        }
                    },
                    { text: 'VM 삭제',
                        handler: function() {
                            vmHostTree.deleteVm();
                        }
                    }
                    ]

                });

                //VM Host Tree Constants
                Ext.define('vmHostConstants', {
                    singleton: true,
                    me : vmHostTree,

                    contextMenu: vmHostContextMenu,
                    selectRecord : null,
                    actionRecord : null
                });

        this.control({
            "#listMenuPanel": {
                beforeitemcontextmenu: this.onListMenuPanelBeforeItemContextMenu,
                itemclick: this.onListMenuPanelItemClick
            }
        });
    },

    popAddVMHostWindow: function() {
        //VM Host 생성 팝업 호출

        var popWindow = Ext.create("widget.AddVmHostWindow");
        popWindow.show();
    },

    popVMHostInfoWindow: function(record) {
        //VM Host Info 팝업 호출

        vmHostConstants.selectRecord = record;

        var popWindow = Ext.create("widget.VMHostInfoWindow");
        popWindow.show();

        popWindow.down("#VmHostName").setText(record.get("text"));

        var viewVmHostForm = Ext.getCmp("viewVmHostForm");

        viewVmHostForm.getForm().reset();
        viewVmHostForm.getForm().waitMsgTarget = viewVmHostForm.getEl();

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/vmhost/' + record.get("id") + "?detail=true",
            method : 'GET',
            disableCaching : true,
            waitMsg: 'Loading...',
            success: function(response){

                var data = Ext.JSON.decode(response.responseText);

                if(data.length > 0) {

                    var hostData = data[0];
                    var form = viewVmHostForm.getForm();

                    form.setValues(data[0]);

                    //하드웨어 정보
                    var coreSocket = "0";
                    var coreThread = "0";
                    Ext.each(hostData.info, function(cpu){

                        if(cpu.name === "CPU model")
                            form.findField("cpuModel").setValue(cpu.value);

                        else if(cpu.name === "CPU(s)")
                            form.findField("cpus").setValue(cpu.value);

                        else if(cpu.name === "CPU socket(s)")
                            form.findField("cpuSocket").setValue(cpu.value);

                        else if(cpu.name === "Core(s) per socket")
                            coreSocket = cpu.value;

                        else if(cpu.name === "Thread(s) per core")
                            coreThread = cpu.value;

                        else if(cpu.name === "Memory size")
                            form.findField("memSize").setValue(cpu.value);

                    });

                    form.findField("cpuCore").setValue(coreSocket + "/" + coreThread);

                    //Interface 정보
                    Ext.getStore("VmHostInterfaceStore").loadData(hostData.interfaces, false);

                    //VM정보
                    Ext.each(hostData.version, function(vm){

                        if(vm.name === "Running hypervisor")
                            form.findField("hypervisor").setValue(vm.value);

                        else if(vm.name === "Using API")
                            form.findField("vmApi").setValue(vm.value);

                        else if(vm.name === "Using library")
                            form.findField("useLib").setValue(vm.value);

                    });


                }
            }
        });

    },

    createVMHost: function(button) {
        var addVmHostForm = Ext.getCmp("addVmHostForm");

        if(addVmHostForm.isValid()) {

            var sendData = addVmHostForm.getForm().getFieldValues();

             Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "vmhost",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addVmHostForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                         Ext.Msg.alert('Success', '등록이 완료되었습니다.');

                         menuConstants.me.renderServerTree();
                         addVmHostForm.up('window').close();

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
             });

        }

    },

    popAddVmWindow: function() {
        //VM 생성 팝업 호출
        var popWindow = Ext.create("widget.AddVmWindow");
        popWindow.show();

        Ext.getCmp("addVmForm").getForm().findField("vmhostId").setValue(vmHostConstants.selectRecord.get("id"));
        Ext.getCmp("addVmForm").getForm().findField("vmhostName").setValue(vmHostConstants.selectRecord.get("text"));

        var comboStore = Ext.getStore("ComboVmTemplateStore");
        comboStore.load({
            url : GLOBAL.apiUrlPrefix + 'vm/templatelist/' + vmHostConstants.selectRecord.get("id")
        });
    },

    createVM: function(button) {
        var addVmForm = Ext.getCmp("addVmForm");

        if(addVmForm.isValid()) {

            var sendData = addVmForm.getForm().getFieldValues();

            Ext.Ajax.request({
                 url: GLOBAL.apiUrlPrefix + "vm/clone",
                 method: "POST",
                 headers : {
                     "Content-Type" : "application/json"
                 },
                 waitMsg: 'Saving Data...',
                 waitMsgTarget : addVmForm.getEl(),
                 jsonData: sendData,
                 success: function (response) {

                     if(response.status == 200) {

                         Ext.Msg.alert('Success', '등록이 완료되었습니다.');

                         menuConstants.me.renderServerTree();
                         addVmForm.up('window').close();

                     }

                },
                failure: function (response) {
                    Ext.Msg.alert('Failure', response.responseText);
                }
            });

        }

    },

    deleteVm: function() {

        Ext.MessageBox.confirm('Confirm', 'VM을 삭제 하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.apiUrlPrefix + "vm/" + vmHostConstants.actionRecord.get("id"),
                    method : "DELETE",
                    disableCaching : true,
                    waitMsg: 'Delete VM...',
                    success: function(response){

                        if(response.status == 200) {

                            Ext.Msg.alert('Success', '삭제가 완료되었습니다.');

                            menuConstants.me.renderServerTree();

                        }

                    }
                });
            }

        });

    }

});
