/*
 * File: app/controller/MenuController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('spider.controller.MenuController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'expandImg',
            selector: '#expandImg'
        },
        {
            ref: 'collapseImg',
            selector: '#collapseImg'
        },
        {
            ref: 'listMenuPanel',
            selector: '#listMenuPanel'
        },
        {
            ref: 'dashboardBtn',
            selector: '#dashboardBtn'
        },
        {
            ref: 'managementBtn',
            selector: '#managementBtn'
        },
        {
            ref: 'monitoringBtn',
            selector: '#monitoringBtn'
        },
        {
            ref: 'centerContainer',
            selector: '#centerPanel'
        },
        {
            ref: 'menuPanel',
            selector: '#menuPanel'
        },
        {
            ref: 'mainViewBtn',
            selector: '#mainViewBtn'
        },
        {
            ref: 'mytool',
            selector: '#mytool'
        }
    ],

    dashboardClick: function(button, e, eOpts) {
        /**
         * Dashboard 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            managementBtn = this.getManagementBtn(),
            monitoringBtn = this.getMonitoringBtn(),
            mainViewBtn = this.getMainViewBtn(),
            menuPanel = this.getMenuPanel();

        // 현재 선택된 item이 dashboardPanel일 경우 무시한다.
        if (centerContainer.layout.getActiveItem().itemId === "dashboardPanel") {
            dashboardBtn.toggle(true);
            return;
        }

        dashboardBtn.toggle(true);
        managementBtn.toggle(false);
        monitoringBtn.toggle(false);
        mainViewBtn.toggle(false);

        centerContainer.layout.setActiveItem(0);

        //this.renderDashboard();
        clearInterval(GlobalData.intervalId1);
        clearInterval(GlobalData.intervalId2);
        clearInterval(GlobalData.intervalId3);

    },

    managementClick: function(button, e, eOpts) {
        /**
         * NFV Management 메뉴 버튼 클릭 시 수행되는 function
         */
        this.viewManagementMenu();
    },

    onMonitoringBtnClick: function(button, e, eOpts) {

        /**
         * Sample 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            managementBtn = this.getManagementBtn(),
            monitoringBtn = this.getMonitoringBtn(),
            mainViewBtn = this.getMainViewBtn(),
            menuPanel = this.getMenuPanel();

        dashboardBtn.toggle(false);
        managementBtn.toggle(false);
        mainViewBtn.toggle(false);
        monitoringBtn.toggle(true);

        centerContainer.layout.setActiveItem(2);

        Ext.Ajax.request({
            url: 'http://192.168.0.3:8000/render/?width=786&height=508&_salt=1409028000.87&target=vyos.cpu.0.cpu.user.value&from=-2minutes&rawData=true&format=json',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);
                var data = columnData[0];

                // Get the quality field from record
                // Update chart with data
                var chartList = [];
                Ext.each(data.datapoints, function (chartData) {
                    var chartCol = {};
                    chartCol.test = chartData.value;
                    chartCol.cate = chartData.date;
                    chartList.push(chartCol);
                });

                Ext.getCmp('sampleChart').series.getAt(0).setTitle(data.target);

                Ext.getCmp('sampleChart').getStore().loadData(chartList, false);

            }
        });

        clearInterval(GlobalData.intervalId1);
        clearInterval(GlobalData.intervalId2);
        clearInterval(GlobalData.intervalId3);
    },

    onMainViewBtnClick: function(button, e, eOpts) {

        /**
         * Main View 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            managementBtn = this.getManagementBtn(),
            monitoringBtn = this.getMonitoringBtn(),
            mainViewBtn = this.getMainViewBtn(),
            menuPanel = this.getMenuPanel();

        // 현재 선택된 item이 dashboardPanel일 경우 무시한다.
        if (centerContainer.layout.getActiveItem().itemId === "samplePanel") {
            button.toggle(true);
            return;
        }

        dashboardBtn.toggle(false);
        managementBtn.toggle(false);
        monitoringBtn.toggle(false);
        mainViewBtn.toggle(true);

        centerContainer.layout.setActiveItem(3);

        clearInterval(GlobalData.intervalId1);
        clearInterval(GlobalData.intervalId2);
        clearInterval(GlobalData.intervalId3);
    },

    onMytoolClick: function(tool, e, eOpts) {
        this.renderServerTree();
    },

    onLaunch: function() {
        var listMenuPanel = this.getListMenuPanel();

        /**
         * Expand-All Image click event를 catch 하도록 설정
         */
        this.getExpandImg().getEl().on('click', function() {
            listMenuPanel.expandAll();
        });

        /**
         * Collapse-All Image click event를 catch 하도록 설정
         */
        this.getCollapseImg().getEl().on('click', function() {
            listMenuPanel.collapseAll();
        });

        this.renderServerTree();


        //this.renderDashboard();
        /*

        Ext.select(".dashboard-graph-panel").on('resize', function(panel, w, h) {
            alert('Panel resized to ' + w + 'x' + h);
        });


        */
        /*
        Ext.Ajax.request({
            url: 'http://192.168.0.3:8000/render/?width=786&height=508&_salt=1409028000.87&target=vyos.cpu.0.cpu.user.value&from=-2minutes&rawData=true&format=json',
            disableCaching : true,
            success: function(response){

                var columnData = Ext.decode(response.responseText);
                var data = columnData[0];

                // Get the quality field from record
                // Update chart with data
                var chartList = [];
                Ext.each(data.datapoints, function (chartData) {
                    var chartCol = {};
                    chartCol.test = chartData.value;
                    chartCol.cate = chartData.date;
                    chartList.push(chartCol);
                });

                //Ext.getCmp('sampleStore').series.getAt(0).setTitle(data.target);

                Ext.getStore('SampleStore').loadData(chartList, false);
            }
        });
        */
    },

    renderServerTree: function() {

        Ext.Ajax.request({
            url: GLOBAL.apiUrlPrefix + 'mon/vmhost/_all',
            disableCaching : true,
            success: function(response){

                var hostDatas = Ext.decode(response.responseText);

                if(hostDatas != null) {

                    var vmDatas = null;

                    Ext.Ajax.request({
                        url: GLOBAL.apiUrlPrefix + 'mon/vm/_all',
                        disableCaching : true,
                        success: function(vmResponse){

                            vmDatas = Ext.decode(vmResponse.responseText);

                            Ext.each(hostDatas, function(host, index) {

                                host.id = host._id;
                                host.text = host.name;
                                host.icon = 'resources/images/icons/server.png';
                                host.type = 'vmhost';

                                if(index == 0) {
                                    host.expanded = true;
                                }

                                var vmList = [];
                                Ext.each(vmDatas, function(vm) {

                                    if(host._id == vm.vmhost) {

                                        vm.id = vm._id;
                                        vm.text = vm.name;
                                        vm.icon = 'resources/images/icons/host.png';
                                        vm.type = 'vm';
                                        vm.leaf = true;

                                        vmList.push(vm);
                                    }
                                });

                                if(vmList.length > 0) {

                                    host.leaf = false;
                                    host.children = vmList;

                                } else {

                                    host.leaf = true;

                                }

                            });

                            var treeStore = Ext.create('Ext.data.TreeStore', {
                                    model: 'spider.model.VmHostModel',
                                    root: {
                                        expanded: true,
                                        text: 'Server List',
                                        icon : '',
                                        type : 'root',
                                        children: hostDatas
                                    }
                                });

                            Ext.getCmp("listMenuPanel").bindStore(treeStore);

                            dashboardConstants.me.renderDashboard();

                        }
                    });
                }

            }
        });


    },

    renderDashboard: function() {

        var dashboardPanel = Ext.getCmp('DashboardPanel');

        dashboardPanel.setLoading(true);

        var dashboardPanels = [];
        var dashboardFieldSets = [];

        var titles = ['kh-j-nfv-host-01-ncia.go.kr','kh-j-nfv-host-02-ncia.go.kr','kh-j-nfv-host-03-ncia.go.kr','kh-j-nfv-host-04-ncia.go.kr',
                      'kh-j-nfv-host-05-ncia.go.kr','kh-j-nfv-host-06-ncia.go.kr','kh-j-nfv-host-07-ncia.go.kr','kh-j-nfv-host-08-ncia.go.kr'];
        var currentInbounds = ['23.12 kbps','12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps','1.81 kbps'];
        var averageInbounds = ['1.81 kbps','23.12 kbps','12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps'];
        var peakInbounds = ['12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps','1.81 kbps','23.12 kbps'];
        var currentOutbounds = ['12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps','1.81 kbps','23.12 kbps'];
        var averageOutbounds = ['23.12 kbps','12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps','1.81 kbps'];
        var peakOutbounds = ['1.81 kbps','23.12 kbps','12.13 kbps','8.45 kbps','3.14 kbps','54.34 kbps','5.23 kbps','2.34 kbps'];

        var serverNames = [['NFV Guest 11','NFV Guest 12','NFV Guest 13','NFV Guest 14'],
                           ['NFV Guest 21','NFV Guest 22','NFV Guest 23','NFV Guest 24'],
                           ['NFV Guest 31','NFV Guest 32','NFV Guest 33','NFV Guest 34'],
                           ['NFV Guest 41','NFV Guest 42','NFV Guest 43','NFV Guest 44'],
                           ['NFV Guest 51','NFV Guest 52','NFV Guest 53','NFV Guest 54'],
                           ['NFV Guest 61','NFV Guest 62','NFV Guest 63','NFV Guest 64'],
                           ['NFV Guest 71','NFV Guest 72','NFV Guest 73','NFV Guest 74'],
                           ['NFV Guest 81','NFV Guest 82','NFV Guest 83','NFV Guest 84']];

        var cpuStats =    [['01','02','03','04'],
                           ['05','01','02','03'],
                           ['04','05','01','02'],
                           ['03','04','05','01'],
                           ['02','03','04','05'],
                           ['01','02','03','04'],
                           ['05','01','02','03'],
                           ['04','05','01','02']];

        var memoryStats = [['03','04','05','01'],
                           ['02','03','04','05'],
                           ['01','02','03','04'],
                           ['01','02','03','04'],
                           ['05','01','02','03'],
                           ['04','05','01','02'],
                           ['05','01','02','03'],
                           ['04','05','01','02']];

        for (var i = 0; i < 2; i++) {
            dashboardPanels.push(
                Ext.create('Ext.panel.Panel', {
                    requires: [
                        'Ext.form.FieldSet',
                        'Ext.panel.Panel',
                        'Ext.form.Label'
                    ],
                    layout: 'anchor',
                    columnWidth: 0.5
                })
            );
        }

        for (var i = 0; i < titles.length; i++) {
            dashboardFieldSets.push(
                Ext.create('Ext.form.FieldSet', {
                    margin: '5 5 5 5',
                    collapsible: true,
                    title: titles[i],
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    }
                })
            );

            if (i % 2 === 0) {
                dashboardPanels[0].add(dashboardFieldSets[i]);
            } else {
                dashboardPanels[1].add(dashboardFieldSets[i]);
            }
        }

        for (var i = 0; i < titles.length; i++) {
            var panels = [];

            for (var j = 0; j < 7; j++) {
                if (j === 3) {
                    panels.push(
                        Ext.create('Ext.panel.Panel', {
                            width: 50
                        })
                    );
                } else {
                    panels.push(
                        Ext.create('Ext.panel.Panel', {
                            flex: 1,
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            }
                        })
                    );

                    if (j === 0) {
                        var diff = serverNames[i].length - 4 + 2;

                        if (diff < 1) {
                            diff = 1;
                        }

                        for (var k = 0; k < diff; k++) {
                            panels[j].add(
                                Ext.create('Ext.form.Label', {
                                    flex: 1,
                                    html: '<center><b></b></center>',
                                    style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                                })
                            );
                        }

                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Current</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;}'
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Average</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;}'
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Peak</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;}'
                            })
                        );
                    } else if (j === 1) {
                        var diff = serverNames[i].length - 4 + 1;
                        for (var k = 0; k < diff; k++) {
                            panels[j].add(
                                Ext.create('Ext.form.Label', {
                                    flex: 1,
                                    html: '<center><b></b></center>',
                                    style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                                })
                            );
                        }

                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Inbound</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;}'
                            })
                        );

                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: currentInbounds[i]
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: averageInbounds[i]
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: peakInbounds[i]
                            })
                        );
                    } else if (j === 2) {
                        var diff = serverNames[i].length - 4 + 1;
                        for (var k = 0; k < diff; k++) {
                            panels[j].add(
                                Ext.create('Ext.form.Label', {
                                    flex: 1,
                                    html: '<center><b></b></center>',
                                    style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                                })
                            );
                        }

                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Outbound</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;}'
                            })
                        );

                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: currentOutbounds[i]
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: averageOutbounds[i]
                            })
                        );
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                                text: peakOutbounds[i]
                            })
                        );
                    } else if (j === 4) {
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b></b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                            })
                        );
                    } else if (j === 5) {
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>CPU</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                            })
                        );
                    } else if (j === 6) {
                        panels[j].add(
                            Ext.create('Ext.form.Label', {
                                flex: 1,
                                html: '<center><b>Memory</b></center>',
                                style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}'
                            })
                        );
                    }
                }
            }

            var len = serverNames[i].length;
            for (var k = 0; k < len; k++) {
                panels[4].add(
                    Ext.create('Ext.form.Label', {
                        flex: 1,
                        style: '{display:inline-block;padding-top:10px;height: 36px;text-align:center;}',
                        text: serverNames[i][k]
                    })
                );

                panels[5].add(
                    Ext.create('Ext.form.Label', {
                        flex: 1,
                        html: '<center><img src="resources/images/icons/status_' + cpuStats[i][k] + '.png" width="36" height="36" border="0"></center>',
                        style: '{text-align: center;}'
                    })
                );

                panels[6].add(
                    Ext.create('Ext.form.Label', {
                        flex: 1,
                        html: '<center><img src="resources/images/icons/status_' + memoryStats[i][k] + '.png" width="36" height="36" border="0"></center>',
                        style: '{text-align: center;}'
                    })
                );
            }

            dashboardFieldSets[i].add(panels);
        }

        dashboardPanel.removeAll();
        dashboardPanel.add(dashboardPanels);

        dashboardPanel.setLoading(false);



    },

    init: function(application) {
                var menu = this;

                //Dashboard Menu Constants
                Ext.define('menuConstants', {
                    singleton: true,
                    me : menu
                });

        this.control({
            "#dashboardBtn": {
                click: this.dashboardClick
            },
            "#managementBtn": {
                click: this.managementClick
            },
            "#monitoringBtn": {
                click: this.onMonitoringBtnClick
            },
            "#mainViewBtn": {
                click: this.onMainViewBtnClick
            },
            "#mytool": {
                click: this.onMytoolClick
            }
        });
    },

    viewManagementMenu: function(vmId) {
        /**
         * NFV Management 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            managementBtn = this.getManagementBtn(),
            monitoringBtn = this.getMonitoringBtn(),
            mainViewBtn = this.getMainViewBtn(),
            menuPanel = this.getMenuPanel();

        // 현재 선택된 item이 managementPanel일 경우 무시한다.
        if (centerContainer.layout.getActiveItem().itemId !== "managementPanel") {

            managementBtn.toggle(true);
            dashboardBtn.toggle(false);
            monitoringBtn.toggle(false);
            mainViewBtn.toggle(false);

            Ext.getCmp('monitoringBtn').toggle(false);

            centerContainer.layout.setActiveItem(1);

            vmConstants.me.initVmManagement(vmId);

            //Ext.getCmp('hostMgmtBtn').fireEvent('click');
            //Ext.getCmp('utilizationBtn').fireEvent('click');

            //if (Ext.getCmp('hostGridPanel').selModel.selected.length === 0) {
            //    Ext.getCmp('hostGridPanel').selModel.select(0);
            //}
        } else {

            managementBtn.toggle(true);

            if(vmId !== vmConstants.selectVmId) {
                vmConstants.me.initVmManagement(vmId);
            }

        }

    }

});
